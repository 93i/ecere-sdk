/* A Bison parser, made by GNU Bison 2.4.2.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2006, 2009-2010 Free Software
   Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 1



/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 1 "grammar.y"

import "ecdefs"

#define YYLTYPE Location
#include "grammar.h"

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  (Current).start = (Rhs)[1].start;      \
  (Current).end = (Rhs)[N].end;
#endif

#define PRECOMPILER
extern File fileInput;
extern char * yytext;
OldList * ast;
int yylex();
int yyerror();
bool guess;
bool deleteWatchable = false;

#define MAX_STRUCT_LEVELS     256
AccessMode memberAccessStack[MAX_STRUCT_LEVELS];
int defaultMemberAccess = -1;

#define POP_DEFAULT_ACCESS    if(defaultMemberAccess > -1) defaultMemberAccess--;

#define uint _uint
default:



/* Line 189 of yacc.c  */
#line 105 "grammar.ec"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENTIFIER = 258,
     CONSTANT = 259,
     STRING_LITERAL = 260,
     SIZEOF = 261,
     PTR_OP = 262,
     INC_OP = 263,
     DEC_OP = 264,
     LEFT_OP = 265,
     RIGHT_OP = 266,
     LE_OP = 267,
     GE_OP = 268,
     EQ_OP = 269,
     NE_OP = 270,
     AND_OP = 271,
     OR_OP = 272,
     MUL_ASSIGN = 273,
     DIV_ASSIGN = 274,
     MOD_ASSIGN = 275,
     ADD_ASSIGN = 276,
     SUB_ASSIGN = 277,
     LEFT_ASSIGN = 278,
     RIGHT_ASSIGN = 279,
     AND_ASSIGN = 280,
     XOR_ASSIGN = 281,
     OR_ASSIGN = 282,
     TYPE_NAME = 283,
     TYPEDEF = 284,
     EXTERN = 285,
     STATIC = 286,
     AUTO = 287,
     REGISTER = 288,
     CHAR = 289,
     SHORT = 290,
     INT = 291,
     UINT = 292,
     INT64 = 293,
     LONG = 294,
     SIGNED = 295,
     UNSIGNED = 296,
     FLOAT = 297,
     DOUBLE = 298,
     CONST = 299,
     VOLATILE = 300,
     VOID = 301,
     VALIST = 302,
     STRUCT = 303,
     UNION = 304,
     ENUM = 305,
     ELLIPSIS = 306,
     CASE = 307,
     DEFAULT = 308,
     IF = 309,
     SWITCH = 310,
     WHILE = 311,
     DO = 312,
     FOR = 313,
     GOTO = 314,
     CONTINUE = 315,
     BREAK = 316,
     RETURN = 317,
     IFX = 318,
     ELSE = 319,
     CLASS = 320,
     THISCLASS = 321,
     CLASS_NAME = 322,
     PROPERTY = 323,
     SETPROP = 324,
     GETPROP = 325,
     NEWOP = 326,
     RENEW = 327,
     DELETE = 328,
     EXT_DECL = 329,
     EXT_STORAGE = 330,
     IMPORT = 331,
     DEFINE = 332,
     VIRTUAL = 333,
     ATTRIB = 334,
     PUBLIC = 335,
     PRIVATE = 336,
     TYPED_OBJECT = 337,
     ANY_OBJECT = 338,
     _INCREF = 339,
     EXTENSION = 340,
     ASM = 341,
     TYPEOF = 342,
     WATCH = 343,
     STOPWATCHING = 344,
     FIREWATCHERS = 345,
     WATCHABLE = 346,
     CLASS_DESIGNER = 347,
     CLASS_NO_EXPANSION = 348,
     CLASS_FIXED = 349,
     ISPROPSET = 350,
     CLASS_DEFAULT_PROPERTY = 351,
     PROPERTY_CATEGORY = 352,
     CLASS_DATA = 353,
     CLASS_PROPERTY = 354,
     SUBCLASS = 355,
     NAMESPACE = 356,
     NEW0OP = 357,
     RENEW0 = 358,
     VAARG = 359,
     DBTABLE = 360,
     DBFIELD = 361,
     DBINDEX = 362,
     DATABASE_OPEN = 363,
     ALIGNOF = 364,
     ATTRIB_DEP = 365,
     __ATTRIB = 366
   };
#endif



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 35 "grammar.y"

   SpecifierType specifierType;
   int i;
   AccessMode declMode;
   Identifier id;
   Expression exp;
   Specifier specifier;
   OldList * list;
   Enumerator enumerator;
   Declarator declarator;
   Pointer pointer;
   Initializer initializer;
   InitDeclarator initDeclarator;
   TypeName typeName;
   Declaration declaration;
   Statement stmt;
   FunctionDefinition function;
   External external;
   Context context;
   AsmField asmField;
   Attrib attrib;
   ExtDecl extDecl;
   Attribute attribute;

   Instantiation instance;
   MembersInit membersInit;
   MemberInit memberInit;
   ClassFunction classFunction;
   ClassDefinition _class;
   ClassDef classDef;
   PropertyDef prop;
   char * string;
   Symbol symbol;
   PropertyWatch propertyWatch;
   TemplateParameter templateParameter;
   TemplateArgument templateArgument;
   TemplateDatatype templateDatatype;
   
   DBTableEntry dbtableEntry;
   DBIndexItem dbindexItem;
   DBTableDef dbtableDef;



/* Line 214 of yacc.c  */
#line 297 "grammar.ec"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


/* Copy the second part of user declarations.  */


/* Line 264 of yacc.c  */
#line 322 "grammar.ec"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  283
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   38740

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  137
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  260
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1315
/* YYNRULES -- Number of states.  */
#define YYNSTATES  2196

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   366

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   131,     2,     2,   125,   133,   128,     2,
     115,   116,   112,   129,   120,   130,   123,   132,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   124,   118,
     113,   119,   114,   136,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   126,     2,   127,   134,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   122,   135,   121,   117,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    11,    14,    16,    18,    20,
      25,    30,    33,    35,    39,    44,    48,    51,    54,    56,
      60,    63,    66,    69,    72,    75,    78,    81,    84,    86,
      89,    91,    94,    97,   100,   103,   106,   109,   111,   113,
     117,   119,   123,   127,   129,   131,   135,   139,   141,   145,
     149,   153,   157,   159,   162,   165,   167,   169,   172,   175,
     178,   181,   183,   186,   189,   191,   193,   196,   199,   201,
     204,   207,   210,   213,   215,   218,   221,   225,   230,   236,
     241,   245,   250,   253,   257,   262,   268,   273,   277,   282,
     288,   294,   299,   302,   306,   310,   314,   318,   321,   326,
     330,   334,   337,   342,   346,   349,   353,   356,   360,   363,
     365,   368,   372,   376,   380,   383,   385,   389,   393,   395,
     399,   403,   406,   411,   417,   421,   426,   430,   432,   436,
     440,   444,   447,   451,   454,   459,   465,   469,   474,   478,
     480,   484,   488,   491,   493,   496,   499,   502,   504,   507,
     513,   521,   531,   538,   547,   552,   559,   561,   564,   568,
     573,   577,   580,   583,   586,   588,   590,   595,   599,   603,
     607,   610,   613,   616,   621,   623,   626,   628,   632,   636,
     638,   640,   644,   652,   654,   657,   662,   664,   667,   670,
     672,   674,   677,   681,   685,   688,   691,   693,   695,   698,
     701,   703,   706,   709,   712,   715,   717,   720,   722,   724,
     727,   732,   737,   744,   747,   752,   757,   764,   766,   768,
     772,   774,   777,   782,   784,   786,   788,   790,   794,   796,
     798,   800,   804,   808,   812,   816,   820,   824,   826,   830,
     832,   835,   838,   842,   846,   852,   858,   865,   872,   875,
     878,   882,   886,   890,   894,   898,   902,   906,   910,   914,
     918,   922,   924,   926,   930,   932,   935,   940,   942,   944,
     949,   954,   960,   969,   971,   973,   976,   983,   990,   996,
    1002,  1009,  1016,  1022,  1028,  1036,  1044,  1051,  1058,  1066,
    1074,  1081,  1088,  1093,  1099,  1104,  1111,  1116,  1118,  1120,
    1122,  1124,  1128,  1130,  1133,  1136,  1139,  1141,  1146,  1151,
    1155,  1160,  1165,  1169,  1173,  1176,  1179,  1184,  1189,  1193,
    1198,  1202,  1206,  1209,  1212,  1214,  1219,  1224,  1228,  1233,
    1238,  1242,  1246,  1249,  1252,  1257,  1262,  1266,  1271,  1275,
    1279,  1282,  1285,  1287,  1289,  1293,  1297,  1299,  1301,  1305,
    1309,  1312,  1315,  1318,  1321,  1324,  1329,  1332,  1337,  1343,
    1349,  1354,  1357,  1362,  1364,  1366,  1368,  1370,  1372,  1374,
    1376,  1378,  1380,  1382,  1384,  1386,  1388,  1393,  1395,  1399,
    1403,  1407,  1411,  1415,  1419,  1421,  1425,  1429,  1433,  1437,
    1439,  1443,  1447,  1451,  1455,  1458,  1460,  1463,  1467,  1471,
    1475,  1479,  1483,  1487,  1491,  1493,  1497,  1501,  1505,  1509,
    1513,  1517,  1521,  1525,  1527,  1531,  1535,  1539,  1543,  1545,
    1549,  1553,  1557,  1561,  1563,  1567,  1571,  1575,  1579,  1581,
    1585,  1589,  1591,  1595,  1599,  1601,  1607,  1613,  1619,  1625,
    1631,  1637,  1643,  1649,  1655,  1661,  1667,  1673,  1679,  1685,
    1691,  1697,  1699,  1703,  1707,  1711,  1715,  1719,  1723,  1727,
    1731,  1733,  1735,  1737,  1739,  1741,  1743,  1745,  1747,  1749,
    1751,  1753,  1755,  1759,  1763,  1766,  1768,  1772,  1776,  1778,
    1780,  1783,  1786,  1790,  1794,  1798,  1802,  1806,  1810,  1814,
    1816,  1819,  1822,  1826,  1830,  1834,  1838,  1842,  1846,  1850,
    1853,  1856,  1859,  1862,  1866,  1869,  1875,  1882,  1889,  1893,
    1896,  1902,  1904,  1906,  1908,  1910,  1912,  1917,  1919,  1923,
    1927,  1931,  1935,  1939,  1943,  1945,  1949,  1953,  1957,  1961,
    1963,  1967,  1971,  1975,  1979,  1981,  1984,  1988,  1992,  1996,
    2000,  2004,  2008,  2012,  2014,  2018,  2022,  2026,  2030,  2034,
    2038,  2042,  2046,  2048,  2052,  2056,  2060,  2064,  2066,  2070,
    2074,  2078,  2082,  2084,  2088,  2092,  2096,  2100,  2102,  2106,
    2110,  2112,  2116,  2120,  2122,  2128,  2134,  2140,  2146,  2151,
    2156,  2161,  2166,  2172,  2178,  2184,  2190,  2195,  2200,  2205,
    2210,  2216,  2222,  2228,  2234,  2240,  2246,  2252,  2258,  2262,
    2266,  2269,  2272,  2274,  2278,  2282,  2286,  2290,  2292,  2295,
    2299,  2303,  2306,  2309,  2312,  2314,  2317,  2321,  2325,  2327,
    2329,  2331,  2333,  2335,  2337,  2339,  2341,  2343,  2345,  2347,
    2349,  2351,  2355,  2359,  2361,  2365,  2368,  2370,  2373,  2376,
    2379,  2384,  2389,  2393,  2397,  2402,  2408,  2413,  2420,  2427,
    2432,  2438,  2443,  2450,  2457,  2460,  2463,  2466,  2472,  2476,
    2482,  2489,  2495,  2503,  2511,  2520,  2529,  2537,  2545,  2549,
    2553,  2557,  2562,  2566,  2572,  2578,  2580,  2582,  2584,  2586,
    2588,  2590,  2592,  2594,  2596,  2598,  2601,  2603,  2605,  2607,
    2609,  2611,  2613,  2615,  2617,  2619,  2621,  2623,  2625,  2627,
    2629,  2631,  2633,  2638,  2643,  2648,  2650,  2652,  2654,  2656,
    2658,  2660,  2662,  2664,  2666,  2668,  2670,  2672,  2674,  2676,
    2678,  2680,  2682,  2684,  2686,  2691,  2696,  2701,  2703,  2705,
    2708,  2711,  2715,  2721,  2724,  2728,  2734,  2740,  2746,  2748,
    2752,  2755,  2758,  2762,  2766,  2769,  2773,  2777,  2782,  2786,
    2790,  2794,  2798,  2802,  2806,  2811,  2816,  2821,  2823,  2825,
    2830,  2834,  2837,  2841,  2845,  2849,  2853,  2857,  2861,  2865,
    2869,  2873,  2877,  2881,  2885,  2887,  2889,  2891,  2894,  2896,
    2899,  2901,  2904,  2906,  2909,  2911,  2914,  2916,  2919,  2921,
    2924,  2926,  2929,  2931,  2934,  2936,  2939,  2941,  2944,  2946,
    2949,  2951,  2954,  2956,  2959,  2961,  2964,  2966,  2969,  2971,
    2974,  2976,  2979,  2981,  2984,  2986,  2989,  2991,  2994,  2996,
    2999,  3001,  3004,  3006,  3009,  3011,  3014,  3016,  3019,  3021,
    3023,  3025,  3028,  3030,  3033,  3035,  3038,  3040,  3043,  3048,
    3054,  3056,  3058,  3060,  3063,  3065,  3068,  3070,  3073,  3075,
    3078,  3083,  3089,  3091,  3094,  3096,  3099,  3101,  3104,  3106,
    3109,  3111,  3114,  3116,  3119,  3124,  3130,  3132,  3135,  3137,
    3140,  3142,  3145,  3147,  3150,  3152,  3155,  3157,  3160,  3165,
    3171,  3175,  3179,  3181,  3185,  3189,  3193,  3197,  3199,  3201,
    3203,  3208,  3213,  3218,  3222,  3227,  3232,  3237,  3241,  3243,
    3247,  3252,  3256,  3261,  3266,  3271,  3276,  3280,  3283,  3287,
    3291,  3295,  3299,  3302,  3305,  3308,  3312,  3317,  3319,  3321,
    3324,  3328,  3332,  3336,  3340,  3343,  3346,  3349,  3353,  3358,
    3360,  3362,  3364,  3366,  3371,  3373,  3375,  3377,  3379,  3381,
    3383,  3385,  3387,  3389,  3394,  3396,  3399,  3403,  3410,  3416,
    3420,  3425,  3428,  3432,  3436,  3440,  3444,  3449,  3454,  3459,
    3462,  3466,  3470,  3474,  3479,  3484,  3488,  3493,  3496,  3500,
    3504,  3508,  3513,  3518,  3520,  3523,  3526,  3530,  3532,  3534,
    3537,  3540,  3544,  3546,  3548,  3551,  3554,  3558,  3560,  3563,
    3567,  3570,  3573,  3575,  3578,  3582,  3585,  3587,  3590,  3594,
    3598,  3600,  3603,  3607,  3611,  3613,  3616,  3620,  3624,  3626,
    3629,  3633,  3637,  3639,  3642,  3646,  3650,  3652,  3656,  3661,
    3663,  3668,  3671,  3677,  3681,  3683,  3685,  3687,  3689,  3691,
    3693,  3697,  3701,  3704,  3707,  3709,  3711,  3715,  3718,  3722,
    3724,  3728,  3732,  3736,  3740,  3744,  3746,  3749,  3753,  3757,
    3759,  3762,  3764,  3767,  3770,  3773,  3776,  3780,  3782,  3784,
    3788,  3792,  3794,  3798,  3803,  3807,  3812,  3816,  3820,  3825,
    3829,  3834,  3836,  3840,  3844,  3849,  3853,  3857,  3861,  3866,
    3868,  3872,  3876,  3880,  3884,  3888,  3890,  3894,  3897,  3899,
    3901,  3903,  3905,  3907,  3910,  3912,  3914,  3916,  3918,  3921,
    3924,  3927,  3929,  3931,  3933,  3935,  3937,  3940,  3942,  3944,
    3949,  3951,  3955,  3956,  3963,  3972,  3983,  3996,  4005,  4016,
    4027,  4033,  4041,  4051,  4063,  4071,  4081,  4091,  4095,  4100,
    4105,  4109,  4113,  4117,  4122,  4127,  4131,  4134,  4138,  4141,
    4143,  4145,  4147,  4149,  4151,  4154,  4158,  4161,  4164,  4167,
    4171,  4175,  4178,  4184,  4191,  4194,  4197,  4200,  4203,  4206,
    4209,  4211,  4214,  4217,  4221,  4223,  4226,  4228,  4231,  4234,
    4236,  4239,  4242,  4245,  4248,  4251,  4254,  4256,  4258,  4261,
    4264,  4266,  4268,  4271,  4274,  4276,  4279,  4282,  4284,  4287,
    4289,  4292,  4295,  4301,  4307,  4315,  4323,  4329,  4335,  4339,
    4342,  4348,  4353,  4358,  4366,  4373,  4380,  4386,  4394,  4401,
    4406,  4414,  4424,  4428,  4433,  4438,  4444,  4450,  4457,  4465,
    4472,  4479,  4485,  4491,  4496,  4500,  4503,  4505,  4508,  4513,
    4517,  4523,  4528,  4532,  4535,  4538,  4541,  4545,  4549,  4553,
    4557,  4560,  4563,  4565,  4567,  4572,  4576,  4581,  4585,  4589,
    4592,  4597,  4601,  4606,  4610,  4614,  4617,  4619,  4622,  4624,
    4626,  4629,  4631,  4634,  4638,  4642,  4644,  4647,  4650,  4653,
    4657,  4662,  4667,  4670,  4673,  4676,  4679,  4681,  4684,  4686,
    4689,  4691,  4694,  4697,  4699,  4702,  4704,  4707,  4710,  4713,
    4716,  4718,  4721,  4724,  4728,  4730,  4732,  4733,  4740,  4747,
    4753,  4758,  4760,  4763,  4766,  4768,  4772,  4776,  4781,  4783,
    4785,  4788,  4791,  4798,  4805,  4812
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     386,     0,    -1,   209,   112,    -1,   209,   113,    -1,   142,
      -1,   209,   209,    -1,    28,    -1,    28,    -1,   140,    -1,
     140,   113,   203,   114,    -1,   140,   113,   203,    11,    -1,
     295,   330,    -1,   328,    -1,   295,   115,   116,    -1,   117,
     295,   115,   116,    -1,    78,   295,   330,    -1,    78,   328,
      -1,   295,   331,    -1,   329,    -1,    78,   295,   331,    -1,
      78,   329,    -1,   143,   370,    -1,   146,   370,    -1,   146,
     118,    -1,   144,   370,    -1,   145,   370,    -1,   143,   118,
      -1,   143,   371,    -1,   147,    -1,   146,   371,    -1,   148,
      -1,   148,   118,    -1,   294,   330,    -1,   294,   332,    -1,
     294,   331,    -1,   151,   370,    -1,   151,   371,    -1,   152,
      -1,   151,    -1,   216,   119,   335,    -1,   335,    -1,   216,
     119,   336,    -1,   216,   119,     1,    -1,   336,    -1,   155,
      -1,   157,   120,   155,    -1,   158,   120,   155,    -1,   156,
      -1,   157,   120,   156,    -1,   158,   120,   156,    -1,   157,
     120,     1,    -1,   158,   120,     1,    -1,   120,    -1,   157,
     118,    -1,   158,   118,    -1,   159,    -1,   153,    -1,   162,
     159,    -1,   162,   153,    -1,   160,   159,    -1,   160,   153,
      -1,   118,    -1,   162,   118,    -1,   160,   118,    -1,   160,
      -1,   157,    -1,   160,   157,    -1,   162,   157,    -1,   154,
      -1,   161,   154,    -1,   162,   154,    -1,   160,   154,    -1,
     160,   158,    -1,   158,    -1,   157,     1,    -1,   164,   121,
      -1,   164,     1,   121,    -1,   294,   209,   122,   162,    -1,
     294,   209,   122,   161,     1,    -1,   294,   209,   122,   161,
      -1,   294,   209,   122,    -1,   294,   209,   122,     1,    -1,
     166,   121,    -1,   166,     1,   121,    -1,   295,   209,   122,
     162,    -1,   295,   209,   122,   161,     1,    -1,   295,   209,
     122,   161,    -1,   295,   209,   122,    -1,   295,   209,   122,
       1,    -1,   296,   209,   122,   161,   121,    -1,   296,   209,
     122,   162,   121,    -1,   296,   209,   122,   121,    -1,   169,
     121,    -1,   169,     1,   121,    -1,   142,   122,   161,    -1,
     209,   122,   161,    -1,   142,   122,   162,    -1,   142,   122,
      -1,   142,   122,   161,     1,    -1,   142,   122,     1,    -1,
     209,   122,   162,    -1,   209,   122,    -1,   209,   122,   161,
       1,    -1,   209,   122,     1,    -1,   171,   121,    -1,   171,
       1,   121,    -1,   122,   162,    -1,   122,   161,     1,    -1,
     122,     1,    -1,   122,    -1,   122,   161,    -1,   216,   119,
     335,    -1,   216,   119,   336,    -1,   216,   119,     1,    -1,
     216,     1,    -1,   172,    -1,   174,   120,   172,    -1,   175,
     120,   172,    -1,   173,    -1,   174,   120,   173,    -1,   175,
     120,   173,    -1,   174,     1,    -1,    68,   300,   209,   122,
      -1,    68,   300,   324,   209,   122,    -1,    68,   300,   122,
      -1,    68,   300,   324,   122,    -1,    68,     1,   122,    -1,
     176,    -1,   177,    69,   370,    -1,   177,    70,   370,    -1,
     177,    95,   370,    -1,   177,    91,    -1,   177,    97,   211,
      -1,   177,   121,    -1,    99,   300,   209,   122,    -1,    99,
     300,   324,   209,   122,    -1,    99,   300,   122,    -1,    99,
     300,   324,   122,    -1,    99,     1,   122,    -1,   179,    -1,
     180,    69,   370,    -1,   180,    70,   370,    -1,   180,   121,
      -1,   209,    -1,   182,   209,    -1,   182,   370,    -1,    73,
     370,    -1,   183,    -1,   184,   183,    -1,    88,   115,   182,
     116,   370,    -1,    88,   115,   237,   116,   122,   184,   121,
      -1,   237,   123,    88,   115,   237,   116,   122,   184,   121,
      -1,    89,   115,   237,   120,   182,   116,    -1,   237,   123,
      89,   115,   237,   120,   182,   116,    -1,    89,   115,   237,
     116,    -1,   237,   123,    89,   115,   237,   116,    -1,    90,
      -1,    90,   182,    -1,   216,   123,    90,    -1,   237,   123,
      90,   182,    -1,   295,   282,   118,    -1,   295,   118,    -1,
     168,   118,    -1,   165,   118,    -1,   149,    -1,   178,    -1,
     358,   295,   282,   118,    -1,   358,   295,   118,    -1,   358,
     168,   118,    -1,   358,   165,   118,    -1,   358,   149,    -1,
     358,   178,    -1,   174,   118,    -1,    98,   295,   282,   118,
      -1,   181,    -1,   185,   118,    -1,    91,    -1,    92,   209,
     118,    -1,    92,   142,   118,    -1,    93,    -1,    94,    -1,
      96,   209,   118,    -1,    99,   115,   209,   116,   119,   335,
     118,    -1,   118,    -1,   358,   124,    -1,   358,   115,   209,
     116,    -1,   150,    -1,   166,     1,    -1,   169,     1,    -1,
     165,    -1,   168,    -1,   358,   150,    -1,   358,   166,     1,
      -1,   358,   169,     1,    -1,   358,   165,    -1,   358,   168,
      -1,   175,    -1,   189,    -1,   191,   189,    -1,   192,   189,
      -1,   190,    -1,   191,     1,    -1,   192,     1,    -1,   191,
     190,    -1,   192,   190,    -1,   294,    -1,   294,   324,    -1,
     209,    -1,   193,    -1,    65,   209,    -1,    65,   209,   119,
     194,    -1,    65,   209,   124,   193,    -1,    65,   209,   124,
     193,   119,   194,    -1,    65,   141,    -1,    65,   141,   119,
     194,    -1,    65,   141,   124,   193,    -1,    65,   141,   124,
     193,   119,   194,    -1,   209,    -1,   209,    -1,   209,   119,
     196,    -1,   261,    -1,   193,   209,    -1,   193,   209,   119,
     198,    -1,   195,    -1,   197,    -1,   199,    -1,   200,    -1,
     201,   120,   200,    -1,   198,    -1,   196,    -1,   194,    -1,
     209,   119,   198,    -1,   209,   119,   196,    -1,   209,   119,
     194,    -1,   193,   119,   198,    -1,   193,   119,   196,    -1,
     193,   119,   194,    -1,   202,    -1,   203,   120,   202,    -1,
      65,    -1,   204,   209,    -1,   204,   140,    -1,   209,   204,
     209,    -1,   209,   204,   140,    -1,   204,   209,   113,   201,
     114,    -1,   204,   140,   113,   201,   114,    -1,   209,   204,
     209,   113,   201,   114,    -1,   209,   204,   140,   113,   201,
     114,    -1,   208,   121,    -1,   207,   118,    -1,   205,   122,
     121,    -1,   207,   122,   121,    -1,   204,   209,   118,    -1,
     204,   139,   118,    -1,   205,   124,   299,    -1,   205,   122,
     192,    -1,   207,   122,   192,    -1,   205,   122,   191,    -1,
     207,   122,   191,    -1,   205,   122,     1,    -1,   207,   122,
       1,    -1,     3,    -1,   212,    -1,   115,   239,   116,    -1,
     381,    -1,   125,   381,    -1,   125,   381,   123,   381,    -1,
     209,    -1,   168,    -1,    85,   115,   370,   116,    -1,    85,
     115,   239,   116,    -1,    85,   115,   342,   116,   333,    -1,
      85,   115,   342,   116,   115,   342,   116,   333,    -1,     4,
      -1,   211,    -1,   115,   116,    -1,    71,   302,   325,   126,
     261,   127,    -1,    71,   302,   325,   126,   262,   127,    -1,
      71,   302,   126,   261,   127,    -1,    71,   302,   126,   262,
     127,    -1,   102,   302,   325,   126,   261,   127,    -1,   102,
     302,   325,   126,   262,   127,    -1,   102,   302,   126,   261,
     127,    -1,   102,   302,   126,   262,   127,    -1,    72,   261,
     301,   325,   126,   261,   127,    -1,    72,   261,   301,   325,
     126,   262,   127,    -1,    72,   261,   301,   126,   261,   127,
      -1,    72,   261,   301,   126,   262,   127,    -1,   103,   261,
     301,   325,   126,   261,   127,    -1,   103,   261,   301,   325,
     126,   262,   127,    -1,   103,   261,   301,   126,   261,   127,
      -1,   103,   261,   301,   126,   262,   127,    -1,    65,   115,
     294,   116,    -1,    65,   115,   294,   324,   116,    -1,    65,
     115,   209,   116,    -1,   104,   115,   237,   120,   342,   116,
      -1,    98,   115,   209,   116,    -1,   393,    -1,   394,    -1,
     395,    -1,   396,    -1,   126,   218,   127,    -1,   170,    -1,
     171,     1,    -1,   115,   239,    -1,   115,   259,    -1,   210,
      -1,   216,   126,   239,   127,    -1,   216,   126,   259,   127,
      -1,   216,   115,   116,    -1,   216,   115,   218,   116,    -1,
     216,   115,   219,   116,    -1,   216,   123,   209,    -1,   216,
       7,   209,    -1,   216,     8,    -1,   216,     9,    -1,   241,
     126,   239,   127,    -1,   241,   126,   259,   127,    -1,   241,
     115,   116,    -1,   241,   115,   218,   116,    -1,   241,   123,
     209,    -1,   241,     7,   209,    -1,   241,     8,    -1,   241,
       9,    -1,   212,    -1,   217,   126,   239,   127,    -1,   217,
     126,   259,   127,    -1,   217,   115,   116,    -1,   217,   115,
     218,   116,    -1,   217,   115,   219,   116,    -1,   217,   123,
     209,    -1,   217,     7,   209,    -1,   217,     8,    -1,   217,
       9,    -1,   242,   126,   239,   127,    -1,   242,   126,   259,
     127,    -1,   242,   115,   116,    -1,   242,   115,   218,   116,
      -1,   242,   123,   209,    -1,   242,     7,   209,    -1,   242,
       8,    -1,   242,     9,    -1,   237,    -1,   213,    -1,   218,
     120,   237,    -1,   218,   120,   213,    -1,   258,    -1,   214,
      -1,   218,   120,   258,    -1,   218,   120,   214,    -1,   218,
     120,    -1,     8,   221,    -1,     9,   221,    -1,   223,   224,
      -1,   223,   213,    -1,     6,   115,   221,   116,    -1,     6,
     222,    -1,     6,   115,   343,   116,    -1,     6,   115,    65,
     139,   116,    -1,     6,   115,    65,   138,   116,    -1,   109,
     115,   221,   116,    -1,   109,   222,    -1,   109,   115,   343,
     116,    -1,   220,    -1,   216,    -1,   220,    -1,   217,    -1,
     128,    -1,   112,    -1,   129,    -1,   130,    -1,   117,    -1,
     131,    -1,    73,    -1,    84,    -1,   221,    -1,   115,   342,
     116,   224,    -1,   224,    -1,   225,   112,   224,    -1,   225,
     132,   224,    -1,   225,   133,   224,    -1,   247,   112,   224,
      -1,   247,   132,   224,    -1,   247,   133,   224,    -1,   225,
      -1,   226,   129,   225,    -1,   226,   130,   225,    -1,   248,
     129,   225,    -1,   248,   130,   225,    -1,   226,    -1,   227,
      10,   226,    -1,   227,    11,   226,    -1,   249,    10,   226,
      -1,   249,    11,   226,    -1,   229,   113,    -1,   227,    -1,
     228,   227,    -1,   229,   114,   227,    -1,   229,    12,   227,
      -1,   229,    13,   227,    -1,   250,   113,   227,    -1,   250,
     114,   227,    -1,   250,    12,   227,    -1,   250,    13,   227,
      -1,   229,    -1,   230,    14,   229,    -1,   230,    15,   229,
      -1,   251,    14,   229,    -1,   251,    15,   229,    -1,   230,
      14,   213,    -1,   230,    15,   213,    -1,   251,    14,   213,
      -1,   251,    15,   213,    -1,   230,    -1,   231,   128,   230,
      -1,   252,   128,   230,    -1,   231,   128,   213,    -1,   252,
     128,   213,    -1,   231,    -1,   232,   134,   231,    -1,   253,
     134,   231,    -1,   232,   134,   213,    -1,   253,   134,   213,
      -1,   232,    -1,   233,   135,   232,    -1,   254,   135,   232,
      -1,   233,   135,   213,    -1,   254,   135,   213,    -1,   233,
      -1,   234,    16,   233,    -1,   255,    16,   233,    -1,   234,
      -1,   235,    17,   234,    -1,   256,    17,   234,    -1,   235,
      -1,   235,   136,   239,   124,   236,    -1,   235,   136,   259,
     124,   236,    -1,   256,   136,   239,   124,   236,    -1,   256,
     136,   259,   124,   236,    -1,   235,   136,   240,   124,   236,
      -1,   235,   136,   260,   124,   236,    -1,   256,   136,   240,
     124,   236,    -1,   256,   136,   260,   124,   236,    -1,   235,
     136,   239,   124,   213,    -1,   235,   136,   259,   124,   213,
      -1,   256,   136,   239,   124,   213,    -1,   256,   136,   259,
     124,   213,    -1,   235,   136,   240,   124,   213,    -1,   235,
     136,   260,   124,   213,    -1,   256,   136,   240,   124,   213,
      -1,   256,   136,   260,   124,   213,    -1,   236,    -1,   221,
     238,   237,    -1,   244,   238,   237,    -1,   236,   238,   237,
      -1,   257,   238,   237,    -1,   221,   238,   213,    -1,   244,
     238,   213,    -1,   236,   238,   213,    -1,   257,   238,   213,
      -1,   119,    -1,    18,    -1,    19,    -1,    20,    -1,    21,
      -1,    22,    -1,    23,    -1,    24,    -1,    25,    -1,    26,
      -1,    27,    -1,   237,    -1,   239,   120,   237,    -1,   259,
     120,   237,    -1,   259,   116,    -1,   213,    -1,   239,   120,
     213,    -1,   259,   120,   213,    -1,   215,    -1,     1,    -1,
     216,     1,    -1,   169,     1,    -1,   216,     7,     1,    -1,
     241,     7,     1,    -1,   216,   115,   218,    -1,   216,   115,
     219,    -1,   216,   123,     1,    -1,   241,   115,   219,    -1,
     241,   123,     1,    -1,     1,    -1,   217,     1,    -1,   169,
       1,    -1,   217,     7,     1,    -1,   242,     7,     1,    -1,
     217,   115,   218,    -1,   217,   115,   219,    -1,   217,   123,
       1,    -1,   242,   115,   219,    -1,   242,   123,     1,    -1,
       8,   244,    -1,     9,   244,    -1,   223,   246,    -1,   223,
     214,    -1,     6,   115,   244,    -1,     6,   245,    -1,     6,
     115,   343,   116,     1,    -1,     6,   115,    65,   139,   116,
       1,    -1,     6,   115,    65,   138,   116,     1,    -1,   109,
     115,   244,    -1,   109,   245,    -1,   109,   115,   343,   116,
       1,    -1,   243,    -1,   241,    -1,   243,    -1,   242,    -1,
     244,    -1,   115,   342,   116,   246,    -1,   246,    -1,   225,
     112,   246,    -1,   225,   132,   246,    -1,   225,   133,   246,
      -1,   247,   112,   246,    -1,   247,   132,   246,    -1,   247,
     133,   246,    -1,   247,    -1,   226,   129,   247,    -1,   226,
     130,   247,    -1,   248,   129,   247,    -1,   248,   130,   247,
      -1,   248,    -1,   227,    10,   248,    -1,   227,    11,   248,
      -1,   249,    10,   248,    -1,   249,    11,   248,    -1,   249,
      -1,   228,   249,    -1,   229,   114,   249,    -1,   229,    12,
     249,    -1,   229,    13,   249,    -1,   250,   113,   249,    -1,
     250,   114,   249,    -1,   250,    12,   249,    -1,   250,    13,
     249,    -1,   250,    -1,   230,    14,   250,    -1,   230,    15,
     250,    -1,   251,    14,   250,    -1,   251,    15,   250,    -1,
     230,    14,   214,    -1,   230,    15,   214,    -1,   251,    14,
     214,    -1,   251,    15,   214,    -1,   251,    -1,   231,   128,
     251,    -1,   252,   128,   251,    -1,   231,   128,   214,    -1,
     252,   128,   214,    -1,   252,    -1,   232,   134,   252,    -1,
     253,   134,   252,    -1,   232,   134,   214,    -1,   253,   134,
     214,    -1,   253,    -1,   233,   135,   253,    -1,   254,   135,
     253,    -1,   233,   135,   214,    -1,   254,   135,   214,    -1,
     254,    -1,   234,    16,   254,    -1,   255,    16,   254,    -1,
     255,    -1,   235,    17,   255,    -1,   256,    17,   255,    -1,
     256,    -1,   235,   136,   239,   124,   256,    -1,   235,   136,
     259,   124,   256,    -1,   256,   136,   239,   124,   256,    -1,
     256,   136,   259,   124,   256,    -1,   235,   136,   239,   124,
      -1,   235,   136,   259,   124,    -1,   256,   136,   239,   124,
      -1,   256,   136,   259,   124,    -1,   235,   136,   240,   124,
     256,    -1,   235,   136,   260,   124,   256,    -1,   256,   136,
     240,   124,   256,    -1,   256,   136,   260,   124,   256,    -1,
     235,   136,   240,   124,    -1,   235,   136,   260,   124,    -1,
     256,   136,   240,   124,    -1,   256,   136,   260,   124,    -1,
     235,   136,   239,   124,   214,    -1,   235,   136,   259,   124,
     214,    -1,   256,   136,   239,   124,   214,    -1,   256,   136,
     259,   124,   214,    -1,   235,   136,   240,   124,   214,    -1,
     235,   136,   260,   124,   214,    -1,   256,   136,   240,   124,
     214,    -1,   256,   136,   260,   124,   214,    -1,   235,   136,
     124,    -1,   256,   136,   124,    -1,   235,   136,    -1,   256,
     136,    -1,   257,    -1,   221,   238,   258,    -1,   244,   238,
     258,    -1,   221,   238,   214,    -1,   244,   238,   214,    -1,
     258,    -1,   237,     1,    -1,   239,   120,   258,    -1,   259,
     120,   258,    -1,   239,   239,    -1,   259,   239,    -1,   239,
     259,    -1,   214,    -1,   213,     1,    -1,   239,   120,   214,
      -1,   259,   120,   214,    -1,   236,    -1,   257,    -1,    29,
      -1,    30,    -1,    31,    -1,    32,    -1,    33,    -1,    29,
      -1,    30,    -1,    31,    -1,    32,    -1,    33,    -1,   209,
      -1,   209,   119,   261,    -1,   209,   119,   262,    -1,   265,
      -1,   266,   120,   265,    -1,   266,   120,    -1,    50,    -1,
     267,   209,    -1,   267,   142,    -1,   270,   121,    -1,   267,
     209,   122,   121,    -1,   267,   142,   122,   121,    -1,   267,
     122,   266,    -1,   267,   122,     1,    -1,   267,   209,   122,
     266,    -1,   267,   209,   122,   266,     1,    -1,   267,   209,
     122,     1,    -1,   267,   209,   122,   266,   118,   191,    -1,
     267,   209,   122,   266,   118,   192,    -1,   267,   142,   122,
     266,    -1,   267,   142,   122,   266,     1,    -1,   267,   142,
     122,     1,    -1,   267,   142,   122,   266,   118,   191,    -1,
     267,   142,   122,   266,   118,   192,    -1,   267,   209,    -1,
     267,   142,    -1,   273,   121,    -1,   271,   124,   299,   122,
     121,    -1,   271,   122,   121,    -1,   271,   124,   299,   122,
     266,    -1,   271,   124,   299,   122,   266,     1,    -1,   271,
     124,   299,   122,     1,    -1,   271,   124,   299,   122,   266,
     118,   191,    -1,   271,   124,   299,   122,   266,   118,   192,
      -1,   271,   124,   299,   122,   266,     1,   118,   191,    -1,
     271,   124,   299,   122,   266,     1,   118,   192,    -1,   271,
     124,   299,   122,     1,   118,   191,    -1,   271,   124,   299,
     122,     1,   118,   192,    -1,   267,   122,   266,    -1,   267,
     122,     1,    -1,   271,   122,   266,    -1,   271,   122,   266,
       1,    -1,   271,   122,     1,    -1,   271,   122,   266,   118,
     191,    -1,   271,   122,   266,   118,   192,    -1,   272,    -1,
     289,    -1,   273,    -1,   290,    -1,    75,    -1,   315,    -1,
      44,    -1,    45,    -1,   276,    -1,   277,    -1,   278,   277,
      -1,    46,    -1,    34,    -1,    35,    -1,    36,    -1,    37,
      -1,    38,    -1,    47,    -1,    39,    -1,    42,    -1,    43,
      -1,    40,    -1,    41,    -1,    85,    -1,   286,    -1,   268,
      -1,   139,    -1,    87,   115,   237,   116,    -1,   100,   115,
     139,   116,    -1,   100,   115,   209,   116,    -1,    66,    -1,
      82,    -1,    83,    -1,    46,    -1,    34,    -1,    35,    -1,
      36,    -1,    37,    -1,    38,    -1,    47,    -1,    39,    -1,
      42,    -1,    43,    -1,    40,    -1,    41,    -1,    85,    -1,
     286,    -1,   268,    -1,   142,    -1,    87,   115,   237,   116,
      -1,   100,   115,   139,   116,    -1,   100,   115,   209,   116,
      -1,    66,    -1,   332,    -1,   332,   320,    -1,   124,   261,
      -1,   332,   124,   261,    -1,   332,   124,   261,   124,   261,
      -1,   124,   262,    -1,   332,   124,   262,    -1,   332,   124,
     261,   124,   262,    -1,   332,   124,   262,   124,   262,    -1,
     332,   124,   262,   124,   261,    -1,   281,    -1,   282,   120,
     281,    -1,   291,   209,    -1,   291,   140,    -1,   291,   315,
     209,    -1,   291,   315,   140,    -1,   285,   121,    -1,   283,
     122,   121,    -1,   291,   122,   121,    -1,   291,   315,   122,
     121,    -1,   283,   122,   191,    -1,   283,   122,   192,    -1,
     283,   122,     1,    -1,   291,   122,   191,    -1,   291,   122,
     192,    -1,   291,   122,     1,    -1,   291,   315,   122,   191,
      -1,   291,   315,   122,   192,    -1,   291,   315,   122,     1,
      -1,   283,    -1,   283,    -1,   283,   113,   201,   114,    -1,
     287,   124,   299,    -1,   290,   121,    -1,   288,   122,   121,
      -1,   287,   122,   121,    -1,   291,   122,   121,    -1,   288,
     122,   191,    -1,   288,   122,   192,    -1,   288,   122,     1,
      -1,   287,   122,   191,    -1,   287,   122,   192,    -1,   287,
     122,     1,    -1,   291,   122,   191,    -1,   291,   122,   192,
      -1,   291,   122,     1,    -1,    48,    -1,    49,    -1,   277,
      -1,   292,   277,    -1,   279,    -1,   292,   279,    -1,   269,
      -1,   292,   269,    -1,   284,    -1,   292,   284,    -1,   277,
      -1,   293,   277,    -1,   279,    -1,   293,   279,    -1,   138,
      -1,   293,   138,    -1,   269,    -1,   293,   269,    -1,   284,
      -1,   293,   284,    -1,   263,    -1,   294,   263,    -1,   277,
      -1,   294,   277,    -1,   280,    -1,   294,   280,    -1,   269,
      -1,   294,   269,    -1,   284,    -1,   294,   284,    -1,   263,
      -1,   295,   263,    -1,   277,    -1,   295,   277,    -1,   279,
      -1,   295,   279,    -1,   138,    -1,   295,   138,    -1,   284,
      -1,   295,   284,    -1,   269,    -1,   295,   269,    -1,   264,
      -1,   296,   264,    -1,   277,    -1,   296,   277,    -1,   279,
      -1,   296,   279,    -1,   138,    -1,   296,   138,    -1,   274,
      -1,   296,   274,    -1,   275,    -1,   296,   275,    -1,    81,
      -1,    80,    -1,   263,    -1,   298,   263,    -1,   277,    -1,
     298,   277,    -1,   280,    -1,   298,   280,    -1,   209,    -1,
     298,   209,    -1,   209,   113,   203,   114,    -1,   298,   209,
     113,   203,   114,    -1,   298,    -1,   291,    -1,   263,    -1,
     300,   263,    -1,   277,    -1,   300,   277,    -1,   280,    -1,
     300,   280,    -1,   209,    -1,   300,   209,    -1,   209,   113,
     203,   114,    -1,   300,   209,   113,   203,   114,    -1,   263,
      -1,   301,   263,    -1,   277,    -1,   301,   277,    -1,   280,
      -1,   301,   280,    -1,   284,    -1,   301,   284,    -1,   269,
      -1,   301,   269,    -1,   209,    -1,   301,   209,    -1,   209,
     113,   203,   114,    -1,   301,   209,   113,   203,   114,    -1,
     263,    -1,   302,   263,    -1,   277,    -1,   302,   277,    -1,
     280,    -1,   302,   280,    -1,   284,    -1,   302,   284,    -1,
     269,    -1,   302,   269,    -1,   209,    -1,   302,   209,    -1,
     209,   113,   203,   114,    -1,   302,   209,   113,   203,   114,
      -1,   304,   120,     1,    -1,   303,   120,     1,    -1,   209,
      -1,   304,   120,   209,    -1,   303,   120,   209,    -1,   346,
     120,   209,    -1,   347,   120,   209,    -1,   306,    -1,   140,
      -1,    37,    -1,   140,   126,   261,   127,    -1,   140,   126,
     262,   127,    -1,   140,   126,   139,   127,    -1,   140,   126,
     127,    -1,   305,   126,   261,   127,    -1,   305,   126,   262,
     127,    -1,   305,   126,   139,   127,    -1,   305,   126,   127,
      -1,   209,    -1,   115,   326,   116,    -1,   115,   315,   326,
     116,    -1,   115,   327,   116,    -1,   115,   315,   327,   116,
      -1,   306,   126,   261,   127,    -1,   306,   126,   262,   127,
      -1,   306,   126,   139,   127,    -1,   306,   126,   127,    -1,
     306,   115,    -1,   307,   348,   116,    -1,   307,   349,   116,
      -1,   307,   304,   116,    -1,   307,   303,   116,    -1,   307,
     116,    -1,   307,   303,    -1,   307,     1,    -1,   307,   346,
     115,    -1,   307,   295,   209,   115,    -1,   308,    -1,   306,
      -1,   305,   115,    -1,   311,   348,   116,    -1,   311,   349,
     116,    -1,   311,   304,   116,    -1,   311,   303,   116,    -1,
     311,   116,    -1,   311,   303,    -1,   311,     1,    -1,   311,
     346,   115,    -1,   311,   295,   209,   115,    -1,   312,    -1,
     305,    -1,    74,    -1,   320,    -1,    86,   115,   381,   116,
      -1,    79,    -1,   110,    -1,   111,    -1,     3,    -1,    28,
      -1,    75,    -1,    74,    -1,    44,    -1,   317,    -1,   317,
     115,   239,   116,    -1,   318,    -1,   319,   318,    -1,   319,
     120,   318,    -1,   316,   115,   115,   319,   116,   116,    -1,
     316,   115,   115,   116,   116,    -1,   115,   324,   116,    -1,
     115,   315,   324,   116,    -1,   126,   127,    -1,   126,   261,
     127,    -1,   126,   262,   127,    -1,   126,   139,   127,    -1,
     321,   126,   127,    -1,   321,   126,   261,   127,    -1,   321,
     126,   139,   127,    -1,   321,   126,   262,   127,    -1,   115,
     116,    -1,   115,   348,   116,    -1,   115,   349,   116,    -1,
     321,   115,   116,    -1,   321,   115,   348,   116,    -1,   321,
     115,   349,   116,    -1,   115,   325,   116,    -1,   115,   315,
     325,   116,    -1,   115,   116,    -1,   115,   348,   116,    -1,
     115,   349,   116,    -1,   322,   115,   116,    -1,   322,   115,
     348,   116,    -1,   322,   115,   349,   116,    -1,   112,    -1,
     112,   278,    -1,   112,   323,    -1,   112,   278,   323,    -1,
     323,    -1,   321,    -1,   323,   321,    -1,   315,   323,    -1,
     315,   323,   321,    -1,   323,    -1,   322,    -1,   323,   322,
      -1,   315,   323,    -1,   315,   323,   322,    -1,   310,    -1,
     323,   310,    -1,   315,   323,   310,    -1,   326,   315,    -1,
     332,   315,    -1,   314,    -1,   323,   314,    -1,   315,   323,
     314,    -1,   327,   315,    -1,   308,    -1,   323,   308,    -1,
     315,   323,   308,    -1,   323,   315,   308,    -1,   309,    -1,
     323,   309,    -1,   315,   323,   309,    -1,   323,   315,   309,
      -1,   312,    -1,   323,   312,    -1,   315,   323,   312,    -1,
     323,   315,   312,    -1,   313,    -1,   323,   313,    -1,   315,
     323,   313,    -1,   323,   315,   313,    -1,   305,    -1,   323,
     305,    -1,   315,   323,   305,    -1,   323,   315,   305,    -1,
     237,    -1,   122,   337,   121,    -1,   122,   337,   120,   121,
      -1,   258,    -1,   122,   337,   121,     1,    -1,   122,   337,
      -1,   122,   337,   120,   121,     1,    -1,   122,   337,   120,
      -1,   236,    -1,   213,    -1,   257,    -1,   214,    -1,   333,
      -1,   334,    -1,   337,   120,   333,    -1,   337,   120,   334,
      -1,   337,   333,    -1,   337,   334,    -1,   326,    -1,   327,
      -1,   326,   119,   333,    -1,   326,     1,    -1,   326,   119,
     334,    -1,   338,    -1,   340,   120,   338,    -1,    37,   120,
     338,    -1,    38,   120,   338,    -1,   140,   120,   338,    -1,
     341,   120,   338,    -1,   339,    -1,   338,     1,    -1,   340,
     120,   339,    -1,   341,   120,   339,    -1,   292,    -1,   292,
     324,    -1,   293,    -1,   293,   324,    -1,   295,   327,    -1,
     295,   324,    -1,   295,   128,    -1,   295,   128,   327,    -1,
     295,    -1,    65,    -1,   295,   327,     1,    -1,   295,   324,
       1,    -1,   344,    -1,   346,   120,   344,    -1,   346,     1,
     120,   344,    -1,   347,   120,   344,    -1,   347,     1,   120,
     344,    -1,     1,   120,   344,    -1,   304,   120,   344,    -1,
     304,     1,   120,   344,    -1,   303,   120,   344,    -1,   303,
       1,   120,   344,    -1,   345,    -1,   346,   120,   345,    -1,
     347,   120,   345,    -1,   347,     1,   120,   345,    -1,     1,
     120,   345,    -1,   304,   120,   345,    -1,   303,   120,   345,
      -1,   303,     1,   120,   345,    -1,   346,    -1,   346,   120,
      51,    -1,   347,   120,    51,    -1,   304,   120,    51,    -1,
     303,   120,    51,    -1,     1,   120,    51,    -1,   347,    -1,
     346,   120,     1,    -1,   347,     1,    -1,   355,    -1,   320,
      -1,   370,    -1,   118,    -1,   124,    -1,   239,   118,    -1,
     373,    -1,   375,    -1,   377,    -1,   354,    -1,   188,   118,
      -1,   187,   118,    -1,   186,   118,    -1,   356,    -1,   376,
      -1,   371,    -1,   374,    -1,   378,    -1,   377,     1,    -1,
     259,    -1,   381,    -1,   381,   115,   237,   116,    -1,   352,
      -1,   353,   120,   352,    -1,    -1,    86,   277,   115,   381,
     116,   118,    -1,    86,   277,   115,   381,   124,   353,   116,
     118,    -1,    86,   277,   115,   381,   124,   353,   124,   353,
     116,   118,    -1,    86,   277,   115,   381,   124,   353,   124,
     353,   124,   353,   116,   118,    -1,    86,   277,   115,   381,
       3,   353,   116,   118,    -1,    86,   277,   115,   381,     3,
     353,   124,   353,   116,   118,    -1,    86,   277,   115,   381,
     124,   353,     3,   353,   116,   118,    -1,    86,   115,   381,
     116,   118,    -1,    86,   115,   381,   124,   353,   116,   118,
      -1,    86,   115,   381,   124,   353,   124,   353,   116,   118,
      -1,    86,   115,   381,   124,   353,   124,   353,   124,   353,
     116,   118,    -1,    86,   115,   381,     3,   353,   116,   118,
      -1,    86,   115,   381,     3,   353,   124,   353,   116,   118,
      -1,    86,   115,   381,   124,   353,     3,   353,   116,   118,
      -1,   209,   124,   350,    -1,    52,   261,   124,   350,    -1,
      52,   262,   124,   350,    -1,    52,   124,   350,    -1,    53,
     124,   350,    -1,   209,   124,   351,    -1,    52,   261,   124,
     351,    -1,    52,   262,   124,   351,    -1,    52,   124,   351,
      -1,    52,   124,    -1,    53,   124,   351,    -1,    53,   124,
      -1,    80,    -1,    81,    -1,    53,    -1,    80,    -1,    81,
      -1,   294,   118,    -1,   294,   340,   118,    -1,   163,   118,
      -1,   362,   118,    -1,   296,   118,    -1,   296,   340,   118,
      -1,   297,   340,   118,    -1,   167,   118,    -1,    77,   209,
     119,   236,   118,    -1,    31,    77,   209,   119,   236,   118,
      -1,   296,     1,    -1,   294,     1,    -1,   362,     1,    -1,
     164,     1,    -1,   163,     1,    -1,   294,   341,    -1,   359,
      -1,   363,   359,    -1,   364,   359,    -1,   363,     1,   118,
      -1,   362,    -1,   363,   362,    -1,   350,    -1,   365,   350,
      -1,   366,   350,    -1,   351,    -1,   365,   351,    -1,   366,
     351,    -1,   365,   359,    -1,   366,   359,    -1,   365,   362,
      -1,   366,   362,    -1,   365,    -1,   363,    -1,   363,   365,
      -1,   364,   365,    -1,   366,    -1,   364,    -1,   363,   366,
      -1,   364,   366,    -1,   122,    -1,   371,   121,    -1,   369,
     368,    -1,   369,    -1,   369,   367,    -1,   118,    -1,   239,
     118,    -1,   259,   118,    -1,    54,   115,   239,   116,   350,
      -1,    54,   115,   259,   116,   350,    -1,    54,   115,   239,
     116,   350,    64,   350,    -1,    54,   115,   259,   116,   350,
      64,   350,    -1,    55,   115,   239,   116,   350,    -1,    55,
     115,   259,   116,   350,    -1,    54,   115,   259,    -1,   373,
       1,    -1,    56,   115,   239,   116,   350,    -1,    56,   115,
     259,   350,    -1,    56,   115,   116,   350,    -1,    57,   350,
      56,   115,   239,   116,   118,    -1,    57,   350,    56,   115,
     259,   118,    -1,    58,   115,   372,   372,   116,   350,    -1,
      58,   115,   372,   116,   350,    -1,    58,   115,   372,   372,
     239,   116,   350,    -1,    58,   115,   372,   372,   259,   350,
      -1,    58,   115,   116,   350,    -1,    58,   115,   209,   124,
     239,   116,   350,    -1,    58,   115,   209,   124,   239,   118,
     239,   116,   350,    -1,    58,   115,     1,    -1,    58,   115,
     259,     1,    -1,    58,   115,   372,     1,    -1,    58,   115,
     372,   259,     1,    -1,    58,   115,   372,   372,   259,    -1,
      58,   115,   372,   372,   116,   351,    -1,    58,   115,   372,
     372,   239,   116,   351,    -1,    58,   115,   372,   372,   259,
     351,    -1,    57,   350,    56,   115,   239,   116,    -1,    57,
     350,    56,   115,   239,    -1,    57,   350,    56,   115,   259,
      -1,    57,   350,    56,   115,    -1,    57,   350,    56,    -1,
      57,   350,    -1,    57,    -1,    56,     1,    -1,    56,   115,
     116,     1,    -1,    56,   115,   259,    -1,    56,   115,   239,
     116,   351,    -1,    56,   115,   259,   351,    -1,    59,   209,
     118,    -1,    60,   118,    -1,    61,   118,    -1,    62,   118,
      -1,    62,   239,   118,    -1,    62,   259,   118,    -1,    62,
     213,   118,    -1,    62,   214,   118,    -1,    62,   259,    -1,
      62,   214,    -1,    62,    -1,    59,    -1,   296,   328,   363,
     370,    -1,   296,   328,   370,    -1,   296,   330,   363,   370,
      -1,   296,   330,   370,    -1,   328,   363,   370,    -1,   328,
     370,    -1,   296,   328,   363,   371,    -1,   296,   328,   371,
      -1,   296,   330,   363,   371,    -1,   296,   330,   371,    -1,
     328,   363,   371,    -1,   328,   371,    -1,     5,    -1,   381,
       5,    -1,   379,    -1,   206,    -1,   296,   206,    -1,   360,
      -1,    76,   381,    -1,    76,    31,   381,    -1,    76,   209,
     381,    -1,   118,    -1,   357,   379,    -1,   357,   206,    -1,
     357,   360,    -1,   357,    76,   381,    -1,   357,    76,    31,
     381,    -1,   357,    76,   209,   381,    -1,   357,   124,    -1,
      31,   124,    -1,   101,   209,    -1,   101,   142,    -1,   387,
      -1,   357,   387,    -1,   208,    -1,   296,   208,    -1,   380,
      -1,   357,   208,    -1,   357,   380,    -1,   361,    -1,   357,
     361,    -1,   383,    -1,   385,   383,    -1,   384,   383,    -1,
     385,     1,    -1,   384,     1,    -1,   382,    -1,   385,   382,
      -1,   384,   206,    -1,   384,   357,   206,    -1,   385,    -1,
     384,    -1,    -1,   105,   381,   209,   122,   392,   121,    -1,
     105,   381,   142,   122,   392,   121,    -1,   105,   381,   122,
     392,   121,    -1,   295,   209,   381,   118,    -1,   209,    -1,
     114,   209,    -1,   113,   209,    -1,   389,    -1,   390,   120,
     389,    -1,   107,   390,   118,    -1,   107,   390,   209,   118,
      -1,   388,    -1,   391,    -1,   392,   388,    -1,   392,   391,
      -1,   108,   115,   237,   120,   237,   116,    -1,   106,   115,
     381,   120,   209,   116,    -1,   107,   115,   381,   120,   209,
     116,    -1,   105,   115,   381,   116,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   276,   276,   305,   364,   365,   465,   469,   472,   473,
     474,   523,   525,   530,   535,   540,   542,   547,   549,   554,
     556,   561,   563,   565,   567,   569,   573,   578,   580,   582,
     584,   586,   592,   594,   599,   604,   609,   611,   613,   618,
     619,   623,   624,   635,   639,   640,   642,   647,   648,   650,
     653,   665,   676,   695,   697,   702,   703,   704,   705,   706,
     707,   708,   709,   710,   714,   715,   716,   717,   721,   722,
     723,   724,   725,   726,   727,   731,   733,   738,   740,   742,
     744,   746,   776,   778,   783,   785,   787,   789,   791,   820,
     822,   824,   829,   831,   836,   838,   842,   844,   846,   848,
     853,   856,   859,   862,   927,   929,   934,   936,   938,   940,
     942,   973,   977,   978,   979,   983,   984,   985,   989,   990,
     991,   992,   996,   999,  1002,  1005,  1008,  1013,  1014,  1016,
    1018,  1020,  1022,  1027,  1031,  1034,  1037,  1040,  1043,  1048,
    1049,  1051,  1056,  1060,  1062,  1067,  1069,  1074,  1076,  1081,
    1086,  1088,  1093,  1095,  1097,  1099,  1104,  1106,  1108,  1110,
    1115,  1116,  1117,  1118,  1119,  1120,  1122,  1123,  1124,  1125,
    1126,  1127,  1129,  1130,  1131,  1132,  1133,  1134,  1135,  1136,
    1137,  1138,  1139,  1141,  1142,  1144,  1148,  1149,  1150,  1151,
    1152,  1154,  1155,  1156,  1157,  1158,  1160,  1164,  1165,  1166,
    1170,  1171,  1172,  1173,  1174,  1178,  1179,  1180,  1184,  1188,
    1189,  1190,  1191,  1192,  1193,  1194,  1195,  1199,  1203,  1204,
    1208,  1212,  1213,  1217,  1218,  1219,  1223,  1224,  1228,  1229,
    1230,  1231,  1232,  1233,  1234,  1246,  1258,  1273,  1274,  1278,
    1286,  1287,  1295,  1296,  1298,  1299,  1308,  1309,  1313,  1320,
    1327,  1333,  1340,  1346,  1355,  1362,  1368,  1374,  1380,  1386,
    1392,  1403,  1408,  1409,  1414,  1415,  1416,  1420,  1421,  1422,
    1423,  1424,  1425,  1426,  1427,  1428,  1429,  1430,  1431,  1432,
    1433,  1434,  1435,  1436,  1437,  1438,  1439,  1440,  1441,  1442,
    1443,  1444,  1445,  1446,  1447,  1448,  1450,  1451,  1452,  1453,
    1454,  1456,  1460,  1464,  1468,  1469,  1473,  1475,  1476,  1477,
    1478,  1479,  1480,  1481,  1482,  1483,  1485,  1486,  1487,  1488,
    1489,  1490,  1491,  1492,  1496,  1498,  1499,  1500,  1501,  1502,
    1503,  1504,  1505,  1506,  1508,  1509,  1510,  1511,  1512,  1513,
    1514,  1515,  1519,  1520,  1521,  1522,  1526,  1527,  1528,  1529,
    1530,  1534,  1535,  1536,  1537,  1538,  1539,  1540,  1541,  1542,
    1544,  1545,  1546,  1550,  1551,  1555,  1556,  1560,  1561,  1562,
    1563,  1564,  1565,  1566,  1567,  1571,  1572,  1576,  1577,  1578,
    1579,  1580,  1581,  1582,  1586,  1587,  1588,  1589,  1590,  1594,
    1595,  1596,  1597,  1598,  1602,  1610,  1611,  1612,  1613,  1614,
    1615,  1616,  1617,  1618,  1622,  1623,  1624,  1625,  1626,  1628,
    1629,  1630,  1631,  1635,  1636,  1637,  1639,  1640,  1644,  1645,
    1646,  1648,  1649,  1653,  1654,  1655,  1657,  1658,  1662,  1663,
    1664,  1668,  1669,  1670,  1674,  1675,  1676,  1677,  1678,  1680,
    1681,  1682,  1683,  1685,  1686,  1687,  1688,  1690,  1691,  1692,
    1693,  1697,  1698,  1699,  1700,  1701,  1703,  1704,  1705,  1706,
    1710,  1711,  1712,  1713,  1714,  1715,  1716,  1717,  1718,  1719,
    1720,  1724,  1725,  1726,  1727,  1731,  1732,  1733,  1737,  1738,
    1739,  1740,  1742,  1743,  1745,  1746,  1751,  1753,  1758,  1762,
    1763,  1764,  1766,  1767,  1769,  1770,  1775,  1777,  1782,  1786,
    1787,  1788,  1789,  1790,  1791,  1792,  1793,  1794,  1795,  1796,
    1797,  1801,  1802,  1806,  1807,  1812,  1813,  1817,  1818,  1819,
    1820,  1821,  1822,  1823,  1827,  1828,  1832,  1836,  1840,  1847,
    1848,  1849,  1850,  1851,  1855,  1856,  1907,  1908,  1909,  1910,
    1911,  1912,  1913,  1917,  1918,  1919,  1920,  1921,  1928,  1929,
    1930,  1931,  1935,  1936,  1937,  1939,  1940,  1944,  1945,  1946,
    1948,  1949,  1953,  1954,  1955,  1957,  1958,  1962,  1963,  1964,
    1968,  1969,  1970,  1974,  1975,  1976,  1977,  1978,  1979,  1980,
    1981,  1982,  1984,  1985,  1986,  1987,  1988,  1989,  1990,  1991,
    1993,  1994,  1995,  1996,  1998,  1999,  2000,  2001,  2003,  2010,
    2014,  2018,  2025,  2026,  2030,  2035,  2036,  2040,  2041,  2042,
    2043,  2049,  2050,  2051,  2055,  2056,  2057,  2058,  2062,  2064,
    2068,  2069,  2070,  2071,  2072,  2076,  2077,  2078,  2079,  2080,
    2084,  2085,  2086,  2090,  2091,  2092,  2096,  2100,  2101,  2105,
    2106,  2107,  2111,  2112,  2114,  2115,  2116,  2117,  2118,  2120,
    2121,  2122,  2123,  2124,  2128,  2129,  2133,  2134,  2135,  2139,
    2140,  2141,  2142,  2143,  2144,  2145,  2146,  2147,  2149,  2150,
    2152,  2153,  2154,  2155,  2156,  2160,  2161,  2165,  2166,  2170,
    2171,  2175,  2176,  2177,  2182,  2183,  2187,  2188,  2189,  2190,
    2191,  2192,  2193,  2194,  2195,  2196,  2197,  2198,  2199,  2200,
    2201,  2202,  2203,  2204,  2205,  2206,  2207,  2208,  2212,  2213,
    2214,  2215,  2216,  2217,  2218,  2219,  2220,  2221,  2222,  2223,
    2224,  2225,  2226,  2227,  2228,  2229,  2230,  2231,  2237,  2239,
    2241,  2243,  2245,  2247,  2249,  2251,  2253,  2255,  2260,  2261,
    2265,  2271,  2277,  2284,  2294,  2295,  2296,  2297,  2301,  2302,
    2303,  2305,  2306,  2307,  2309,  2310,  2311,  2315,  2319,  2327,
    2336,  2345,  2346,  2348,  2349,  2353,  2360,  2367,  2370,  2383,
    2397,  2400,  2402,  2404,  2409,  2410,  2414,  2415,  2416,  2417,
    2418,  2419,  2420,  2421,  2425,  2426,  2427,  2428,  2429,  2430,
    2431,  2432,  2433,  2434,  2438,  2439,  2440,  2441,  2442,  2443,
    2444,  2445,  2446,  2447,  2451,  2452,  2453,  2454,  2455,  2456,
    2457,  2458,  2459,  2460,  2461,  2462,  2466,  2467,  2468,  2469,
    2470,  2471,  2472,  2473,  2474,  2475,  2479,  2480,  2484,  2485,
    2486,  2487,  2488,  2489,  2490,  2491,  2492,  2494,  2496,  2514,
    2532,  2533,  2537,  2538,  2539,  2540,  2541,  2542,  2543,  2544,
    2545,  2563,  2580,  2581,  2582,  2583,  2584,  2585,  2586,  2587,
    2588,  2589,  2590,  2591,  2592,  2610,  2627,  2628,  2629,  2630,
    2631,  2632,  2633,  2634,  2635,  2636,  2637,  2638,  2639,  2657,
    2674,  2675,  2679,  2680,  2681,  2682,  2683,  2696,  2697,  2704,
    2705,  2714,  2715,  2716,  2718,  2719,  2720,  2721,  2725,  2726,
    2727,  2728,  2729,  2730,  2731,  2732,  2733,  2737,  2741,  2742,
    2743,  2744,  2745,  2750,  2759,  2768,  2777,  2791,  2792,  2803,
    2807,  2808,  2809,  2810,  2811,  2816,  2825,  2834,  2843,  2857,
    2858,  2907,  2908,  2909,  2921,  2922,  2923,  2928,  2929,  2930,
    2931,  2932,  2936,  2937,  2941,  2942,  2943,  2947,  2948,  2952,
    2953,  2954,  2955,  2956,  2957,  2958,  2959,  2960,  2961,  2962,
    2963,  2964,  2965,  2966,  2967,  2971,  2972,  2973,  2974,  2975,
    2976,  2977,  2978,  2982,  2983,  2984,  2985,  2989,  2990,  2991,
    2992,  2994,  2998,  2999,  3000,  3001,  3003,  3007,  3008,  3010,
    3012,  3014,  3019,  3020,  3022,  3024,  3029,  3030,  3032,  3033,
    3037,  3038,  3040,  3041,  3055,  3056,  3058,  3059,  3063,  3064,
    3066,  3067,  3071,  3072,  3074,  3075,  3079,  3080,  3081,  3097,
    3098,  3099,  3100,  3113,  3129,  3130,  3135,  3136,  3140,  3141,
    3142,  3143,  3146,  3147,  3151,  3152,  3153,  3157,  3161,  3165,
    3166,  3167,  3168,  3169,  3178,  3187,  3188,  3189,  3190,  3194,
    3195,  3199,  3200,  3205,  3206,  3207,  3208,  3209,  3210,  3229,
    3230,  3234,  3235,  3236,  3237,  3238,  3239,  3241,  3242,  3243,
    3244,  3248,  3249,  3250,  3251,  3252,  3254,  3255,  3256,  3260,
    3261,  3262,  3263,  3264,  3265,  3269,  3270,  3271,  3276,  3277,
    3278,  3279,  3280,  3281,  3282,  3283,  3284,  3285,  3286,  3287,
    3288,  3292,  3293,  3294,  3295,  3296,  3297,  3298,  3302,  3303,
    3307,  3308,  3309,  3313,  3314,  3315,  3316,  3318,  3319,  3320,
    3322,  3323,  3324,  3325,  3327,  3328,  3329,  3333,  3334,  3335,
    3336,  3337,  3341,  3342,  3343,  3344,  3345,  3346,  3347,  3351,
    3352,  3353,  3357,  3358,  3362,  3363,  3364,  3365,  3369,  3370,
    3371,  3373,  3374,  3375,  3379,  3383,  3384,  3386,  3387,  3388,
    3392,  3393,  3394,  3395,  3399,  3400,  3404,  3405,  3406,  3410,
    3411,  3412,  3413,  3414,  3415,  3416,  3420,  3421,  3422,  3423,
    3427,  3428,  3429,  3430,  3434,  3438,  3442,  3444,  3447,  3453,
    3454,  3455,  3459,  3460,  3461,  3462,  3463,  3464,  3468,  3469,
    3473,  3474,  3475,  3477,  3478,  3480,  3481,  3482,  3483,  3484,
    3486,  3487,  3491,  3492,  3493,  3494,  3498,  3499,  3500,  3501,
    3503,  3504,  3505,  3506,  3507,  3508,  3509,  3512,  3516,  3517,
    3521,  3522,  3526,  3527,  3528,  3529,  3530,  3531,  3532,  3533,
    3537,  3538,  3539,  3540,  3546,  3547,  3549,  3550,  3553,  3554,
    3557,  3558,  3559,  3560,  3561,  3562,  3566,  3567,  3579,  3580,
    3583,  3586,  3588,  3589,  3590,  3600,  3602,  3603,  3605,  3606,
    3607,  3608,  3618,  3619,  3620,  3621,  3622,  3623,  3627,  3628,
    3636,  3638,  3639,  3641,  3643,  3647,  3648,  3649,  3650,  3651,
    3655,  3656,  3657,  3659,  3664,  3665,  3666,  3670,  3671,  3672,
    3676,  3680,  3681,  3682,  3686,  3687,  3691,  3692,  3696,  3697,
    3698,  3699,  3703,  3707,  3711,  3715
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENTIFIER", "CONSTANT",
  "STRING_LITERAL", "SIZEOF", "PTR_OP", "INC_OP", "DEC_OP", "LEFT_OP",
  "RIGHT_OP", "LE_OP", "GE_OP", "EQ_OP", "NE_OP", "AND_OP", "OR_OP",
  "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN",
  "LEFT_ASSIGN", "RIGHT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN",
  "TYPE_NAME", "TYPEDEF", "EXTERN", "STATIC", "AUTO", "REGISTER", "CHAR",
  "SHORT", "INT", "UINT", "INT64", "LONG", "SIGNED", "UNSIGNED", "FLOAT",
  "DOUBLE", "CONST", "VOLATILE", "VOID", "VALIST", "STRUCT", "UNION",
  "ENUM", "ELLIPSIS", "CASE", "DEFAULT", "IF", "SWITCH", "WHILE", "DO",
  "FOR", "GOTO", "CONTINUE", "BREAK", "RETURN", "IFX", "ELSE", "CLASS",
  "THISCLASS", "CLASS_NAME", "PROPERTY", "SETPROP", "GETPROP", "NEWOP",
  "RENEW", "DELETE", "EXT_DECL", "EXT_STORAGE", "IMPORT", "DEFINE",
  "VIRTUAL", "ATTRIB", "PUBLIC", "PRIVATE", "TYPED_OBJECT", "ANY_OBJECT",
  "_INCREF", "EXTENSION", "ASM", "TYPEOF", "WATCH", "STOPWATCHING",
  "FIREWATCHERS", "WATCHABLE", "CLASS_DESIGNER", "CLASS_NO_EXPANSION",
  "CLASS_FIXED", "ISPROPSET", "CLASS_DEFAULT_PROPERTY",
  "PROPERTY_CATEGORY", "CLASS_DATA", "CLASS_PROPERTY", "SUBCLASS",
  "NAMESPACE", "NEW0OP", "RENEW0", "VAARG", "DBTABLE", "DBFIELD",
  "DBINDEX", "DATABASE_OPEN", "ALIGNOF", "ATTRIB_DEP", "__ATTRIB", "'*'",
  "'<'", "'>'", "'('", "')'", "'~'", "';'", "'='", "','", "'}'", "'{'",
  "'.'", "':'", "'$'", "'['", "']'", "'&'", "'+'", "'-'", "'!'", "'/'",
  "'%'", "'^'", "'|'", "'?'", "$accept", "guess_type", "type",
  "base_strict_type", "base_strict_type_name", "strict_type",
  "class_function_definition_start",
  "constructor_function_definition_start",
  "destructor_function_definition_start",
  "virtual_class_function_definition_start",
  "class_function_definition_start_error",
  "virtual_class_function_definition_start_error",
  "class_function_definition", "class_function_definition_error",
  "instance_class_function_definition_start",
  "instance_class_function_definition_start_error",
  "instance_class_function_definition",
  "instance_class_function_definition_error", "data_member_initialization",
  "data_member_initialization_error", "data_member_initialization_list",
  "data_member_initialization_list_error",
  "data_member_initialization_list_coloned",
  "members_initialization_list_coloned", "members_initialization_list",
  "members_initialization_list_error", "instantiation_named",
  "instantiation_named_error", "guess_instantiation_named",
  "guess_instantiation_named_error", "external_guess_instantiation_named",
  "instantiation_unnamed", "instantiation_unnamed_error",
  "instantiation_anon", "instantiation_anon_error", "default_property",
  "default_property_error", "default_property_list",
  "default_property_list_error", "property_start", "property_body",
  "property", "class_property_start", "class_property_body",
  "class_property", "watch_property_list", "property_watch",
  "property_watch_list", "self_watch_definition", "watch_definition",
  "stopwatching", "firewatchers", "struct_declaration",
  "struct_declaration_error", "struct_declaration_list",
  "struct_declaration_list_error", "template_datatype",
  "template_type_argument", "template_type_parameter",
  "template_identifier_argument", "template_identifier_parameter",
  "template_expression_argument", "template_expression_parameter",
  "template_parameter", "template_parameters_list", "template_argument",
  "template_arguments_list", "class_entry", "class_decl", "class",
  "class_head", "class_error", "identifier", "primary_expression",
  "i18n_string", "simple_primary_expression",
  "anon_instantiation_expression", "anon_instantiation_expression_error",
  "primary_expression_error", "postfix_expression",
  "simple_postfix_expression", "argument_expression_list",
  "argument_expression_list_error", "common_unary_expression",
  "unary_expression", "simple_unary_expression", "unary_operator",
  "cast_expression", "multiplicative_expression", "additive_expression",
  "shift_expression", "relational_expression_smaller_than",
  "relational_expression", "equality_expression", "and_expression",
  "exclusive_or_expression", "inclusive_or_expression",
  "logical_and_expression", "logical_or_expression",
  "conditional_expression", "assignment_expression", "assignment_operator",
  "expression", "expression_anon_inst", "postfix_expression_error",
  "simple_postfix_expression_error", "common_unary_expression_error",
  "unary_expression_error", "simple_unary_expression_error",
  "cast_expression_error", "multiplicative_expression_error",
  "additive_expression_error", "shift_expression_error",
  "relational_expression_error", "equality_expression_error",
  "and_expression_error", "exclusive_or_expression_error",
  "inclusive_or_expression_error", "logical_and_expression_error",
  "logical_or_expression_error", "conditional_expression_error",
  "assignment_expression_error", "expression_error",
  "expression_anon_inst_error", "constant_expression",
  "constant_expression_error", "storage_class_specifier",
  "external_storage_class_specifier", "enumerator", "enumerator_list",
  "enum_specifier", "enum_specifier_nocompound", "enum_specifier_compound",
  "enum_specifier_compound_error", "enum_decl", "enum_class",
  "enum_class_error", "class_specifier", "class_specifier_error",
  "ext_storage", "type_qualifier", "type_qualifier_list", "type_specifier",
  "strict_type_specifier", "struct_declarator", "struct_declarator_list",
  "struct_entry", "struct_or_union_specifier_compound",
  "struct_or_union_specifier_compound_error",
  "struct_or_union_specifier_nocompound", "struct_decl", "struct_head",
  "struct_class", "struct_class_error", "struct_or_union",
  "specifier_qualifier_list", "guess_specifier_qualifier_list",
  "declaration_specifiers", "guess_declaration_specifiers",
  "external_guess_declaration_specifiers",
  "external_guess_declaration_specifiers_error", "_inheritance_specifiers",
  "inheritance_specifiers", "property_specifiers", "renew_specifiers",
  "new_specifiers", "identifier_list_error", "identifier_list",
  "direct_declarator_nofunction_type_ok", "direct_declarator_nofunction",
  "direct_declarator_function_start", "direct_declarator_function",
  "direct_declarator_function_error", "direct_declarator",
  "direct_declarator_function_start_type_ok",
  "direct_declarator_function_type_ok",
  "direct_declarator_function_error_type_ok", "direct_declarator_type_ok",
  "ext_decl", "_attrib", "attribute_word", "attribute", "attribs_list",
  "attrib", "direct_abstract_declarator",
  "direct_abstract_declarator_noarray", "pointer", "abstract_declarator",
  "abstract_declarator_noarray", "declarator", "declarator_type_ok",
  "declarator_function", "declarator_function_error",
  "declarator_function_type_ok", "declarator_function_error_type_ok",
  "declarator_nofunction_type_ok", "initializer", "initializer_error",
  "initializer_condition", "initializer_condition_error",
  "initializer_list", "init_declarator", "init_declarator_error",
  "init_declarator_list", "init_declarator_list_error", "type_name",
  "guess_type_name", "parameter_declaration",
  "parameter_declaration_error", "parameter_list", "parameter_list_error",
  "parameter_type_list", "parameter_type_list_error", "statement",
  "statement_error", "asm_field", "asm_field_list", "asm_statement",
  "labeled_statement", "labeled_statement_error", "declaration_mode",
  "member_access", "declaration", "external_guess_declaration",
  "external_guess_declaration_error", "declaration_error",
  "declaration_list", "declaration_list_error", "statement_list",
  "statement_list_error", "compound_inside", "compound_inside_error",
  "compound_start", "compound_statement", "compound_statement_error",
  "expression_statement", "selection_statement",
  "selection_statement_error", "iteration_statement",
  "iteration_statement_error", "jump_statement", "jump_statement_error",
  "function_definition", "function_definition_error", "string_literal",
  "external_declaration", "external_declaration_error",
  "translation_unit_error", "translation_unit", "thefile",
  "dbtable_definition", "dbfield_entry", "dbindex_item",
  "dbindex_item_list", "dbindex_entry", "dbfield_definition_list",
  "database_open", "dbfield", "dbindex", "dbtable", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    42,    60,    62,    40,    41,   126,    59,    61,
      44,   125,   123,    46,    58,    36,    91,    93,    38,    43,
      45,    33,    47,    37,    94,   124,    63
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   137,   138,   138,   139,   139,   140,   141,   142,   142,
     142,   143,   143,   144,   145,   146,   146,   147,   147,   148,
     148,   149,   149,   149,   149,   149,   149,   150,   150,   150,
     150,   150,   151,   151,   152,   153,   154,   154,   154,   155,
     155,   156,   156,   156,   157,   157,   157,   158,   158,   158,
     158,   158,   158,   159,   159,   160,   160,   160,   160,   160,
     160,   160,   160,   160,   161,   161,   161,   161,   162,   162,
     162,   162,   162,   162,   162,   163,   163,   164,   164,   164,
     164,   164,   165,   165,   166,   166,   166,   166,   166,   167,
     167,   167,   168,   168,   169,   169,   169,   169,   169,   169,
     169,   169,   169,   169,   170,   170,   171,   171,   171,   171,
     171,   172,   173,   173,   173,   174,   174,   174,   175,   175,
     175,   175,   176,   176,   176,   176,   176,   177,   177,   177,
     177,   177,   177,   178,   179,   179,   179,   179,   179,   180,
     180,   180,   181,   182,   182,   183,   183,   184,   184,   185,
     186,   186,   187,   187,   187,   187,   188,   188,   188,   188,
     189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
     189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
     189,   189,   189,   189,   189,   189,   190,   190,   190,   190,
     190,   190,   190,   190,   190,   190,   190,   191,   191,   191,
     192,   192,   192,   192,   192,   193,   193,   193,   194,   195,
     195,   195,   195,   195,   195,   195,   195,   196,   197,   197,
     198,   199,   199,   200,   200,   200,   201,   201,   202,   202,
     202,   202,   202,   202,   202,   202,   202,   203,   203,   204,
     205,   205,   205,   205,   205,   205,   205,   205,   206,   206,
     206,   206,   206,   206,   207,   208,   208,   208,   208,   208,
     208,   209,   210,   210,   211,   211,   211,   212,   212,   212,
     212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
     212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
     212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
     212,   212,   213,   214,   215,   215,   216,   216,   216,   216,
     216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
     216,   216,   216,   216,   217,   217,   217,   217,   217,   217,
     217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
     217,   217,   218,   218,   218,   218,   219,   219,   219,   219,
     219,   220,   220,   220,   220,   220,   220,   220,   220,   220,
     220,   220,   220,   221,   221,   222,   222,   223,   223,   223,
     223,   223,   223,   223,   223,   224,   224,   225,   225,   225,
     225,   225,   225,   225,   226,   226,   226,   226,   226,   227,
     227,   227,   227,   227,   228,   229,   229,   229,   229,   229,
     229,   229,   229,   229,   230,   230,   230,   230,   230,   230,
     230,   230,   230,   231,   231,   231,   231,   231,   232,   232,
     232,   232,   232,   233,   233,   233,   233,   233,   234,   234,
     234,   235,   235,   235,   236,   236,   236,   236,   236,   236,
     236,   236,   236,   236,   236,   236,   236,   236,   236,   236,
     236,   237,   237,   237,   237,   237,   237,   237,   237,   237,
     238,   238,   238,   238,   238,   238,   238,   238,   238,   238,
     238,   239,   239,   239,   239,   240,   240,   240,   241,   241,
     241,   241,   241,   241,   241,   241,   241,   241,   241,   242,
     242,   242,   242,   242,   242,   242,   242,   242,   242,   243,
     243,   243,   243,   243,   243,   243,   243,   243,   243,   243,
     243,   244,   244,   245,   245,   246,   246,   247,   247,   247,
     247,   247,   247,   247,   248,   248,   248,   248,   248,   249,
     249,   249,   249,   249,   250,   250,   250,   250,   250,   250,
     250,   250,   250,   251,   251,   251,   251,   251,   251,   251,
     251,   251,   252,   252,   252,   252,   252,   253,   253,   253,
     253,   253,   254,   254,   254,   254,   254,   255,   255,   255,
     256,   256,   256,   257,   257,   257,   257,   257,   257,   257,
     257,   257,   257,   257,   257,   257,   257,   257,   257,   257,
     257,   257,   257,   257,   257,   257,   257,   257,   257,   257,
     257,   257,   258,   258,   258,   258,   258,   259,   259,   259,
     259,   259,   259,   259,   260,   260,   260,   260,   261,   262,
     263,   263,   263,   263,   263,   264,   264,   264,   264,   264,
     265,   265,   265,   266,   266,   266,   267,   268,   268,   269,
     269,   269,   270,   270,   270,   270,   270,   270,   270,   270,
     270,   270,   270,   270,   271,   271,   272,   272,   272,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   274,   274,   275,   275,   276,
     276,   277,   277,   277,   278,   278,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   280,   280,
     280,   280,   280,   280,   280,   280,   280,   280,   281,   281,
     281,   281,   281,   281,   281,   281,   281,   281,   282,   282,
     283,   283,   283,   283,   284,   284,   284,   284,   285,   285,
     285,   285,   285,   285,   285,   285,   285,   286,   287,   287,
     288,   289,   289,   289,   289,   290,   290,   290,   290,   290,
     290,   290,   290,   290,   291,   291,   292,   292,   292,   292,
     292,   292,   292,   292,   293,   293,   293,   293,   293,   293,
     293,   293,   293,   293,   294,   294,   294,   294,   294,   294,
     294,   294,   294,   294,   295,   295,   295,   295,   295,   295,
     295,   295,   295,   295,   295,   295,   296,   296,   296,   296,
     296,   296,   296,   296,   296,   296,   297,   297,   298,   298,
     298,   298,   298,   298,   298,   298,   298,   298,   298,   298,
     299,   299,   300,   300,   300,   300,   300,   300,   300,   300,
     300,   300,   301,   301,   301,   301,   301,   301,   301,   301,
     301,   301,   301,   301,   301,   301,   302,   302,   302,   302,
     302,   302,   302,   302,   302,   302,   302,   302,   302,   302,
     303,   303,   304,   304,   304,   304,   304,   305,   305,   305,
     305,   305,   305,   305,   305,   305,   305,   305,   306,   306,
     306,   306,   306,   306,   306,   306,   306,   307,   308,   308,
     308,   308,   308,   309,   309,   309,   309,   310,   310,   311,
     312,   312,   312,   312,   312,   313,   313,   313,   313,   314,
     314,   315,   315,   315,   316,   316,   316,   317,   317,   317,
     317,   317,   318,   318,   319,   319,   319,   320,   320,   321,
     321,   321,   321,   321,   321,   321,   321,   321,   321,   321,
     321,   321,   321,   321,   321,   322,   322,   322,   322,   322,
     322,   322,   322,   323,   323,   323,   323,   324,   324,   324,
     324,   324,   325,   325,   325,   325,   325,   326,   326,   326,
     326,   326,   327,   327,   327,   327,   328,   328,   328,   328,
     329,   329,   329,   329,   330,   330,   330,   330,   331,   331,
     331,   331,   332,   332,   332,   332,   333,   333,   333,   334,
     334,   334,   334,   334,   335,   335,   336,   336,   337,   337,
     337,   337,   337,   337,   338,   338,   338,   339,   339,   340,
     340,   340,   340,   340,   340,   341,   341,   341,   341,   342,
     342,   343,   343,   344,   344,   344,   344,   344,   344,   345,
     345,   346,   346,   346,   346,   346,   346,   346,   346,   346,
     346,   347,   347,   347,   347,   347,   347,   347,   347,   348,
     348,   348,   348,   348,   348,   349,   349,   349,   350,   350,
     350,   350,   350,   350,   350,   350,   350,   350,   350,   350,
     350,   351,   351,   351,   351,   351,   351,   351,   352,   352,
     353,   353,   353,   354,   354,   354,   354,   354,   354,   354,
     354,   354,   354,   354,   354,   354,   354,   355,   355,   355,
     355,   355,   356,   356,   356,   356,   356,   356,   356,   357,
     357,   357,   358,   358,   359,   359,   359,   359,   360,   360,
     360,   360,   360,   360,   361,   362,   362,   362,   362,   362,
     363,   363,   363,   363,   364,   364,   365,   365,   365,   366,
     366,   366,   366,   366,   366,   366,   367,   367,   367,   367,
     368,   368,   368,   368,   369,   370,   371,   371,   371,   372,
     372,   372,   373,   373,   373,   373,   373,   373,   374,   374,
     375,   375,   375,   375,   375,   375,   375,   375,   375,   375,
     375,   375,   376,   376,   376,   376,   376,   376,   376,   376,
     376,   376,   376,   376,   376,   376,   376,   376,   376,   376,
     376,   376,   377,   377,   377,   377,   377,   377,   377,   377,
     378,   378,   378,   378,   379,   379,   379,   379,   379,   379,
     380,   380,   380,   380,   380,   380,   381,   381,   382,   382,
     382,   382,   382,   382,   382,   382,   382,   382,   382,   382,
     382,   382,   382,   382,   382,   382,   382,   382,   383,   383,
     383,   383,   383,   383,   383,   384,   384,   384,   384,   384,
     385,   385,   385,   385,   386,   386,   386,   387,   387,   387,
     388,   389,   389,   389,   390,   390,   391,   391,   392,   392,
     392,   392,   393,   394,   395,   396
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     1,     2,     1,     1,     1,     4,
       4,     2,     1,     3,     4,     3,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     2,     1,     2,
       1,     2,     2,     2,     2,     2,     2,     1,     1,     3,
       1,     3,     3,     1,     1,     3,     3,     1,     3,     3,
       3,     3,     1,     2,     2,     1,     1,     2,     2,     2,
       2,     1,     2,     2,     1,     1,     2,     2,     1,     2,
       2,     2,     2,     1,     2,     2,     3,     4,     5,     4,
       3,     4,     2,     3,     4,     5,     4,     3,     4,     5,
       5,     4,     2,     3,     3,     3,     3,     2,     4,     3,
       3,     2,     4,     3,     2,     3,     2,     3,     2,     1,
       2,     3,     3,     3,     2,     1,     3,     3,     1,     3,
       3,     2,     4,     5,     3,     4,     3,     1,     3,     3,
       3,     2,     3,     2,     4,     5,     3,     4,     3,     1,
       3,     3,     2,     1,     2,     2,     2,     1,     2,     5,
       7,     9,     6,     8,     4,     6,     1,     2,     3,     4,
       3,     2,     2,     2,     1,     1,     4,     3,     3,     3,
       2,     2,     2,     4,     1,     2,     1,     3,     3,     1,
       1,     3,     7,     1,     2,     4,     1,     2,     2,     1,
       1,     2,     3,     3,     2,     2,     1,     1,     2,     2,
       1,     2,     2,     2,     2,     1,     2,     1,     1,     2,
       4,     4,     6,     2,     4,     4,     6,     1,     1,     3,
       1,     2,     4,     1,     1,     1,     1,     3,     1,     1,
       1,     3,     3,     3,     3,     3,     3,     1,     3,     1,
       2,     2,     3,     3,     5,     5,     6,     6,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     1,     1,     3,     1,     2,     4,     1,     1,     4,
       4,     5,     8,     1,     1,     2,     6,     6,     5,     5,
       6,     6,     5,     5,     7,     7,     6,     6,     7,     7,
       6,     6,     4,     5,     4,     6,     4,     1,     1,     1,
       1,     3,     1,     2,     2,     2,     1,     4,     4,     3,
       4,     4,     3,     3,     2,     2,     4,     4,     3,     4,
       3,     3,     2,     2,     1,     4,     4,     3,     4,     4,
       3,     3,     2,     2,     4,     4,     3,     4,     3,     3,
       2,     2,     1,     1,     3,     3,     1,     1,     3,     3,
       2,     2,     2,     2,     2,     4,     2,     4,     5,     5,
       4,     2,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     1,     3,     3,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     2,     1,     2,     3,     3,     3,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     1,     3,
       3,     1,     3,     3,     1,     5,     5,     5,     5,     5,
       5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
       5,     1,     3,     3,     3,     3,     3,     3,     3,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     3,     2,     1,     3,     3,     1,     1,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     1,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     2,     2,     3,     2,     5,     6,     6,     3,     2,
       5,     1,     1,     1,     1,     1,     4,     1,     3,     3,
       3,     3,     3,     3,     1,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     1,     2,     3,     3,     3,     3,
       3,     3,     3,     1,     3,     3,     3,     3,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
       1,     3,     3,     1,     5,     5,     5,     5,     4,     4,
       4,     4,     5,     5,     5,     5,     4,     4,     4,     4,
       5,     5,     5,     5,     5,     5,     5,     5,     3,     3,
       2,     2,     1,     3,     3,     3,     3,     1,     2,     3,
       3,     2,     2,     2,     1,     2,     3,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     1,     3,     2,     1,     2,     2,     2,
       4,     4,     3,     3,     4,     5,     4,     6,     6,     4,
       5,     4,     6,     6,     2,     2,     2,     5,     3,     5,
       6,     5,     7,     7,     8,     8,     7,     7,     3,     3,
       3,     4,     3,     5,     5,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     4,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     4,     4,     1,     1,     2,
       2,     3,     5,     2,     3,     5,     5,     5,     1,     3,
       2,     2,     3,     3,     2,     3,     3,     4,     3,     3,
       3,     3,     3,     3,     4,     4,     4,     1,     1,     4,
       3,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     1,     1,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     1,     1,
       1,     2,     1,     2,     1,     2,     1,     2,     4,     5,
       1,     1,     1,     2,     1,     2,     1,     2,     1,     2,
       4,     5,     1,     2,     1,     2,     1,     2,     1,     2,
       1,     2,     1,     2,     4,     5,     1,     2,     1,     2,
       1,     2,     1,     2,     1,     2,     1,     2,     4,     5,
       3,     3,     1,     3,     3,     3,     3,     1,     1,     1,
       4,     4,     4,     3,     4,     4,     4,     3,     1,     3,
       4,     3,     4,     4,     4,     4,     3,     2,     3,     3,
       3,     3,     2,     2,     2,     3,     4,     1,     1,     2,
       3,     3,     3,     3,     2,     2,     2,     3,     4,     1,
       1,     1,     1,     4,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     4,     1,     2,     3,     6,     5,     3,
       4,     2,     3,     3,     3,     3,     4,     4,     4,     2,
       3,     3,     3,     4,     4,     3,     4,     2,     3,     3,
       3,     4,     4,     1,     2,     2,     3,     1,     1,     2,
       2,     3,     1,     1,     2,     2,     3,     1,     2,     3,
       2,     2,     1,     2,     3,     2,     1,     2,     3,     3,
       1,     2,     3,     3,     1,     2,     3,     3,     1,     2,
       3,     3,     1,     2,     3,     3,     1,     3,     4,     1,
       4,     2,     5,     3,     1,     1,     1,     1,     1,     1,
       3,     3,     2,     2,     1,     1,     3,     2,     3,     1,
       3,     3,     3,     3,     3,     1,     2,     3,     3,     1,
       2,     1,     2,     2,     2,     2,     3,     1,     1,     3,
       3,     1,     3,     4,     3,     4,     3,     3,     4,     3,
       4,     1,     3,     3,     4,     3,     3,     3,     4,     1,
       3,     3,     3,     3,     3,     1,     3,     2,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     1,     2,     2,
       2,     1,     1,     1,     1,     1,     2,     1,     1,     4,
       1,     3,     0,     6,     8,    10,    12,     8,    10,    10,
       5,     7,     9,    11,     7,     9,     9,     3,     4,     4,
       3,     3,     3,     4,     4,     3,     2,     3,     2,     1,
       1,     1,     1,     1,     2,     3,     2,     2,     2,     3,
       3,     2,     5,     6,     2,     2,     2,     2,     2,     2,
       1,     2,     2,     3,     1,     2,     1,     2,     2,     1,
       2,     2,     2,     2,     2,     2,     1,     1,     2,     2,
       1,     1,     2,     2,     1,     2,     2,     1,     2,     1,
       2,     2,     5,     5,     7,     7,     5,     5,     3,     2,
       5,     4,     4,     7,     6,     6,     5,     7,     6,     4,
       7,     9,     3,     4,     4,     5,     5,     6,     7,     6,
       6,     5,     5,     4,     3,     2,     1,     2,     4,     3,
       5,     4,     3,     2,     2,     2,     3,     3,     3,     3,
       2,     2,     1,     1,     4,     3,     4,     3,     3,     2,
       4,     3,     4,     3,     3,     2,     1,     2,     1,     1,
       2,     1,     2,     3,     3,     1,     2,     2,     2,     3,
       4,     4,     2,     2,     2,     2,     1,     2,     1,     2,
       1,     2,     2,     1,     2,     1,     2,     2,     2,     2,
       1,     2,     2,     3,     1,     1,     0,     6,     6,     5,
       4,     1,     2,     2,     1,     3,     3,     4,     1,     1,
       2,     2,     6,     6,     6,     4
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    1296,   261,     6,   625,   626,   627,   628,   629,   687,   688,
     689,   690,   691,   693,   696,   697,   694,   695,   681,   682,
     686,   692,   774,   775,   636,  1141,   239,   705,   931,   679,
       0,     0,   934,  1139,  1140,   706,   707,   698,     0,     0,
       0,     0,     0,   935,   936,   973,     0,  1265,   822,   701,
       8,     4,     0,     0,     0,  1259,     0,  1278,   898,   816,
       0,   700,     0,   675,   677,   824,   826,   683,   818,   820,
     757,   699,     0,     0,   676,   678,     0,     0,     0,     0,
       0,   996,   680,     0,   932,     0,     0,     0,  1261,  1283,
    1258,  1280,  1290,  1285,     0,     0,     0,  1276,     0,  1273,
    1256,     0,     0,  1262,     0,     0,     0,     0,  1275,  1274,
       0,   684,   974,   680,   975,   889,   888,   898,   930,   887,
     917,   987,     0,   929,   992,     0,     0,     0,     0,     0,
       0,  1151,     0,   241,   240,     0,     0,   249,     0,   248,
       2,     3,     0,     5,     0,   638,   637,     0,     0,   656,
       0,     0,     0,     0,   761,     0,   741,   740,     0,  1154,
     627,   690,   691,  1148,   823,     8,  1260,  1279,   898,   817,
     825,   827,   819,   821,   996,  1004,   680,     0,     0,  1035,
       0,     0,     0,  1045,     0,     0,   889,     0,   888,     0,
       0,   907,     0,     0,   620,   621,   622,   623,   624,  1058,
     912,   810,   882,   804,     0,   814,     0,   806,   808,   757,
     812,     0,     0,  1057,     0,     0,  1061,  1071,     0,     0,
       0,     0,     0,     0,   997,     0,   709,   710,   711,   712,
     713,   715,   718,   719,   716,   717,   708,   714,   727,   720,
       0,     0,  1184,   723,     0,     0,   794,   722,   800,   796,
     798,   802,   721,     0,  1160,     0,     0,     0,     0,  1249,
    1255,   627,     0,  1272,  1267,  1281,     0,  1268,  1284,  1266,
    1282,  1277,  1289,  1292,     0,     0,     0,     0,     0,  1287,
    1288,  1291,  1286,     1,     0,  1263,  1264,  1257,     0,     0,
     479,   273,     0,     0,     0,     0,     0,     0,   373,   374,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     368,     0,   371,     0,     0,   367,   369,   370,   372,     0,
     268,     0,   267,   306,   274,   262,   478,     0,   363,   375,
       0,   377,   384,   389,   395,     0,   404,   413,   418,   423,
     428,   431,   434,   451,     0,   512,   511,   515,   517,   524,
     529,   534,   543,   552,   557,   562,   567,   570,   573,     0,
     264,   297,   298,   299,   300,     0,     0,     0,     0,     0,
     685,   976,     0,   919,     0,   924,     0,     0,     0,     0,
       0,     0,     0,   930,   988,   993,     0,   899,   990,   901,
     995,   991,   720,   723,   208,   230,   229,   228,   237,     0,
     267,   375,   434,   618,   515,     0,   220,   205,   253,     0,
       0,   252,   259,     0,     0,  1142,  1143,   698,     0,   176,
       0,   179,   180,     0,     0,     0,     0,     0,   183,   250,
       4,     0,     0,     0,     0,    28,    30,   164,   186,   189,
       0,   190,     0,   115,   118,     0,   196,   127,     0,   165,
     139,     0,   174,     0,   197,   200,     0,     0,   267,     0,
       0,     0,     0,  1000,   680,     0,    12,    18,     0,   829,
     828,   836,   830,     0,   832,   834,   757,   841,   840,   254,
     260,   251,     0,     0,   243,   242,   669,   630,   633,   668,
     672,   658,     0,     0,     0,     0,   223,   224,   225,   226,
       0,   218,   770,   763,     0,     0,   760,   767,   762,     0,
       0,   773,   764,     0,     0,   743,   742,     0,     0,     0,
       0,     0,   997,  1005,     0,  1037,     0,     0,  1245,  1251,
       0,  1247,  1253,  1046,  1149,     0,     0,     0,  1150,   906,
       0,   267,   619,     0,     0,     0,     0,   638,   637,   639,
       0,   744,     0,     0,   690,     0,     0,  1055,   811,     8,
     898,   805,   815,   807,   809,   813,   930,   887,   680,   978,
     977,     0,     0,     0,   911,     0,     0,   910,     0,     0,
       0,  1087,     0,   908,   909,   998,     0,   999,     0,     0,
    1158,  1146,  1157,    75,  1155,   712,   713,  1144,   898,   795,
     801,   797,   799,   803,   680,     0,  1159,  1156,  1147,     0,
    1161,     0,  1248,  1254,  1162,     0,     0,     0,     0,     0,
       0,     0,     0,  1243,     0,     0,     0,     0,     0,     0,
     156,  1091,  1092,     0,     0,     0,   267,     0,   375,     0,
       0,   515,   602,   607,     0,  1089,  1166,  1169,  1097,  1088,
    1101,     0,     0,     0,     0,  1188,  1186,  1090,  1103,     0,
    1104,  1095,  1102,     0,  1105,  1185,     0,     0,  1269,   898,
       0,     0,     0,  1279,     0,   887,  1004,   680,     0,     0,
       0,     0,  1255,  1293,     0,     0,     0,   933,   489,     0,
       0,   324,     0,   365,   356,   514,   513,   504,     0,   351,
     499,   352,   500,     0,   876,   866,   874,   868,   870,   872,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   361,   509,   275,     0,     0,     0,   780,   776,
     778,   782,  1049,     0,   265,     0,   302,     0,   343,     0,
     342,     0,   481,    92,     0,   480,     0,   314,   315,     0,
       0,     0,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   460,     0,     0,   354,   502,   353,   501,     0,
       0,     0,     0,     0,     0,     0,   396,   535,     0,     0,
     394,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   702,     0,   322,   323,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   703,
     704,     0,     0,     0,  1308,  1309,     0,     0,     0,   893,
       0,     0,     0,   897,     0,     0,     0,   923,   922,   920,
     921,   930,   988,   993,   900,   902,  1015,     0,    10,     9,
       0,     0,     0,     0,     0,   680,   977,   206,     0,   208,
       0,   267,     0,     0,   848,   842,   844,   846,     0,     0,
       0,    16,    20,     0,     0,     0,     0,     0,     0,     0,
       0,   368,     0,   267,     0,    26,    21,    27,    24,     0,
      25,    23,    22,    29,    31,   163,   187,    82,   162,   188,
     121,   172,     0,     0,     0,     0,   131,     0,     0,   133,
       0,     0,   142,   175,   201,   198,   203,   202,   199,   204,
     114,     0,     0,   161,     0,   898,   738,     0,  1012,     0,
    1008,   680,     0,    11,    17,   728,   914,  1057,     0,     0,
       0,  1001,     0,     0,   184,   170,   191,   194,     0,   195,
       0,   171,   898,     0,     0,   638,   637,   837,   831,   833,
     835,     0,     0,     0,   635,   671,     0,     0,     7,   213,
     209,   221,   759,     0,     0,  1034,  1041,  1042,  1043,    61,
      52,    91,    38,    37,    56,    68,    44,    47,     0,    73,
      55,     0,     0,     0,  1025,  1027,     0,  1024,  1026,     0,
      40,    43,   930,   998,   989,  1006,   994,  1015,  1007,     0,
    1016,  1019,  1036,  1038,  1244,  1250,  1246,  1252,  1040,  1047,
    1044,  1048,   905,   903,   904,  1084,  1066,  1075,   643,   642,
       0,     0,   479,   745,     0,     0,   479,   746,     0,     0,
       0,   959,   898,     0,     0,   680,   977,     0,     0,     0,
     951,     0,     0,     0,     0,     0,  1056,   980,     0,     0,
     979,  1060,  1059,     0,   881,  1083,   884,  1069,  1077,     0,
     880,  1082,   883,  1067,  1076,     0,  1086,  1080,   885,  1062,
    1072,     0,  1081,   886,  1064,  1073,   937,   938,   941,   940,
     939,     0,   942,   944,     0,     0,     0,     0,    76,     0,
    1145,  1163,     0,     0,     0,     0,     0,     0,  1227,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   267,
       0,  1089,  1225,  1094,  1096,     0,     0,  1233,  1234,  1235,
       0,  1241,     0,     0,     0,     0,     0,     0,   157,   143,
    1100,  1099,  1098,     0,     0,     0,   608,     0,  1093,     0,
       0,     0,     0,   474,     0,     0,   479,     0,     0,     0,
       0,  1167,  1170,  1172,     0,  1168,  1171,  1173,     0,  1199,
    1106,  1270,  1271,   241,   240,     0,     0,     0,  1005,     0,
       0,  1251,     0,  1253,  1254,     0,  1152,     0,   788,   267,
       0,   503,   790,   784,   786,   792,  1051,     0,   491,   490,
       0,   332,   333,     0,     0,     0,     0,   340,   341,     0,
       0,     0,     0,     0,     0,     0,     0,   877,   867,   875,
     869,   871,   873,   680,   983,   982,     0,   862,   852,   860,
     854,   856,   858,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   508,     0,   263,
       0,   781,   777,   779,   783,  1050,     0,     0,   479,     0,
       0,     0,   104,     0,   301,   479,     0,     0,    93,   479,
       0,     0,   482,   313,   309,   347,   484,   485,   346,   486,
     312,     0,     0,   456,   452,   303,   378,   518,   379,   519,
     380,   520,   385,   525,   386,   526,   390,   530,   391,   531,
     398,   537,   399,   538,   397,   536,   409,   548,   405,   544,
     410,   549,   406,   545,   416,   555,   414,   553,   421,   560,
     419,   558,   426,   565,   424,   563,   429,   568,   432,   571,
     598,     0,   614,     0,     0,     0,     0,   458,   454,   483,
     321,   318,     0,   487,   488,   320,     0,     0,   457,   453,
     381,   521,   382,   522,   383,   523,   387,   527,   388,   528,
     392,   532,   393,   533,   402,   541,   403,   542,   400,   539,
     401,   540,   411,   550,   407,   546,   412,   551,   408,   547,
     417,   556,   415,   554,   422,   561,   420,   559,   427,   566,
     425,   564,   430,   569,   433,   572,   599,     0,     0,     0,
       0,   459,   455,     0,     0,  1301,  1304,     0,     0,  1299,
    1310,  1311,     0,     0,   892,   890,   891,   896,   894,   895,
     208,   236,   235,   234,   267,   238,   233,   232,   231,     0,
       0,     0,     0,     0,     0,     0,     0,   680,   980,   245,
       0,   244,   126,     0,   124,   849,   843,   845,   847,     0,
     680,     0,    15,    19,     0,   178,   177,   181,     0,  1012,
     680,     0,   138,     0,   136,   849,     0,   267,   680,     0,
      83,   116,   119,   117,   120,   128,   129,   130,   132,   140,
     141,   113,   111,   112,    13,   730,   733,     0,   160,     0,
     926,  1057,     0,     0,     0,  1013,  1009,     0,     0,   729,
     898,   915,  1002,  1003,   898,   169,   192,   168,   193,   167,
       0,     0,     0,     0,     0,   631,   632,   634,     0,     0,
     661,   657,     0,     0,     0,     0,     0,     0,   227,   219,
     217,     0,    35,    36,    74,    53,     0,    54,     0,    63,
      60,    71,    66,    72,    59,    89,    38,    69,    62,    90,
      58,    70,    67,     0,    57,     0,   712,    32,    34,    33,
    1028,  1029,     0,   651,   641,     0,   646,   640,     0,   479,
     747,     0,     0,     0,   977,     0,   949,   960,   961,   954,
     952,   953,     0,   981,   962,     0,     0,   955,     0,     0,
       0,  1070,  1078,  1057,  1068,  1063,  1065,  1074,   948,     0,
       0,     0,   945,   724,   725,   726,   479,     0,     0,  1130,
    1135,     0,     0,  1131,  1137,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1224,   479,     0,  1189,   267,     0,
       0,     0,  1232,  1238,  1239,  1236,  1237,     0,     0,     0,
       0,   144,  1127,  1132,   158,   605,   603,     0,     0,     0,
     472,   609,   606,   604,   473,   610,     0,  1006,  1250,  1252,
    1153,     0,     0,   355,   789,   791,   785,   787,   793,  1052,
       0,   492,   331,   327,   494,   495,   496,   330,     0,     0,
     493,   339,   336,     0,   497,   498,   338,     0,     0,   294,
     292,     0,     0,   967,   680,     0,     0,     0,     0,     0,
       0,   985,     0,   984,     0,     0,     0,   863,   853,   861,
     855,   857,   859,     0,   270,     0,   269,   296,     0,     0,
       0,     0,     0,     0,  1315,     0,     0,     0,   360,     0,
     376,   516,   266,   107,   105,   345,   344,    98,   102,   310,
       0,   311,   307,   308,   615,     0,     0,     0,     0,     0,
       0,   319,   316,   317,     0,     0,     0,     0,  1303,  1302,
    1306,     0,     0,     0,  1298,  1297,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   977,   219,     0,     0,   122,
     125,     0,     0,     0,     0,   173,     0,  1013,     0,   134,
     137,     0,    14,   479,     0,     0,   739,     0,   898,   927,
    1014,  1010,  1011,   731,   734,   916,   185,   166,   838,     0,
     247,   246,     0,   660,     0,   214,   207,   215,   210,   211,
     222,     0,    50,    45,    48,    51,    46,    49,    36,    42,
      39,    41,     0,     0,  1032,  1033,   650,     0,   645,     0,
     980,   979,   950,   963,   964,   957,   956,   958,  1054,  1053,
       0,   947,   946,    78,  1128,  1133,  1129,  1134,     0,     0,
       0,     0,   479,  1202,     0,     0,  1201,  1231,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1209,
       0,  1190,   479,  1191,   479,     0,     0,     0,  1112,   933,
    1112,     0,     0,   154,     0,     0,     0,   159,     0,     0,
     505,   328,   329,   325,   326,   337,   334,   335,   293,   878,
       0,   982,     0,   965,   968,   969,   278,   279,     0,   986,
     970,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   271,   282,   283,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   510,   349,   348,   476,   616,   443,   590,
     435,   574,   447,   594,   439,   582,   477,   617,   444,   591,
     436,   575,   448,   595,   440,   583,   445,   592,   437,   576,
     449,   596,   441,   584,   446,   593,   438,   577,   450,   597,
     442,   585,  1305,  1307,  1300,   850,     0,   123,   149,  1014,
       0,   135,    85,   928,     0,     0,   839,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1030,  1031,  1020,     0,
       0,     0,     0,   943,  1192,  1193,  1196,  1197,  1200,  1230,
       0,     0,     0,     0,     0,     0,     0,  1206,   479,     0,
       0,     0,  1110,     0,  1108,  1120,     0,  1112,     0,  1112,
       0,     0,     0,     0,   507,   506,   984,   966,   879,   971,
     972,   276,   277,   864,   286,   287,     0,     0,     0,     0,
     280,   281,   290,   291,     0,     0,   295,  1313,  1314,  1312,
     851,     0,   732,   735,   737,   736,     0,     0,   216,   212,
       0,  1017,  1022,     0,     0,     0,     0,     0,     0,     0,
    1220,  1204,     0,     0,  1205,  1217,     0,  1208,  1219,     0,
       0,  1112,     0,  1112,     0,  1112,     0,  1113,     0,     0,
       0,   147,     0,   152,     0,   155,     0,   865,   284,   285,
       0,   288,   289,   182,  1018,  1194,  1195,     0,     0,  1203,
    1210,     0,  1207,  1218,  1124,  1111,     0,     0,     0,  1121,
       0,     0,  1112,  1112,     0,  1112,   146,   145,   150,   148,
       0,     0,   376,   516,   272,     0,     0,  1109,     0,     0,
    1112,  1117,     0,     0,  1114,     0,     0,   153,  1211,  1125,
    1126,  1122,     0,     0,     0,     0,  1112,   151,     0,  1118,
    1119,  1115,     0,  1123,     0,  1116
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,   201,    49,    50,   969,   319,   431,   432,   433,   434,
     435,   436,   437,   438,   982,   983,   984,   985,   986,   987,
     988,   989,   990,   991,   992,   993,   244,   245,   439,   440,
      52,   320,   321,   736,   764,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,  2120,  2121,  2122,   453,   633,
     634,   635,   454,   455,   456,   457,   394,   395,   496,   396,
     497,   397,   498,   499,   860,   398,   399,    53,    54,    55,
      56,    57,   322,   323,   324,   325,   994,   995,   326,   327,
     692,   739,  1277,   328,   638,   694,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     725,   818,   640,  1334,   345,   695,   346,   641,   697,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     642,   643,  1120,  1336,   406,   544,   203,    59,   488,   489,
     204,    61,   205,   206,    62,    63,    64,    65,    66,    67,
     207,   112,   208,   250,   926,   927,   209,   210,   211,    71,
      72,    73,    74,    75,   212,   732,  1196,   407,   461,    77,
      78,   478,   479,   869,  1233,   710,  1043,  1044,   118,    79,
     462,    81,   463,   121,   122,   123,   930,   124,   113,    83,
    1092,  1093,  1094,    84,   569,  1224,   465,   571,  1226,   127,
     179,   466,   467,   181,   934,   129,  1012,  1561,  1000,  1001,
    1562,   182,   183,   184,   185,   733,  1197,   216,   217,   218,
     219,   220,   221,   646,   647,  2042,  2043,   648,   649,   650,
      87,   468,   254,    88,    89,   255,   256,   257,   653,   654,
     655,   656,   258,   657,   889,  1641,  1123,   660,   661,   662,
    1124,   664,    90,    91,   360,    92,    93,    94,    95,    96,
      97,   824,  1406,  1407,   825,   826,   361,   362,   363,   364
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -1707
static const int yypact[] =
{
   35806, -1707, -1707, -1707, -1707,   249, -1707, -1707, -1707, -1707,
   -1707, -1707, -1707, -1707, -1707, -1707, -1707, -1707, -1707, -1707,
   -1707, -1707, -1707, -1707, -1707, -1707, -1707, -1707, -1707, -1707,
     850,    94, -1707, -1707, -1707, -1707, -1707, -1707,     1,    57,
     345,   770,   359, -1707, -1707,  3013,  2752, -1707, -1707, -1707,
     427, -1707,   430,   770,   949, -1707,   480,   440,  1038, -1707,
     285, -1707,   967, -1707,   503, -1707, -1707, -1707, -1707, -1707,
    1024, -1707,  1068,   468, -1707,   529,  1275, 35442,  2454,   227,
   36074, -1707,   585,   553, -1707,  1708, 38524, 34392, -1707, -1707,
   -1707, -1707, -1707, -1707, 35897, 35257,   762, -1707,    94, -1707,
   -1707,   359,   359,   777,   745,   359, 28326,   770, -1707, -1707,
     380, -1707,  3013, -1707, -1707, -1707,   782, -1707,   547,  1052,
   -1707, -1707, 36163, -1707, -1707,  2752,  2995,  1534,  1607,  1520,
   12250, -1707,   768,   518,   626, 29266, 38086, -1707, 29385, -1707,
   -1707, -1707,   770, -1707,   680,  1191,  1203,    88, 38086, -1707,
   38256, 29504, 38086, 29623, -1707, 29742, -1707, -1707,   770, -1707,
   -1707,   -53,   813, -1707, -1707,  1002, -1707,   440,   520, -1707,
   -1707, -1707, -1707, -1707,  1584,  1762,   585,  2995,  2186,  1520,
   38524, 38524,    36, -1707,  1228,   827,   913,   813,   201,   585,
    1263, -1707, 26866,   927, -1707, -1707, -1707, -1707, -1707, -1707,
   -1707, -1707,   845, -1707,   326, -1707,   975, -1707, -1707,   948,
   -1707,   988,  1858,  8698,    74,   282, -1707, -1707,   395,   463,
    1007,  1026,   428,  1034, -1707,   428, -1707, -1707, -1707, -1707,
   -1707, -1707, -1707, -1707, -1707, -1707, -1707, -1707, -1707, -1707,
    1041,  1050, -1707, -1707,   251,    78, -1707, -1707, -1707, -1707,
   -1707, -1707, -1707, 35624, -1707, 18674,  5010, 14101, 18806, -1707,
    1049,  1114,   910, -1707, -1707,   440, 35533, -1707, -1707, -1707,
   -1707, -1707, -1707, -1707,   503,   529, 36608, 38524, 36872, -1707,
   -1707, -1707, -1707, -1707,  1064,   777,   777, -1707, 28326,   347,
   -1707, -1707, 28399, 28472, 28472,  1090, 38341, 28326, -1707, -1707,
    1104,  1113, 38341, 28326,  1120,  1186,  1197,  1213,  1245, 28545,
   -1707, 13313, -1707,   359, 26939, -1707, -1707, -1707, -1707,  1235,
   -1707,   107,  1260, -1707, -1707, -1707, -1707, 13804, -1707,  2380,
   26939, -1707,   904,  1333,  1505, 28326,   526,   978,  1262,  1261,
    1281,  1407,    79,  2380,  1317,   651, -1707,  2380, -1707,   953,
    1431,  1632,  1006,  1659,  1308,  1319,  1338,  1471,   101,  2380,
     777, -1707, -1707, -1707, -1707,  1376,   556, 37916,  1389,  1399,
   -1707, -1707, 27012, -1707, 27085, -1707,   541,   663,  1415,  1422,
    2995,  1968,  2026,   547, -1707, -1707,   752, -1707, -1707, -1707,
   -1707, -1707,  1104,  1235,  1433, -1707, -1707, -1707, -1707,   611,
     863, -1707,   132, -1707, -1707,   159, -1707, 38425, -1707, 13997,
   38256, -1707,   804, 37661, 36960, -1707, -1707,  1104,  1442, -1707,
     770, -1707, -1707,    94, 37136, 36784,  6055, 38171, -1707, -1707,
    1235,   598,  1448,  1448,  1165, -1707,  1455, -1707, -1707,  1460,
     127,  1218,   140, -1707, -1707,   250,  1475, -1707,  1489, -1707,
   -1707,    76, -1707,  1483, -1707, -1707, 28790, 28909,   228,   902,
     651, 34588, 36252, -1707,   585,  1708, -1707, -1707, 34490, -1707,
   -1707,  1496, -1707,   770, -1707, -1707, -1707,  1517, 38341, -1707,
     804, -1707, 29028, 29147,  1501,  1513, -1707,  1518, -1707,  1527,
   -1707, -1707,  2251,  1530,   796,    94, -1707, -1707, -1707, -1707,
     769,    81,   883, -1707, 29861, 29980, -1707,   883, -1707, 30099,
   30218,   883, -1707, 30337, 30456, -1707, -1707,  2752,  2752,  2752,
   21973,   752,  1584,  1762,   752, -1707, 27158,  5010, -1707,  1049,
    5010, -1707,  1049, -1707, -1707,  2752,  2752,   752, -1707, -1707,
    1535,   167, -1707,  1550,  1565, 37746,  1395,  1533,  1575, -1707,
   30575, -1707, 30694,   469, -1707,  5468, 27231,  2752, -1707,  5808,
     845, -1707, -1707, -1707, -1707, -1707,   547,  1573,   585,   634,
     154,   670,  1087,  1587, -1707, 37400,  1600, -1707, 37487,  1612,
   37574,  1620, 37831, -1707, -1707, -1707,  1210, -1707, 28326,   770,
   -1707, -1707,  1621, -1707, -1707,   -53,   813, -1707,  1622, -1707,
   -1707, -1707, -1707, -1707,   585,  1356,   827, -1707, -1707,  1628,
   -1707, 18938, -1707,  1049, -1707,   283, 27304,  1643,  1654,  1658,
     417, 19070,  1661,    94,  1662,  1663, 19202,  1590,  1668,  1670,
      94, -1707, -1707,  1680,  1681,  1682,  1408, 17349,  2380, 17486,
    6146,  2380,  2380, -1707, 17618, 35715, -1707, -1707, -1707, -1707,
   -1707, 19334, 19466, 19598, 19730, -1707, -1707, -1707,  1049, 19862,
   -1707, -1707, -1707, 19994, -1707, -1707,   359,   359,   777,   316,
     770,  1412,  1655, -1707,   547,   227, -1707,   585,  2995, 38524,
   38524,  5010, -1707, -1707, 36696, 28326,  1683, -1707, -1707, 23676,
     182, -1707, 14215, -1707, -1707,  1173, -1707, -1707, 27377, -1707,
   -1707, -1707, -1707, 38341,  1690, -1707, -1707, -1707, -1707, -1707,
   33996, 38341, 23807,    94, 34095, 38341, 28326,   359,   359,   359,
   28326, 23922, -1707, -1707, -1707, 14472, 14609, 14746, -1707, -1707,
   -1707, -1707,  7034,  1688,   299, 22104, -1707,   184, -1707,   273,
   -1707, 22235,  1685, -1707, 22366, -1707,  1503, -1707, -1707, 24749,
    1540, 28326, -1707, -1707, -1707, -1707, -1707, -1707, -1707, -1707,
   -1707, -1707, -1707, 26939,   188, -1707, -1707, -1707, -1707, 28326,
   28326, 28326, 28326, 28326, 28326, 28326,  1505,  1632, 28326, 28326,
   -1707, 28326, 26939, 26939, 26939, 26939, 26939, 28326, 28326, 14883,
   26939, -1707,  1545, -1707, -1707, 24822,  1546, 28326, 26939, 28326,
   28326, 28326, 28326, 28326, 28326, 28326, 28326, 28326, 28326, 28326,
   26939, 26939, 26939, 26939, 26939, 28326, 28326, 15020, 26939, -1707,
   -1707,   643,   845, 38171, -1707, -1707,  5255, 37916, 37916, -1707,
    1684,  1686,  1698, -1707,  1700,  1701,  1702, -1707, -1707, -1707,
   -1707,   547, -1707, -1707, -1707, -1707,  1691, 12250, -1707, -1707,
   12250, 12250, 26939, 26939,  7505,   585,   823, -1707,   689,   374,
    1019,   891,  1054,  1687,  1699, -1707, -1707, -1707,  1517, 12399,
   37048, -1707, -1707,    94,  1713,  1714,  1715, 34784,  1712,    94,
   33897,  2647, 24053,  1465, 37224, -1707, -1707,  1049, -1707,  1049,
   -1707, -1707, -1707,  1049, -1707, -1707,  1716, -1707, -1707,   559,
   -1707, -1707,  4441,  4441,  1448,  1448, -1707,  1448,   236, -1707,
    1448,  1448, -1707, -1707,   798, -1707, -1707,   798, -1707, -1707,
     892, 27450,  2392, -1707, 28326,   822, -1707,  1417,   547, 36341,
   -1707,   585,  2995, -1707, -1707,   982,   927,  8698, 28663,   830,
     428, -1707,   428,  2752, -1707, -1707, -1707,  1717,   244,  1724,
     254, -1707,   228, 34686, 12250, -1707, -1707,  1731, -1707, -1707,
   -1707, 38256, 38256, 28326,    94, -1707, 33074,   161, -1707,   628,
     865,  1726, -1707, 38256,    94,  1346, -1707, -1707, -1707, -1707,
   -1707, -1707,  1448, -1707, -1707, -1707, -1707, -1707, 11153,  1435,
   -1707, 22497, 38619, 22628, -1707, -1707, 13572, -1707, -1707, 37312,
   -1707, -1707,   547,  1584, -1707,  1762, -1707,   547, -1707, 27158,
   -1707, -1707, -1707, -1707, -1707,  1049, -1707,  1049, -1707, -1707,
   -1707, -1707, -1707, -1707, -1707, -1707, -1707, -1707, -1707,  1527,
     172,   177,  1725, -1707, 30813, 30932,  1730, -1707, 31051, 31170,
   31289, -1707,   483,   187,   213,  1728,  2172,  1736,  1739,  1740,
   -1707,  1735,  1748,  1749,   585,   752,  1520,   154, 36430, 27523,
     634, -1707, -1707, 38001, -1707, -1707,   845, -1707, -1707, 38001,
   -1707, -1707,   845, -1707, -1707, 38001, -1707, -1707,   845, -1707,
   -1707, 38001, -1707,   845, -1707, -1707, -1707, -1707, -1707, -1707,
   -1707,  1742,  1751, -1707,  1258,  1761,  1768,   583, -1707, 22759,
   -1707, -1707, 20126,  1743,  1763, 20258, 28326, 28326, -1707, 27596,
   27669,  1766,  1770,  1776, 12890,  1777,    94,  6794,  1981,  1468,
   24895, -1707,  1837, -1707, -1707,  2552,  1778, -1707, -1707, -1707,
    1783,  1784, 24968, 17750,   359,  1779, 28326, 28326,    94, -1707,
   -1707, -1707, -1707, 24275,   807, 26939, -1707,  1183, -1707, 28326,
   15157, 15294, 26939, -1707, 28326, 15431,  1628, 20390, 20522, 20654,
   20786, -1707, -1707, -1707, 20918, -1707, -1707, -1707, 21050, -1707,
   -1707,   777,   777,  1790,  1792, 33192, 33310,   752, -1707,   752,
    5010, -1707,  5010, -1707, -1707,  1788, -1707,   760, -1707,   228,
    1793, -1707, -1707, -1707, -1707, -1707,  7034,  1794,  1685, -1707,
    1597, -1707, -1707, 25041,  1601, 28326,  1604, -1707, -1707, 25114,
    1614, 28326,  1795, 14325, 12250, 35985, 28326,  1799, -1707, -1707,
   -1707, -1707, -1707,   585,  1798,  1800,  1782,  1801, -1707, -1707,
   -1707, -1707, -1707, 34194, 25187,  1802,  1805,  1807, 28326,  1803,
   34293,  1796,   406,   333,   454,  1804,  1809, -1707,  1810, -1707,
      94, -1707, -1707, -1707, -1707, -1707, 28326,   359,   255, 10856,
   22890,  1806, -1707, 26939, -1707,   258, 34881, 23021, -1707,   263,
   34975, 23152, -1707, -1707, -1707, -1707,  1135,  1814, -1707, -1707,
   -1707,  9258,  8294, -1707, -1707,  1806, -1707, -1707, -1707, -1707,
   -1707, -1707,   904,   953,   904,   953,  1333,  1431,  1333,  1431,
    1505,  1632,  1505,  1632,  1505,  1632, -1707, -1707,   526,  1006,
   -1707, -1707,   526,  1006, -1707, -1707,   978,  1659, -1707, -1707,
    1262,  1308, -1707, -1707,  1261,  1319,  1281,  1338,  1407,  1471,
   -1707,    62, -1707, 25260,  1811,  8997,  1812, -1707, -1707, -1707,
   -1707, -1707,  1178, -1707, -1707, -1707, 25333,  9965, -1707, -1707,
   -1707, -1707, -1707, -1707, -1707, -1707,   904,   953,   904,   953,
    1333,  1431,  1333,  1431,  1505,  1632,  1505,  1632,  1505,  1632,
    1505,  1632, -1707, -1707,   526,  1006, -1707, -1707,   526,  1006,
   -1707, -1707,   978,  1659, -1707, -1707,  1262,  1308, -1707, -1707,
    1261,  1319,  1281,  1338,  1407,  1471, -1707, 25406,  1815,  9427,
    1817, -1707, -1707,    94,    94, -1707, -1707,   451,  1108, -1707,
   -1707, -1707, 13685, 35348, -1707, -1707, -1707, -1707, -1707, -1707,
   -1707, -1707, -1707, -1707,   954, -1707, -1707, -1707, -1707, 25479,
    1818, 10107,  1823, 25552,  1824, 10336,  1834,  1360,   823, -1707,
   12250, -1707, -1707, 12250, -1707,   826, -1707, -1707, -1707,   312,
     585,  2995, -1707, -1707,   606, -1707, -1707, -1707,  1528,  1691,
     585,  2995, -1707,  1843, -1707,   857,   412,   723,  2752,  1844,
   -1707, -1707, -1707, -1707, -1707, -1707, -1707, -1707, -1707, -1707,
   -1707,  2219, -1707, -1707, -1707, -1707, -1707, 23283, -1707,  2003,
     927,  8698, 21842,   871,   752,   547, -1707,   752, 28326, -1707,
    1017, -1707, -1707, -1707,  1847, -1707,  1716, -1707,  1685, -1707,
    1569,  1074, 12250,  1081,  1102, -1707, -1707, -1707, 31408, 31527,
    1846, -1707,  2965, 38341, 38341, 38341, 38341, 28326, -1707, -1707,
   -1707, 27742, -1707,  1049, -1707, -1707, 27815, -1707, 27888, -1707,
   -1707, -1707,  1570,  1435, -1707, -1707,  1448, -1707, -1707, -1707,
   -1707, -1707,  1570,  1435, -1707, 27961,  6310, -1707, -1707, -1707,
   -1707, -1707, 21182, -1707, -1707,   202, -1707, -1707,   242,  1845,
   -1707, 31646, 31765,   585,  2172,  1849, -1707, -1707, -1707, -1707,
   -1707, -1707,   752,   634, -1707,  1851,  1857, -1707,  1850,  1854,
    1855, -1707, -1707,  8698, -1707, -1707, -1707, -1707, -1707, 28326,
    1862,  1314, -1707, -1707, -1707, -1707,   270, 35069, 23414, -1707,
   -1707, 24275, 24275, -1707, -1707, 25625, 17882, 25698, 25771, 24366,
   25844, 18014, 12890,  1859,  1860, 12890, 28326, 28034,  1877, 10911,
    1784, 11217,   359, 12890,  1870, 33702, 12890, -1707,  1574, 25917,
   11678, 25990, -1707, -1707, -1707, -1707, -1707,   108,   359,  1874,
    1256, -1707, -1707, -1707, -1707, -1707, -1707,  1876,  1878,    94,
   -1707, -1707, -1707, -1707, -1707, -1707, 38256, -1707, -1707, -1707,
   -1707,  1879,  1880, -1707, -1707, -1707, -1707, -1707, -1707, -1707,
   15568, -1707, -1707, -1707,  1289,  1882, -1707, -1707, 26063, 13098,
   -1707, -1707, -1707,  1290, -1707, -1707, -1707, 26136, 24457, -1707,
   -1707,  1883,  1116, -1707,  2199,  1886,  1887,  1888,  1865,  1867,
   12250,  1800, 36519,  1798, 28326, 12250, 28326,  1861, -1707, -1707,
   -1707, -1707, -1707,  1889, -1707, 28107, -1707, -1707,  1890,  1891,
   28326, 28326,  1897,  7774, -1707,    94,    94, 28326, -1707, 15705,
   -1707, -1707,   777, -1707, -1707, -1707, -1707, -1707, -1707, -1707,
   15842, -1707, -1707, -1707, -1707, 26939, 15979, 16116, 26939, 16253,
   16390, -1707, -1707, -1707, 16527, 16664, 16801, 16938, -1707, -1707,
   -1707,   643,  1896,   557, -1707, -1707, 26939, 26939, 26939, 26939,
   26939, 26939, 26939, 26939,   585,   823,  1994,  1138, 12250, -1707,
   -1707,  1894,   752,   752,  1448, -1707,   752,  1691,  1905, -1707,
   -1707,  1906, -1707,   278, 35163, 23545, -1707,   585,  1096, -1707,
     547, -1707, -1707,  1903,  1910, -1707, -1707, -1707, -1707,  1146,
   -1707, -1707, 33074,  1911, 33074, -1707, -1707,  1919, -1707,  1924,
   -1707, 27158,  1939, -1707, -1707,  1939, -1707, -1707, -1707,  1939,
   -1707, -1707, 21314, 21446, -1707, -1707, -1707, 33074, -1707, 33074,
     154,   634, -1707, -1707, -1707, -1707, -1707, -1707, -1707,  1520,
   26209, -1707, -1707, -1707, -1707, -1707, -1707, -1707, 12890, 11438,
   12890, 11438, 33411, -1707, 24275, 18146, -1707, -1707, 12890, 12890,
   26282, 12890, 26355, 24184,  1931, 11948, 26428,   126, 21578, -1707,
   28326, -1707, 33508, -1707, 33799, 12890, 24530, 28180,   359,  1930,
     359,   215,  1927, -1707,    94, 28326, 28326,    94, 17075, 17212,
   -1707, -1707, -1707, -1707, -1707, -1707, -1707, -1707, -1707, -1707,
     585,  1800,  1941, -1707, -1707, -1707, -1707, -1707,  1175,  1798,
   -1707,  1942,  1943,  1934,  1937,  1230,  1938,  1949, 12250, 28326,
   13313, -1707, -1707, -1707,  1953,  1954,  1958,  1961, 28326,  1974,
    1979,  1982,  1987, -1707, -1707, -1707, -1707, -1707, -1707, -1707,
   -1707,   159, -1707, -1707, -1707,   159, -1707, -1707, -1707, -1707,
   -1707,   159, -1707, -1707, -1707,   159, -1707, -1707, -1707,   159,
   -1707, -1707, -1707,   159, -1707, -1707, -1707,   159, -1707, -1707,
   -1707,   159, -1707, -1707, -1707, -1707,  1242, -1707, -1707,  1691,
   26939, -1707, -1707, -1707, 28326, 28326, -1707, 31884, 32003, 33074,
   32122, 32241, 38341, 38341,  3062, 21710, -1707, -1707, -1707, 32360,
   32479, 32598, 32717, -1707,  2006,  2043, -1707, -1707, -1707, -1707,
   12890, 28326, 28253,  1930, 18278, 18410, 24603, -1707, 33605, 24275,
   26501, 18542, -1707,    -1,   384, -1707,   190,   359,  1951,   359,
     322,   608,  1992,  1295, -1707, -1707,  1798, -1707, -1707, -1707,
   -1707, -1707, -1707, -1707, -1707, -1707,  1250,  1983,  1984,  1993,
   -1707, -1707, -1707, -1707,  1990,  1997, -1707, -1707, -1707, -1707,
   -1707,  2001, -1707, -1707, -1707, -1707, 32836, 32955, -1707, -1707,
   26574, -1707, -1707, 12890, 12890, 26647, 24676, 12890, 26720, 24184,
    2007, -1707, 12890, 28326, -1707, -1707, 24275, -1707, -1707,  2010,
     359,   359, 28326,   359,  2013,   359,  1121, -1707,   231,  1448,
     436, -1707,   106, -1707,  1999, -1707,    94, -1707, -1707, -1707,
   27742, -1707, -1707, -1707, -1707, -1707, -1707,  2007, 12890, -1707,
   -1707, 26793, -1707, -1707, -1707, -1707,  1298,  2017,  1306, -1707,
    1133,  2021,   359,   359,  2023,   359, -1707, -1707, -1707, -1707,
     322,   617, -1707, -1707, -1707, 12890,  2030, -1707,  2033,  2034,
     359, -1707,  1328,  1344, -1707,  1231,   321, -1707, -1707, -1707,
   -1707, -1707,  1368,  2035,  2036,  2037,   359, -1707,  2038, -1707,
   -1707, -1707,  1382, -1707,  2044, -1707
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -1707,  3427,   153, 12597, -1707,  2063, -1707, -1707, -1707, -1707,
   -1707, -1707,  1695,  1696,  -823, -1707,  -959,   171,   170,   178,
    -889,  -879,  -830, -1707,  -693,  -570, -1707, -1707,  1709,  1722,
   -1707,  3245,   825, -1707,  -214,   846,   848, -1707, -1707, -1707,
   -1707,  1729, -1707, -1707, -1707,  -627, -1706,     6, -1707, -1707,
   -1707, -1707,  3015,  3849,   -81,   -52,  -124,  -795, -1707,  -834,
   -1707,  -827, -1707,  1195,  -143,  1330,  -817,   -29,  1907,    -6,
    1908,    40,     0, -1707,  1284,   511,  7804,  2166, -1707,  3856,
   -1707,  -702,  -713,   751,  4841,  1885, -1707,  -325,   382,   500,
    -102, -1707,   325,  -219,   -18,    90,   -15,   135,  2005, 10981,
    2815,  -108, 11449,  -225,  2308, -1707,   809,  5713,  1898,  -320,
     507,   654,   -38,   508,   144,   237,   186,   239,   268,  2466,
    6070,  -458, 10510,   -99,    31,  -351,  8988,   -68,  1239,  -111,
    2101,  9166,  7813, -1707, -1707, -1707,   -59,   -50,   -12, -1707,
    7046, -1707,   801,   946,   717,  -541,  2240,  8194, -1707,  9873,
   -1707, -1707, -1707,   -40,  2494, -1707, -1707,  6113,  4136,    -4,
   -1707, -1707,  1353,  1785,  1493,  1915,   -72,   -58,  4542, 12624,
    5147,  4264,  -451,   -34,  -265,   240,  -887,     7,  3159, -1707,
   -1707, -1054, -1707,   829,  -526, -1223, 10533,  -206,  -652,    82,
      86,  1169,  1808,  -251,  -804,  -445,  -990,  -511,  -920,  -917,
     381,   960,  1190,   -66,  1966,  -706,  1499,  -288,  -305,  -444,
   -1707,   -89,   -63,  6289,   570,   111,  -431, -1707, -1707, -1707,
    2129, -1707,   740,  2138,   -49,   987,   -14,  1980,  1101,  1106,
   -1707, -1707, -1707,   -75,   163, -1586,   209, -1707, -1707, -1707,
     350, -1707,  2152,   -48,    19,  2146,  1665, -1707, -1707, -1707,
    2155,  -798,   474, -1707,  -757,   962, -1707, -1707, -1707, -1707
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1296
static const yytype_int16 yytable[] =
{
      58,  1482,  1713,  1138,  1483,   767,  1235,   500,   214,   169,
     768,   259,   190,  1422,   941,  1013,   935,  1427,   939,  1560,
    1423,   832,   215,   836,  1428,   680,   495,   170,  1410,   142,
     102,   104,  1540,   378,  1550,   274,   492,   533,   268,   270,
    1602,   109,  1259,  1886,  1060,  1496,   117,  1276,  1266,   103,
     376,  1270,  1421,   134,   275,  1897,  1426,   482,   143,   379,
     146,   110,  1239,  1754,   377,   171,  1453,   517,  1011,  1411,
     504,   166,   509,  -889,   513,   573,   157,   168,   117,   592,
     202,   264,  1343,   266,  -207,   117,   483,    58,   273,   490,
     276,     1,   384,  1342,    58,    58,   788,     1,   284,   505,
     737,   510,  1542,   514,  1552,   528,   531,   366,   742,     1,
     369,  1898,  1543,   287,  1553,  2109,   105,   167,   816,  2110,
     285,   286,   202,  2111,   289,   117,   117,   265,   896,  1898,
     400,   287,   128,   385,   143,   458,   471,  1511,   458,   142,
    1529,   899,   485,   384,   487,   910,   911,   487,   471,   788,
     501,   458,   471,   458, -1039,   458, -1039,     1,   516,   178,
     178,  1544,  1520,  1554,     1,  1260,   527,   530,   143,  1546,
       1,  1267,   106,  1563,  1271,     1,   816,   117,  1566,  2119,
       1,   612,     2,  1198,   385,  1261,  -475,   605,   573,  1285,
     574,   115,   541,  2113,   575,  1558,   929,   912,   169,   593,
     974,   857,   143,  1846,   548,  1053,   132,   381,   169,   491,
     933,   382,   157,   560,   576,   789,   170,   274,  2047,   274,
     287,   763,   117,   543,  1899,   117,   170,  2158,   743,   268,
     270,     1,  1900,   776,  2153,   790,   275,   817,   275,   798,
    1027,   100,  2033,  1848,   651,  1506,  1454,   670,   897,   260,
    1900,   900,   590,   598,   171,  1508,  -108,  1026,   636,   -99,
     365,   743,   667,   681,  -103,  1104,   669,   862,   852,   555,
    1068,   -81,   683,  1074,   684,  1080,    58,  1085,    58,   -88,
     556,   668,  1521,   576,   607,   859,   495,  1067,     1,   744,
    1073,  1278,  1079,  1564,  1084,   853,   704,   777,  1567,   572,
    2032,  1550,   704,   743,   287,  1262,  2114,   575,  1550,  1262,
    2110,   541,  1550,     2,  2115,     1,   673,   175,   265,     1,
    1847,   519,   964,  -649,     1,     1,    98,   372,   711,     1,
    1060,  2048,   734,   578,   715,   178,  1458,  1278,   287,  2049,
     140,   141,   191,   529,   532,   540,   842,  2154,   178,  1047,
     744,  2110,   287,   192,     2,  2155,   886,   888,   890,   892,
    1849,   313,   964,  -644,   100,   897,   143,   822,   901,   591,
     902,  1552,   541,    99,   541,   743,  -108,     1,  1552,   -99,
     117,  1553,  1552,     1,  -103,   287,   117,   843,  1553,   287,
     938,   -81,  1553,  1263,  2119,  2119,   579,  1702,   577,   -88,
    1264,   608,   578,   831,   215,   835,  1607,   144,     2,   861,
     501,   287,  1510,   864,   560,     1,  2159,   523,  1108,   613,
     875,   658,  1257,   876,   822,   864,   883,   822,   140,   141,
    1554,     1,   935,   680,  1790,  1029,  1546,  1554,   520,     1,
     682,  1554,  2187,  1546,  1286,  1288,  1290,  1546,   546,  1287,
    1289,  1291,  1014,  1735,     1,  1016,   458,   458,   143,   287,
     107,   925,   202,   687,   581,   117,  1048,   659,   952,  1034,
    2159,  1038,     1,   956,  1350,  1352,  1354,   157,   957,  1351,
    1353,  1355,   458,   458,  -882,  1493,     1,  1004,  1929,  1502,
    1685,  1503,  1049,   847,   970,   971,  1694,     2,  1035,  2112,
    1039,  1684,   367,  1004,   458,   458,   175,  1693,   935,   458,
     458, -1079,   128,   458,   458,   580,   676,   117,   117,   117,
    1060,   117,  1734,     1,   117,   830,  1255,   834,  1006,  1608,
    1145,  1583,  1109,  1152,  1800,   117,   117,   117,   778,   779,
     130,   143,   573,    46,  1006,   822,   487,  1862,   131,   737,
     458,  1011,   458,   516,  1559,  1042,   541,   117,   242,     1,
     143,   139,   287,  1705,  1496,  1316,  -481,  -481,  -481,  1770,
     117,  1771,  1844,  1486,  1736,  1066,   737,   385,  1072, -1085,
    1078,  1723,  1083,   582,   737,    26,     1,  1052,  1732,  1097,
     153,  1040,  1398,  1382,   887,   140,   141,   893,   137,   975,
     975,   975,   138,  -882,   737,   929,  1786,  1811,   663,     1,
    1812,     1,  1516,  1428,  1410,  1410,   169,   178,   178,  1452,
       1,  1119,   848,  1126,   149,   274,  1787,  1430,  1434,     1,
    1139,   409,   140,   141,   170,  1840,    -8,  1236,  1841,   780,
     781,   128,   520,  1056,   275,  1426,     1,  1103,  1047,  1550,
     154,   636,   636,   636,   636,  1411,  1411,   837,   792,   793,
     794,   575,   373,  1449,   576,  1180,  1182,   929,   223,   143,
    1174,  1061,   820,   374,  1466,  1994,  1300,  1302,   117,  1304,
    1268,   486,  -481,     1,   560,  1171,  1172,  1656,   929,  1189,
    1015,  1661,     1,  1017,  1663,  1819,  1665,    45,  2056,  1605,
    1830,   676,   933,  1212,  1364,  1366,  1368,  1370,  1590,  1051,
    1217,  1227,   541,  1237,  1217,  1227,   885,   968,  1400,  1552,
     242,  1189,  1794,  1420,  2123,   849,     1,  1420,  1825,  1553,
    1828,   850,  1250,  2177,   929,  1941,  1242,  1243,  1244,   410,
    1301,  1303,  1096,  1305,   411,  1278,  1273,  1523,  1557,  1058,
    1280,  1278,  1524,  1432,  1436,     1,  1403,  1404,  1592,  1624,
    1059,  1005,   283,     1,  1008,  1048,   795,  1320,  1365,  1367,
    1369,  1371,  1326,     1,   796,  1591,  1597,   797,  1554,   838,
       2,  1594,   287,   578,  1546, -1054, -1054,  1595,     2,   115,
   -1054,  1049,  1340,  1596,  1804,  1386,  1345,  -898,     2,     1,
    1392,    69,  -898,   691,   703,  -479,  -479,  -479,  1279,  -898,
       1,  -479,  -479,  -479,   658,   658,   658,   658,  1513,  1514,
     691,  1405,   143,  1408,   968,     1,   822,   822,   822,  1475,
    1476,   579,  1477,  -898,  -898,  1479,  1480,   495,   495,  1575,
     378,  1560,  1181,  1183,  1184,   744,  1550,  1424,     1,   495,
     400,  1424,  2016,     1,   202,   100,  1522,  1492,   970,   971,
     659,   659,   659,   659,   288,  1709,   379,    46,   157,  1445,
     560,   377,   579,  1139,  -207,   703,  1324,   560,   173,  1463,
    1465,   101,  1467,   972,   822,  1518,   408,  1729,    69,   973,
    -479,  -479,  -479,  1928,  -207,    69,    69,  1654,  1935,  -480,
    -480,  -480,  -207,   920,  1390,  1811,  1812,  1532,   372,   746,
     747,   748,  1583,     1,  1519,   100,  1552,  1805,  1178,  1565,
    1568,  -479,   117,  1328,   676,   143,  1553,  -479,  1317,   202,
    -479,  1740,   117,   518,   140,   141,  1741,  1500,   854,  1788,
     117,   666,   117,  1504,  1487,  1501, -1079,   536,  1789,   556,
     580,  1394,   143,   925,   400,  1485,  1383,   140,   141,  1571,
     442,   501,   501,   442,   487,  -207,   458,   487,   128,  1585,
    1788,  1996,  1325,   501,  1530,  1554,   442,  -207,   442,  1799,
     442,  1546,   851,  -207,  1525,   744,  1809, -1079,  1572,  1526,
    1679,   580,   782,   783,  1515,  1586,   610,   614,  -479,   117,
    1391,   663,   663,   663,   663,  -207,  -479,  1701,   128,  -479,
    1440,  -207,   384,   744,   564,  -480,   769,   749,   806,   807,
       1,   921,  1321,   572,  1844,   750,  1327,  1949,   751,   128,
     487,   487,  1907,   517,   458,   458,   770,   771,   458,   458,
     458,     1,   143,   693,   935,   117,   117,   545,  1851,   737,
    1387,  1845,  1922,   385,  1393,   117,  1329,   117,   202,   541,
     693,    32,   385,   822,  1006,   799,   143,   173,  -207,   822,
     550,   135,   143,   136,  -207,   822,   744,   173,   143,    69,
    2081,   822,   475,   143,  1395,   800,   801,   645,  1062,   147,
    1589,   148,    43,    44,   475,   482,   549,   143,   475,     1,
    2016,   696,   636,    26,  1011,   636,  1498,  1308,  1312,   551,
     676,     1,   730,   100,  1119,   130,  1126,   690,   696,   808,
     809,  2066,   519,   583,   483,  1638,  1706,   381,   372,   140,
     141,   382,  1815,  1439,   690,  1374,  1378,   150,  1651,   973,
    2164,  1623,   584,   636,  1280,  1533,  -758,  1814,  -758,   586,
     140,   141,  1707,  1647,  1292,  1294,   588,   636,   636,   636,
     636,    28,  1541,  1547,  1551,   589,    32,   191,  1441,    86,
     665,  -918,  1178,    38,   973,   458,   458,   117,   192,   117,
    1206,  1207,  1208,   685,  1356,  1358,   929,   822,  1818,   143,
     151,    98,   152,   676,   850,  1820,   822,    43,    44,   602,
    1682,   973, -1053, -1053,  1687,   703,  1691, -1053,   140,   141,
    1696,  2003,  1588,  1086,   400,   202,  1821,  2088,  2089,   712,
     140,   141,   973,  1162,  1166,  -268,  -268,  -268,   713,   929,
    1919,  1575,   929,  1717,  2069,   716,   850,  2151,  1087,   676,
    1717,  2110,   708,   611,   615,  2152,   180,  1708,   708,  2169,
     143,  1749,  1995,  2110,  1088,  1750,    86,  2170,   850,  1851,
    2006,  1086,   564,   277,    86,   658,   850,   610,   658,  1728,
     610,  1657,  1658,  1659,  1296,  1298,  1742,  2051,     1,  1293,
    1295,   442,   442,   891,  1089,  1090,  1087,   242,  1209,  2058,
    1309,  1313,  1955,   950,  1761,   850,  1210,  1661,  1750,  1211,
    1665,   717,  1088,     2,  1360,  1362,   658,   442,   442,  1357,
    1359,   659,   718,  -655,   659,  -655,  1420,  1086,  1375,  1379,
     658,   658,   658,   658,  1583,  -654,  1091,  -654,   719,   442,
     442,  2017,  1089,  1090,   442,   442,   898,  -268,   442,   442,
    1672,  -268,  1087,  1668,  2063,  1669,   534,  2185,   535,    28,
     850,  2110,   659,   602,    32,  2186,  2080,   741,  1088,   867,
     720,    38,   850,  1934,  2127,  1937,   659,   659,   659,   659,
     850,   867,  1903,  1011,  1600,   442,  1904,   442,  1601,  1945,
    1947,   538,   744,   535,  1011,    43,    44,  1858,  1089,  1090,
     784,   610,   614,  1163,  1167,   785,  1028,   155,     1,  1420,
    1827,  1420,  1829,  1768,  1769,  1911,  1915,  1772,   143,  1750,
    1750,  2125,   822,   822,  2166,  2126,   786,  1667,  2110,  1008,
      28,   610,  2168,   787,   960,    32,  2110,  1773,  1297,  1299,
    1547,  1551,    38,   791,    28,   180,   812,  1547,  1551,    32,
    1424,  1547,  1551,   400,  2183,   679,    38,   277,  2110,  1791,
    1121,   117,   663,   813,  1651,   663,    43,    44,  1361,  1363,
    2184,   117,   772,   773,  2110,  1531,  1801,   143,   117,  2046,
      43,    44,    45,   814,  1100,   854,   535,   976,   977,   978,
     645,   645,   645,   645,  2188,   173,   556,   815,  2110,   117,
    1194,  1808,   819,   663,   117,  1018,  1020,   117,  2194,  2161,
     143,   493,  2110,  1845,  1272,   506,     1,   663,   663,   663,
     663,   827,   400,   730,   611,   774,   775,   611,   458,   458,
       1,   828,  1194,  1826,  1826,  1826,  1826,   929,   929,  1813,
     744,   839,  1143,  1253,  1175,  1488,   136,  1489,   840,  -898,
     842,  1279,   495,     1,  -898,     2,  1339,  1344,     1,     1,
     381,  -898,   847,  1537,   382,  1538,  1011,   873,   904,   905,
     802,   803,   737,   737,   737,   737,   737,   737,   737,   737,
     242,   458,   458,   894,   117,  -898,  -898,   572,   895,  2017,
     906,   843,   117,   871,   907,  -917,   908,   744,  2068,  1006,
     744,    28,  1633,   560,    28,   903,    32,  2075,  1681,    32,
       1,   913,  1686,    38,     1,  1690,    38,     1,    28,   954,
     909,   636,   636,    32,   961,  1695,  2116,     1,  2118,  1119,
      38,   636,  1119,  1931,   564,  1119,   962,    43,    44,  1638,
      43,    44,  1011,  1119,    18,    19,  1119,   963,   611,   615,
    1164,  1168,   804,   805,    43,    44,  1795,   964,  1489,  1932,
     387,  1887,   967,  2083,  2085,  1030,  1221,  1231,  -917,  1139,
    1221,  1231,  1022,  -917,    28,    29,   501,  1901,   611,    32,
    -917,   564,  1610,   810,   811,  1614,    38,  1023,   564,  1859,
    2146,    28,  2148,   730,  2150,   564,    32,  1817,  1535,  1489,
    1536,  1178,  1024,    38,  -917,  -917,   744,  1031,  1890,   192,
      43,    44,  -917,  -917,  -917,  1134,  1833,  1063,  1836,  1838,
     400,     1,   202,  1653,  1834,   400,  1837,    43,    44,  1998,
    1069,  2172,  2173,   389,  2175,  1019,  1021,  1162,  1166,  1162,
    1166,     1,  1075,  1250,  1667,  1950,  1951,  1008,   564,  2182,
    1081,  2007,  1098,  2010,  1099,  1933,  1101,  1936,  1471,  1473,
    1472,  1474,  1157,  1159,   564,  2192,     2,  1158,  1160,   279,
     282,  1944,  1946,  -929,  1499,   115,  2019,  1105,  2021,  1106,
    2008,  1405,  2011,  1107,   658,   658,  1125,  1176,  1547,  1551,
    1127,  1128,    28,  1136,   658,  1137,   737,    32,   400,  1412,
    1413,   442,   117,   117,    38,  2020,   117,  2022,  1140,  1141,
    1142,  1186,    28,  1214,  1256,  2162,  1268,    32,   143,  1442,
    2163,  1414,  1443,  1415,    38,  1448,  1004,   374,    43,    44,
     659,   659,   458,    46,   458,  1416,  1448,  1417,  1418,  1419,
     659,  1455,  1456,  1457,  1462,  1505,  -929,  1470,    43,    44,
      45,  -929,  1507,   555,  1512,  1527,  -750,   458,  -929,   458,
     117,  -753,  1576,   679,   556,  1577,  1578,  1006,  1598,   442,
     442,     1,  1579,   442,   442,   442,  1599,  1611,  1119,  1119,
    1119,  1119,  -929,  -929,   636,  1580,  1581,  1603,  1119,  1119,
    -929,  1119,  -929,  1119,  1604,  1626,     2,  1612,  1420,  1420,
    1625,  1627,  1629,  1634,  1648,  1119,  1642,  1163,  1167,  1163,
    1167,  1643,  1644,  1666,  1139,   410,  1670,  1651,  1714,  1673,
    1680,  1699,  1710,  1712,  1715,  1215,  1733,  2044,  1725,  2044,
     610,  1726,   610,  1727,  1737,  1738,  1739,  1744,  2086,  1730,
    1751,  1121,    28,  1884,  1121,  1757,  1760,    32,   400,  1765,
     541,  1767,  1777,  1121,    38,   602,  -479,  1779,  1781,  -479,
    -479,  -479,  -479,  -479,  -479,  -479,  -479,  2087,  1783,  1798,
    1802,   663,   663,  1816,  1822,  1852,  -756,  1853,    43,    44,
    2067,   663,  1121,  1854,  1938,  1547,  1551,  1855,  1861,  2074,
     552,  1856,  1857,  1878,  1879,  1888,   645,   645,   645,   645,
    1902,  1905,  1926,  1906,  1927,  1908,  1909,  1677,  1912,  1918,
     442,   442,  1923,  1924,  1925,  -232,     1,   458,   458,   458,
     458,   458,  1826,  1826,  1993,  1939,  1997,  1942,  1943,   458,
     458,   458,   458,  1948,  2000,    18,    19,  2004,  2001,  2009,
    1119,     2,  1667,  1008,  2005,  2082,  2084,   658,  2012,   636,
     115,   636,    28,  2013,  2156,  2157,  2031,    32,  2045,  2050,
    1139,  1651,  -479,  -479,    38,    28,    29,  2057,  2059,  2060,
      32,  2061,  -479,    51,  2062,  2064,  2044,    38,  2044,  2117,
    2093,  -479,  -479,  -479,  -479,  -479,  2065,    28,    43,    44,
    2070,  2071,    32,   659,   844,  2072,   458,   458,  2073,    38,
    2076,    43,    44,  1119,  1119,  2077,  1632,  1119,  2078,  1119,
      28,    60,  1119,  2079,   108,    32,   636,  2094,  2124,  2130,
    2128,  2129,    38,    43,    44,    45,    51,  2131,    46,  2133,
    1651,  2160,  1139,   145,  2132,  2139,  1139,   924,  2144,  2044,
    2044,  2149,  2044,  2167,  2044,   402,    43,    44,  1119,  2171,
      51,  2174,   845,    51,  1164,  1168,  1164,  1168,  2179,   243,
      51,  2180,  2181,  2189,  2190,  2191,  2193,    51,    51,   602,
    1139,  1651,  2195,   945,   946,  1119,  2176,   611,  1528,   611,
      51,  2044,  2044,   368,  2044,     1,  1139,   947,    60,  1721,
    1425,  1865,  1867,   671,   672,    51,  1721,   525,    60,  2044,
     948,  1877,  1478,   393,   722,    60,    60,   951,   430,   243,
       2,   430,   658,  1517,   658,  2044,  1806,   723,  1240,   115,
     880,   243,  2014,   243,   430,   243,   430,   714,   430,   606,
    1248,  2145,   872,   278,   663,   267,  -479,  -479,  -479,  -479,
    -479,  -479,  -479,  -479,  -479,  -479,  -479,   473,   652,   269,
      70,   281,   271,   243,   243,  1992,    28,     0,   659,   473,
     659,    32,   965,   473,  -670,   430,     0,     0,    38,     0,
      28,     0,     0,     0,     0,    32,     0,   547,     0,   658,
       0,     0,    38,    28,     0,     0,    51,     0,    32,  -670,
       0,     0,    43,    44,     0,    38,     0,   555,  -670,  -670,
       0,     0,   564,   402,     0,     0,    43,    44,   556,     0,
       0,     0,   402,     0, -1034,   526, -1034,     0,   402,    43,
      44,    45,     0,     0,  1215,   659,   243,    70,     0,   243,
     243,   393,     0,     0,     0,  -670,     0,    70,     0,    51,
    -670,     0,  -479,  -479,    70,    70,     0,  -670,     0,    51,
     243,    51,  -479,   442,   442,     0,     0,  -479,  -479,  -479,
       0,  -479,  -479,  -479,  -479,  -479,     0,     0,     0,   243,
       0,  -670,  -670,  -670,     0,   243,  -670,    60,     0,   966,
       0,   964,  -670,     0,   430,     0,   476,    60,     0,    60,
       0,     0,     0,     0,     0,     0,     0,     0,   476,   663,
       0,   663,   476,     0,   564,     1,   442,   442,   752,   753,
     754,   755,   756,   757,   758,   759,   760,   761,     0,     0,
       0,     0,     0,     0,   402,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     0,     0,     0,   115,
      51,     0,     0,     0,     0,   430,     0,   430,     0,     0,
    1121,  1121,     0,   460,  2029,     0,   460,     0,  1121,     0,
    1121,  1121,     0,     0,  1121,     0,   663,     1,     0,   460,
       0,   460,  1121,   460,     0,  1121,    28,     0,     0,     0,
     243,    32,   393,   243,     0,     0,   243,    51,    38,     0,
       0,     0,     2,   874,     0,     0,     0,    51,   243,     0,
      51,   186,   187,     0,    76,     0,   766,     0,     0,   762,
       0,     0,    43,    44,    45,     0,    70,    46,  1484,     0,
       0,     0,     0,     0,   473,     0,    70,     0,    70,   430,
     430,     0,     0,     0,    51,    51,   473,     0,    28,     0,
       0,   430,     0,    32,   730,     0,   955,     0,     0,     0,
      38,   243,     0,     0,     0,   430,   430,     0,     0,     0,
       0,     0,     0,  1635,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,    43,    44,    45,   430,   430,    46,
       0,    76,   430,   430,     0,     0,   430,   430,     0,   473,
       2,    76,     0,   393,     0,     0,     0,     0,    76,    76,
     243,     0,     0,   243,     0,     0,   405,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    51,  2105,
       0,  2108,     0,   430,     0,   430,     0,   295,    51,   430,
       0,     0,     0,   296,   297,   298,     0,     0,     0,     0,
     477,     0,     0,     0,     0,     0,   299,   300,    51,     0,
       0,    51,   477,    51,     0,    51,   477,   442,     0,   442,
     301,     0,    51,   476,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,   476,     0,   311,  1636,   312,
    1637,     0,   442,     0,   442,     0,  2143,   313,   314,     0,
     315,   316,   317,   318,  -973,     0,     0,     0,     0,     0,
     402,    18,    19,     0,     0,     0,     0,  1121,  1121,  1121,
    1121,     0,     0,  1121,     0,     0,     0,  1121,  1121,     0,
    1121,     0,  1121,     0,   393,   393,   393,   393,   476,     0,
       0,    28,    29,     0,  1121,     0,    32,     0,     0,     0,
       0,     0,     0,    38,     0,     0,     0,     0,     0,     0,
       0,   730,   243,   243,   243,     0,     0,    51,     0,     0,
       0,     0,   430,     0,   405,     1,     0,    43,    44,    45,
      76,     0,     0,   405,   460,   460,   243,     0,     0,   405,
      76,     0,    76,   243,   243,   430,     0,   243,   243,     0,
       2,     0,     0,     0,   430,    60,     0,     0,     0,   115,
     460,   460,  1131,     0,     0,    51,     0,     0,   393,     0,
       0,     0,     0,     0,   393,     0,     0,   393,     0,     0,
       0,     0,   460,   460,     0,     0,     0,   460,   460,     0,
       0,   460,   460,     0,     0,     0,    28,     0,     0,     0,
       0,    32,   442,   442,   442,   442,   442,     0,    38,     0,
       0,     0,     0,     0,   442,   442,   442,   442,     0,     0,
       0,     0,   402,     0,     0,   402,   402,     0,   460,  1121,
     460,     0,    43,    44,    45,     0,     0,    46,  1121,     0,
    1121,     0,     0,     0,     0,   405,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    51,     0,     0,    51,
      51,    51,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   868,     0,     0,
     393,   442,   442,   393,   393,  1275,     0,    51,     0,   868,
       0,   344,  1121,  1121,    70,     0,  1121,     0,  1121,     0,
       0,  1121,   243,    51,     0,  1121,     0,     0,     0,     0,
      51,     0,     0,   243,     0,   430,     0,    51,  1307,  1311,
    1315,  1319,  1323,     0,     0,  1332,     0,     0,     0,   402,
       0,  1275,     0,     0,     0,     0,  1823,  1121,  -659,     0,
     473,     0,   868,     0,     0,     0,  1373,  1377,  1381,  1385,
    1389,   473,     0,  1332,     0,     0,     0,     0,     0,     0,
       0,     0,    51,  -659,  1121,     0,     0,     0,     1,     0,
      51,     0,  -659,  -659,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    51,   393,  1332,  1332,
       0,     0,     0,     2,   243,   243,     0,     0,     0,   430,
       0,     0,   115,     0,     0,     0,   243,     0,     0,  -659,
       0,     0,     0,     0,  -659,     0,     0,     0,     0,     0,
       0,  -659,     0,     0,   393,   243,   393,    18,    19,     0,
       0,     0,   243,   290,     0,     1,   291,   100,   292,    28,
     293,   294,     0,   639,    32,  -659,  -659,  -659,     0,     0,
    -659,    38,     0,  1824,     0,   964,  -659,    28,    29,     0,
       2,     0,    32,     0,     0,     0,     0,   430,   430,    38,
       0,   430,   430,   430,     0,    43,    44,     0,     0,   476,
      46,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     476,    51,   430,    43,    44,    45,    51,   295,     0,   740,
       0,     0,    51,   296,   297,   298,     0,     0,    51,     0,
       0,     0,     0,     0,    51,     0,   299,   300,     0,     0,
       0,   405,     0,     0,     0,     0,     0,     0,     0,    82,
     301,     0,   393,     0,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,    76,   312,
       0,     0,  2090,  2091,  1009,     0,     0,   313,   314,     0,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   125,     0,     0,     0,     0,
     460,   460,     0,     0,     0,     0,     0,     0,     0,   402,
     393,   393,   393,   393,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   158,   176,   189,   430,   430,
       0,     0,     0,   243,   225,   243,    82,     0,     0,     0,
      51,     0,     0,    82,    82,     0,     0,     0,     0,    51,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   460,     0,   243,   393,    51,     0,
       0,     0,     0,  1630,   189,   386,   388,   390,   391,     0,
       0,     0,     0,     0,   464,     0,   243,   464,     0,     0,
       0,     0,     0,   243,     0,     0,     0,     0,     0,     0,
     464,  1655,   464,   405,   464,     0,   405,   405,  1662,     0,
       0,     0,   243,   393,     0,     0,     0,     0,     0,   243,
     393,     0,     0,   243,   393,     0,   524,   388,   390,     0,
       0,  1010,   460,   460,     0,     0,   460,   460,   460,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   868,     0,     0,     0,     0,     0,  1275,
       0,   553,   568,     0,   868,  1275,     0,     0,     0,     0,
     441,     0,     0,   441,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   441,     0,   441,     0,
     441,     0,     0,  1095,     0,     0,     0,     0,     0,     0,
       0,     0,   604,     0,     0,     0,     0,     0,     0,     0,
     405,     0,     0,     0,     0,   176,     0,    48,     0,     0,
       0,     0,     0,     0,     0,   677,   639,    82,     0,     0,
       0,     0,     0,     0,     0,   402,     0,     0,   402,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   639,   639,   639,   639,
       0,   915,   918,     0,     0,    51,    51,     0,     0,     0,
       0,     0,     0,   460,   460,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   915,   918,     0,
       0,     0,     0,   393,   164,     0,   393,     0,     0,     0,
       0,     0,     0,     0,    48,     0,     0,   402,     0,   915,
     918,    48,    48,     0,   915,   918,     0,     0,   915,   918,
       0,  1241,   402,     0,     0,  1245,     0,     0,     0,   386,
     388,   390,     0,     0,     0,     0,     0,     0,     0,     0,
     393,     0,     0,     0,    51,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   740,     0,   855,     0,     0,     0,
       0,     0,     0,   464,     0,   393,     0,     0,  1284,     0,
       0,   430,   430,     0,     0,   125,   243,   243,   243,   243,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1338,     0,     0,     0,     0,
     740,     0,     0,  1349,     0,   464,   464,     0,     0,     0,
     931,     0,     0,     0,   942,     0,     0,   464,     0,     0,
       0,     0,     0,  1402,   430,   430,   158,     0,     0,     0,
     558,   464,   464,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    51,     0,     0,     0,
       0,     0,     0,   464,   464,     0,     0,     0,   464,   464,
     243,   393,   464,   464,     0,     0,   189,   189,   189,     0,
     405,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   164,   189,   189,     0,     0,     0,     0,
       0,   441,   441,   164,     0,    48,     0,     0,     0,   464,
       0,   464,     0,   949,  1045,   402,  1054,     0,     0,     0,
     402,     0,     0,     0,     0,     0,     0,   441,   441,   243,
       0,   390,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   441,
     441,     0,     0,     0,   441,   441,     0,     0,   441,   441,
       0,   402,   402,     0,   402,   402,     0,     0,     0,   402,
     402,   402,   402,   393,     0,    51,     0,     0,   393,     0,
       0,   402,   402,   402,   402,   402,   402,   402,   402,     0,
       0,     0,     0,   402,     0,   441,    51,   441,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1010,     0,   460,   460,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1179,     0,     0,
       0,     0,     0,   677,     0,     0,     0,     0,     0,     0,
       0,   393,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   243,   393,  1223,
       0,     0,     0,  1223,     0,     0,     0,     0,     0,   460,
     460,     0,     0,     0,     0,   430,     0,   430,   558,     0,
       0,   855,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   405,     0,     0,   405,
     430,     0,   430,     0,     0,     0,  1954,   639,     0,     0,
     639,  1957,  1959,  1963,  1967,  1969,  1973,     0,     0,   639,
    1977,  1981,  1985,  1989,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   402,     0,     0,     0,     0,     0,     0,
       0,  1649,  1650,     0,     0,     0,     0,     0,   639,     0,
    1284,     0,     0,     0,  1660,     0,     0,  1349,     0,  1664,
       0,     0,   639,   639,   639,   639,     0,     0,   405,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   459,     0,   405,   459,     0,     0,     0,     0,     0,
       0,   393,     0,   430,     0,   402,     0,   459,     0,   459,
       0,   459,     0,  1437,     0,     0,     0,     0,   740,     0,
       0,     0,     0,     0,   740,     0,     0,   158,   855,  1450,
       0,     0,     0,     0,     0,     0,  1460,     0,     0,   855,
       0,  1468,     0,     0,     0,     0,     0,     0,     0,   915,
     918,     0,     0,   915,   918,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     430,   430,   430,   430,   430,   243,   243,     0,  1746,     0,
       0,   125,   430,   430,   430,   430,     0,     0,     0,     0,
       0,  1497,     0,     0,     0,     0,   568,     0,     0,     0,
       0,     0,   125,     0,     0,     0,     0,     0,     0,     0,
       0,   164,   931,     0,   637,     0,  1188,     0,     0,     0,
       0,     0,     0,     0,     0,   464,     0,     0,     0,     0,
     460,     0,   460,     0,   388,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1188,   430,
     430,     0,     0,     0,     0,   460,     0,   460,   931,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   405,     0,     0,     0,
       0,   405,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   464,   464,     0,     0,   464,   464,   464,
       0,     0,     0,     0,  1573,   386,     0,     0,     0,     0,
       0,   441,     0,     0,     0,   390,   213,     0,     0,     0,
       0,     0,  1961,  1965,     0,  1971,  1975,     0,     0,     0,
    1979,  1983,  1987,  1991,     0,     0,     0,     0,     0,     0,
       0,     0,   405,   405,   405,   405,   405,   405,   405,   405,
     558,     0,     0,     0,   405,     0,     0,     0,   213,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   441,
     441,     0,     0,   441,   441,   441,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   558,     0,     0,
       0,     0,     0,     0,   558,   916,   919,     0,     0,     0,
     120,   558,   459,   459,     0,   460,   460,   460,   460,   460,
       0,     0,     0,     0,     0,     0,     0,   460,   460,   460,
     460,   916,   919,     0,   464,   464,     0,     0,   459,   459,
       0,   174,   120,     0,     0,     0,  1010,     0,     0,   224,
       0,     0,     0,   916,   919,   855,     0,     0,   916,   919,
     459,   459,   916,   919,   558,   459,   459,     0,     0,   459,
     459,     0,   855,     0,  1704,     0,   996,  1010,     0,     0,
     558,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     120,     0,  1223,     0,   460,   460,     0,     0,     0,  1223,
       0,     0,     0,     0,   405,     0,   459,     0,   459,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     441,   441,     0,     0,     0,     0,   639,   639,     0,     0,
       0,     0,     0,     0,   639,     0,   639,   639,     0,     0,
     639,   522,   290,     0,     1,   291,   100,     0,   639,     0,
       0,   639,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   405,     0,     0,     2,
       0,     0,     0,     0,     0,     0,     0,   637,     0,     0,
       0,     0,     0,     0,     0,     0,   585,     0,     0,   587,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   823,     0,     0,   295,   637,   637,   637,
     637,     0,   296,   297,     0,     0,     0,   120,     0,     0,
       0,     0,     0,     0,     0,     0,   300,     0,     0,     0,
     174,     0,     0,   915,   918,     0,     0,     0,     0,   301,
    1010,     0,     0,   302,   303,   304,   305,   306,   307,   308,
     870,     0,  1952,     0,     0,     0,   698,     0,     0,     0,
     877,     0,     0,   884,     0,  1746,   313,   314,     0,     0,
    1660,     0,     0,  1664,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   915,   918,     0,     0,
       0,   996,     0,     0,     0,     0,  1784,   996,   937,     0,
     996,     0,     0,     0,   953,     0,     0,     0,     0,     0,
    1793,     0,     0,     0,  1671,     0,     0,     0,     0,     0,
     386,     0,     0,  1674,     0,     0,     0,   189,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   120,     0,  1010,     0,  1807,     0,
     568,     0,     0,     0,     0,     0,     0,  1010,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   383,     0,
       0,     0,     0,     0,     0,     0,     0,   464,   464,     0,
       0,   213,     0,   639,   639,   639,   639,     0,     0,   639,
     120,   213,     0,   639,   639,     0,   639,     0,   639,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     639,   213,     0,     0,   213,     0,   213,     0,   213,   383,
    2052,  2053,     0,     0,     0,     0,     0,     0,     0,   224,
     464,   464,     0,   386,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   568,     0,     0,   566,     0,     0,   459,   459,
       0,     0,     0,   441,   441,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   120,   120,   120,     0,  1003,     0,     0,   587,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     120,   120,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   441,   441,   674,   120,
       0,     0,   459,     0,     0,     0,     0,     0,     0,  1010,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   639,     0,   996,     0,   996,
       0,     0,     0,     0,   639,     0,   639,     0,     0,     0,
       0,     0,     0,  1920,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   916,   919,     0,     0,   916,   919,     0,
     459,   459,     0,     0,   459,   459,   459,     0,     0,     0,
       0,     0,     0,     0,     0,  1010,     0,     0,   639,   639,
       0,     0,   639,     0,   639,     0,     0,   639,   558,     0,
       0,   639,   841,     0,     0,     0,     0,  2147,   846,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   224,     0,     0,  1010,     0,   329,     0,     0,
       0,     0,     0,   639,     0,   996,     0,     0,   637,     0,
       0,   637,   823,   823,   823,     0,     0,     0,     0,     0,
     637,   401,     0,     0,     0,     0,     0,     0,     0,     0,
     639,   464,     0,   464,     0,     0,     0,     0,     0,     0,
     213,     0,     0,     0,     0,     0,     0,     0,     0,   637,
       0,     0,     0,   928,     0,     0,   464,     0,   464,     0,
       0,   609,     0,   637,   637,   637,   637,     0,   390,     0,
     558,     0,   915,   918,     0,   915,   918,     0,     0,     0,
       0,   459,   459,   401,   915,   918,   915,   918,     2,   194,
     195,   196,   197,   198,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,    18,    19,   236,   237,    22,    23,
      24,     0,     0,  1002,     0,  1491,  1007,   441,     0,   441,
       0,     0,     0,     0,     0,     0,   238,     0,     0,  1002,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,   441,     0,   441,   239,    38,   240,     0,   566,
       0,   915,   918,     0,     0,     0,     0,     0,     0,     0,
     241,     0,   566,     0,     0,     0,   996,     0,     0,     0,
      43,    44,     0,   996,     0,     0,     0,   996,     0,   401,
       0,     0,   242,     0,   699,   701,     0,     0,   401,     0,
       0,     0,     0,     0,   401,     0,   120,    80,     0,     0,
       0,     0,     0,     0,     0,   329,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   464,   464,   464,   464,
     464,   401,     0,     0,     0,     0,   401,     0,   464,   464,
     464,   464,     0,     0,     0,     0,   120,     0,     0,     0,
       0,     0,     0,    80,   213,     0,     0,     0,     0,   213,
       0,     0,     0,     0,   585,  1593,   587,   120,     0,     0,
       0,  1593,     0,   401,     0,   401,     0,   213,     0,     0,
     674,     0,     0,     0,    80,    80,   674,     0,     0,     0,
       0,     0,    80,     0,    80,     0,     0,     0,     0,     0,
       0,    80,    80,     0,     0,   464,   464,     0,     0,     0,
     401,     0,   441,   441,   441,   441,   441,     0,     1,     0,
       0,     0,     0,     0,   441,   441,   441,   441,     0,     0,
       0,     0,    80,    80,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,   120,
     120,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    27,     0,     0,    80,     0,     0,     0,     0,    28,
      29,   441,   441,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,   996,     0,     0,     0,     0,     0,     0,
       0,   213,     0,     0,     0,    40,     0,     0,     0,     0,
       0,   401,   821,     0,     0,    43,    44,   916,   919,    80,
       0,     0,    80,     0,   459,   459,  1409,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   996,     0,   996,     0,     0,   401,     0,     0,
      80,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   674,    80,     0,     0,     0,     0,     0,  1459,
     916,   919,     0,    80,     0,    80,     0,   459,   459,   329,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   585,     0,   587,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   401,     0,     0,
       0,     0,     0,     0,   996,     0,     0,   637,   637,   193,
       0,     1,     0,     0,  1495,   637,     0,   637,   637,   566,
       0,   637,     0,     0,     0,     0,     0,     0,     0,   637,
       0,     0,   637,     0,     0,   928,     2,   194,   195,   196,
     197,   198,     8,     9,    10,   554,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,   401,    80,     0,     0,
    1190,     0,     0,   199,    27,     0,     0,     0,     0,     0,
       0,   928,    28,    29,     0,     0,     0,    32,   823,   823,
      35,    36,     0,    37,    38,    39,     0,   329,     0,     0,
       0,   329,  1246,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,    80,     0,     0,   401,     0,    43,    44,
      45,     0,   401,   555,  1041,   401,     0,     0,   383,     0,
       0,     0,     0,     0,   556,     0,     0,   566,     0,   566,
       0,     0,     0,     0,   329,     0,     0,     0,     0,     0,
     401,   401,   401,   401,   401,   401,   401,     0,     0,   401,
     401,     0,   401,   401,   401,   401,   401,   401,   401,   401,
       0,   329,     0,     0,     0,     0,     0,     0,     0,   329,
     401,   401,   401,   401,   401,   401,   401,   401,   401,   401,
     401,   401,   401,   401,   401,   401,   401,   401,     0,   329,
       0,   996,     0,     0,    80,    80,    80,     0,    80,     0,
       0,    80,     0,     0,     0,     0,     0,     0,   459,     0,
     459,     0,    80,    80,    80,     0,     0,     0,   401,     0,
       0,   401,   401,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    80,   459,     0,   459,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   674,
       0,   674,     0,     0,   637,   637,   637,   637,     0,     0,
     637,     0,   120,     0,   637,   637,     0,   637,     0,   637,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   637,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   401,     0,     0,   401,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   401,     0,     0,     0,     0,
       0,     0,     0,     0,   401,     0,     0,     0,     0,     0,
       0,     0,  -888,  -888,  -888,     0,  -888,  -888,     0,   347,
       0,     0,     0,     0,     0,    80,     0,     0,     0,     0,
       0,    80,   401,     0,   401,     0,     0,     0,   120,     0,
       0,     0,     0,   404,     0,     0,     0,     0,   213,     0,
       0,     0,     0,     0,     0,     0,   916,   919,     0,   916,
     919,     0,     0,   459,   459,   459,   459,   459,   916,   919,
     916,   919,     0,     0,     0,   459,   459,   459,   459,  -888,
    -888,  -888,     0,     0,     0,     0,   637,     0,     0,     0,
       0,     0,  -888,     0,     0,   637,     0,   637,     0,     0,
     401,     0,     0,     0,     0,   404,  -888,     0,     0,     0,
    -888,  -888,  -888,  -888,  -888,  -888,  -888,  -888,     0,     0,
       0,   130,     0,     0,     0,  -888,     0,     0,     0,  -888,
       0,     0,     0,  -888,   372,   916,   919,  -888,  -888,  -888,
     401,     0,   459,   459,     0,     0,     0,     0,     0,   637,
     637,   401,     0,   637,     0,   637,     0,     0,   637,     0,
       0,     0,   637,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   329,   329,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   674,   637,     0,     0,     0,     0,     0,
       0,   404,     0,  1797,     0,     0,   700,   702,     0,     0,
     404,     0,     0,     0,     0,     0,   404,     0,     0,     0,
       0,   637,     0,     0,     0,     0,     0,   347,     0,    80,
       0,  1459,     0,   566,     0,     0,  1810,     0,     0,  1007,
       0,     0,     0,   404,     0,     0,     0,     0,   404,     0,
       0,     0,     0,     0,     0,   401,   290,   401,     1,   291,
     100,   292,     0,   293,   294,     0,     0,     0,     0,    80,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   401,
       0,     0,     0,     2,     0,   404,     0,   404,     0,     0,
      80,     0,   115,     0,     0,     0,     0,   401,     0,     0,
       0,   401,     0,     0,   329,     0,     0,     0,   401,     0,
       0,     0,   401,     0,   120,     0,   841,     0,     0,     0,
     295,     0,   404,     0,   566,     0,   296,   297,   298,    28,
       0,     0,     0,     0,    32,   566,     0,     0,     0,   299,
     300,    38,     0,     0,     0,     0,     0,   290,     0,     1,
     291,   100,   292,   301,   293,   294,     0,   302,   303,   304,
     305,   306,   307,   308,   309,    43,    44,   881,     0,     0,
     882,   724,   312,     0,     2,     0,   359,     0,     0,     0,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,    80,    80,     0,     0,     0,     0,     0,   253,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     299,   300,     0,   404,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     0,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,   542,   312,  1148,     0,  1149,     0,     0,   404,
       0,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,   401,     0,     0,   401,     0,     0,     0,     0,     0,
       0,     0,     0,   253,   253,     0,     0,     0,     0,     0,
       0,   347,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -889,     0,     0,  -889,  -889,  -889,     0,  -889,  -889,
       0,     0,     0,     0,    80,     0,    80,     0,   401,   404,
       0,     0,     0,     0,   674,   674,     0,     0,  1999,   401,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   401,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   401,   253,
     253,   253,   329,     0,     0,  -889,     0,   401,     0,   401,
       0,  -889,  -889,  -889,   359,     0,     0,     0,     0,     0,
     253,     0,  1002,     0,  -889,     0,   401,     0,   404,     0,
       0,     0,  1191,     0,     0,     0,     0,     0,  -889,     0,
       0,     0,  -889,  -889,  -889,  -889,  -889,  -889,  -889,  -889,
       0,     0,     0,     0,     0,     0,     0,  -889,  -889,   347,
    -889,  -889,  -889,   347,  1247,  -889,  -889,     0,  -889,  -889,
    -889,  -889,   542,     0,   542,     0,     0,     0,   404,   401,
       0,     0,     0,     0,   404,     0,     0,   404,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   347,     0,     0,     0,
       0,     0,   404,   404,   404,   404,   404,   404,   404,     0,
       0,   404,   404,     0,   404,   404,   404,   404,   404,   404,
     404,   404,     0,   347,     0,     0,     0,     0,     0,     0,
       0,   347,   404,   404,   404,   404,   404,   404,   404,   404,
     404,   404,   404,   404,   404,   404,   404,   404,   404,   404,
       0,   347,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   401,     0,     0,     0,   401,   401,   401,     0,     0,
     404,     0,     0,   404,   404,     0,   329,     0,     0,     0,
       0,   401,   401,     0,     0,     0,     0,     0,   329,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     998,     0,     0,     0,     0,     0,     0,   401,   401,     0,
     401,   401,     0,     0,     0,   401,   401,   401,   401,     0,
       0,     0,     0,     0,     0,    80,     0,   401,   401,   401,
     401,   401,   401,   401,   401,     0,   542,     0,     0,   401,
       0,     0,     0,   999,   404,     0,     0,   404,     0,     0,
     253,     0,     0,   253,     0,     0,   401,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   359,     0,
       0,     0,     0,     0,     0,     0,     0,   404,     0,     0,
       0,     0,     0,     0,     0,     0,   404,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   542,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   404,     0,   404,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    80,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   329,   329,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   253,   253,   253,   253,     0,     0,
       0,     0,   404,     0,     0,     0,     0,     0,     0,   401,
     401,     0,     0,     0,     0,     0,   359,     0,     0,   401,
     359,     0,   253,   253,   253,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   998,     0,     0,     0,     0,
       0,   998,   404,     0,   998,     0,  1213,     0,     0,     0,
       0,     0,     2,   404,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   359,     0,     0,     0,     0,     0,     0,
       0,   401,     0,     0,     0,   401,   401,     0,   999,   347,
     347,     0,     0,     0,   999,     0,     0,   999,     0,   295,
     359,     0,     0,     0,     0,   296,   297,   298,   359,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,   359,     0,
       0,     0,   301,     0,     0,     0,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
    1122,   312,  1129,     0,     0,     0,   735,     0,     0,   313,
     314,     0,   315,   316,   317,   318,     0,   404,     0,   404,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1161,  1165,     0,     0,     0,     0,     0,     0,
       0,   404,     0,   329,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   404,
       0,   329,     0,   404,     0,     0,   347,     0,     0,     0,
     404,     0,     0,     0,   404,     0,     0,     0,     0,     0,
       0,   998,     0,     0,   542,     0,     0,    80,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   542,     0,     0,     0,     1,     0,     0,
       0,     0,     0,     0,     0,     0,    68,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   998,     2,   998,     0,     0,     0,     0,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,   111,     0,     0,     0,     0,     0,     0,     0,     0,
      27,     0,     0,     0,   999,   999,   999,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,   172,     0,     0,     0,     0,     0,   542,
       0,     0,   249,    68,    40,     0,     0,     0,     0,     0,
      68,    68,     0,     0,    43,    44,    45,     0,     0,   854,
       0,     0,     0,   404,     0,     0,   404,     0,   370,     0,
     556,     0,     0,     0,     0,     0,     0,     0,     0,   998,
       0,     0,     0,     0,     0,     0,   249,     0,     0,     0,
     542,     0,   474,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   474,     0,   249,     0,   474,     0,
     404,     0,     0,     0,     0,     0,   359,   359,     0,     0,
       0,   404,   999,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   404,   249,   249,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     404,     0,     0,     0,   347,     0,     0,     0,     0,   404,
       0,   404,     0,     0,     0,     0,     0,     0,     0,   563,
       0,     0,     0,     0,     0,     0,     0,     0,   404,     0,
     253,   253,   253,   253,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   542,     0,     0,     0,
       0,     0,     0,   253,     0,   253,     0,     0,     0,   601,
       0,     0,   249,   249,   249,     0,     0,     0,   542,     0,
       0,     0,   172,     0,     0,     0,     0,     0,     0,     0,
       0,   404,   172,   249,    68,     0,     0,     0,     0,     0,
     998,     0,     0,   359,     0,     0,     0,   998,     0,     0,
       0,   998,   707,     0,     0,     0,     0,     0,   707,     0,
       0,     0,     0,     0,     0,     0,     0,   729,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   999,   999,     0,     0,     0,     0,     0,   999,
     999,     0,     0,   999,   999,     0,     0,     0,     0,     0,
       0,  1609,     0,     0,  1613,     0,     0,     0,     0,     0,
       0,     0,     0,  1628,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   404,     0,     0,     0,   404,   404,   404,
       0,     0,  1652,     0,     0,     0,     0,     0,   347,     0,
       0,     0,     0,   404,   404,     0,  1161,  1165,  1161,  1165,
     347,     0,     0,   601,     0,   249,   249,     0,     0,   866,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   404,
     404,   866,   404,   404,     0,     0,     0,   404,   404,   404,
     404,     0,     0,     0,     0,     0,     0,     0,     0,   404,
     404,   404,   404,   404,   404,   404,   404,     0,     0,     0,
       0,   404,     0,     0,     0,     0,   193,   563,     1,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   404,     0,
       0,     0,     0,     0,   959,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,   998,     0,     0,
       0,     0,     0,     0,     0,     0,   249,     0,   542,     0,
     199,    27,     0,   249,     0,     0,   249,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,     0,     0,     0,     0,     0,
     999,   359,     0,     0,     0,    40,   998,     0,   998,     0,
       0,     0,     0,     0,     0,    43,    44,    45,   347,   347,
     854,  1041,     0,     0,     0,   998,     0,     0,     0,     0,
       0,   556,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   404,   404,     0,     0,     0,     0,     0,     0,     0,
       0,   404,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1135,     0,     0,     0,     0,   998,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   249,   249,   249,
     249,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   404,     0,     0,     0,   404,   404,     0,
     999,   999,     0,     0,     0,   249,   249,   249,     0,     0,
     172,     0,     0,     0,     0,  1193,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   249,
       0,     0,     0,     0,     0,     0,  1220,  1230,   729,     0,
    1220,  1230,     0,     0,     0,     0,     0,  1193,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     1,  1252,     0,
       0,   249,     0,     0,   542,     0,   542,   249,     0,     0,
     249,     0,     0,     0,     0,   359,     0,     0,     0,     0,
     542,   542,     2,     0,     0,     0,     0,   359,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,   347,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      27,     0,     0,   347,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,   563,
       0,     0,     0,     0,    40,   998,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,     0,     0,     0,     0,
       0,     0,     0,   249,     0,     0,   249,   249,     0,   248,
    1864,  1866,     0,     0,     0,     0,     0,     0,  1873,     0,
    1876,  1609,     0,     0,  1613,  1447,   563,   999,   999,     0,
       0,     0,  1652,   563,     0,  1889,  1447,   111,   729,     0,
     563,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   248,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   248,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   359,   359,     0,     0,     0,
       0,     0,     0,   563,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   248,   248,     0,     0,     0,     0,   563,
     249,     0,     0,     0,     0,     0,     0,   249,   249,   542,
       0,     0,     0,     0,     0,     0,     0,     0,   542,   249,
       0,     0,     0,     0,     0,     0,   562,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   249,   249,   249,
       0,     0,     0,     0,     0,   601,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   600,     0,     0,   248,
     248,   248,     0,     0,   542,   542,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     248,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   706,
       0,     0,     0,     0,     0,   706,     0,     0,   738,     0,
       0,     0,     0,     0,   728,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   765,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   249,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2024,  2025,  2026,
    2027,     0,     0,  2028,  1135,     0,     0,  1864,  1866,     0,
    1873,     0,  1876,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   359,     0,  2037,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     359,     0,     0,   249,   249,   249,   249,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     600,     0,   248,   248,     0,     0,   249,     0,   249,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1676,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   601,
     249,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   562,     0,     0,     0,     0,  1720,
     251,     0,     0,     0,     0,     0,  1720,     0,     0,     0,
       0,     0,     0,     0,     0,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   249,   249,     0,     0,     0,
       0,     0,   249,   249,     0,     0,   249,   249,     0,  2028,
       0,     0,     2,     0,   251,     0,     0,     0,  2104,     0,
    2107,     0,     0,   248,     0,     0,     0,     0,     0,     0,
     248,     0,     0,   248,   251,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,     0,     0,
       0,     0,     0,     0,   251,   251,     0,     0,   299,   300,
       0,     0,  2135,  2136,     0,     0,  2104,     0,  2107,     0,
       0,  2140,   301,     0,     0,  2142,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,   565,     0,   311,
    1153,   312,     0,     0,  1154,     0,     0,     0,     0,   313,
     314,  1753,   315,   316,   317,   318,     0,  2142,     0,     0,
    1130,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   603,     0,     0,
     251,   251,   251,     0,  2178,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   248,   248,   248,   248,     0,     0,
       0,   251,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   249,     0,     0,   249,
     709,     0,   248,   248,   248,     0,   709,     0,     0,     0,
       0,     0,  1192,     0,     0,   731,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   248,     0,     0,     0,
       0,     0,     0,  1219,  1229,   728,     0,  1219,  1229,     0,
       0,     0,     0,   249,  1192,     0,     0,   563,     0,     0,
       0,     0,     0,     0,     0,  1251,     0,     0,   248,     0,
       0,     0,     0,   738,   248,     0,     0,   248,   249,     0,
       0,     0,     0,     0,     0,     0,     0,  1283,     0,   249,
     249,   249,   249,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1306,  1310,  1314,  1318,
    1322,     0,     0,  1331,  1337,     0,     0,     0,     0,   738,
       0,   603,  1348,   251,   251,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1372,  1376,  1380,  1384,  1388,     0,
       0,  1331,  1401,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   562,     0,     0,   563,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   249,   249,   565,  1331,  1331,     0,     0,
     248,     0,     0,   248,   248,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   562,     0,     0,     0,     0,     0,     0,
     562,     0,     0,     0,     0,   728,     0,   562,     0,     0,
       0,     1,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   249,     0,   251,     0,     0,     0,     0,     0,
       0,   251,     0,     0,   251,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,   554,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
     562,     0,     0,     0,     0,     0,   249,     0,     0,     0,
       0,   249,     0,     0,    27,     0,   562,   248,     0,     0,
       0,     0,    28,    29,   248,   248,     0,    32,     0,   729,
      35,    36,     0,    37,    38,    39,   248,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,   248,   248,   248,     0,    43,    44,
      45,     0,   600,   555,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   556,     0,   557,     0,     0,     0,
       0,     0,     0,     0,   249,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   251,   251,   251,   251,     0,
     249,   249,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   251,   251,   251,     0,     0,     0,     0,
       0,     0,     0,  1195,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   251,     0,     0,
       0,     0,     0,     0,  1222,  1232,   731,     0,  1222,  1232,
       0,     0,   248,     0,     0,  1195,     0,     0,     0,     0,
       0,  1130,     0,     0,     0,     0,  1254,     0,     0,   251,
       0,     0,     0,     0,     0,   251,     0,     0,   251,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1283,
       0,     0,     0,     0,     0,     0,  1348,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     248,   248,   248,   248,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   249,     0,   729,     0,     0,     0,
       0,     0,     0,   248,     0,   248,     0,     0,   290,     0,
       1,   291,   100,   292,     0,   293,   294,   738,     0,  1675,
       0,     0,     0,   738,     0,     0,     0,   565,     0,     0,
       0,     0,     0,     0,     0,     2,   600,   248,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   251,     0,     0,   251,   251,  1719,     0,     0,     0,
       0,     0,     0,  1719,     0,     0,     0,     0,   249,   249,
       0,     0,   295,     0,   565,     0,     0,  1745,   296,   297,
     298,   565,   248,   248,   246,     0,   731,     0,   565,   248,
     248,   299,   300,   248,   248,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     0,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,  1153,   312,     0,     0,  1758,   246,     0,
       0,  1759,   313,   314,   472,   315,   316,   317,   318,     0,
       0,   565,     0,     0,     0,     0,   472,     0,   246,     0,
     472,     0,     0,     0,     0,     0,     0,   565,   251,     0,
       0,     0,     0,     0,     0,   251,   251,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   251,   246,   246,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   251,   251,   251,     0,     0,
       0,     0,     0,   603,     0,     0,     0,     0,     0,     0,
       0,   561,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   599,     0,     0,   246,   246,   246,     0,     0,     0,
       0,     0,   247,   248,     0,     0,   248,     0,     0,   290,
       0,     1,   291,   100,   292,   246,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   705,     0,     2,     0,     0,     0,
     705,     0,     0,   251,     0,     0,   247,     0,     0,     0,
     248,     0,   247,     0,   562,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   247,     0,   247,     0,   247,     0,
       0,     0,     0,   295,     0,   248,     0,     0,     0,   296,
     297,   298,     0,     0,     0,     0,   248,   248,   248,   248,
       0,     0,   299,   300,     0,     0,   247,   247,     0,     0,
       0,   251,   251,   251,   251,     0,   301,     0,     0,     0,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,   251,   312,   251,     0,  1149,     0,
       0,     0,     0,   313,   314,  1752,   315,   316,   317,   318,
    1678,     0,     0,     0,     0,   599,     0,   246,   246,     0,
       0,   865,     0,     0,     0,     0,   562,   603,   251,     0,
       0,     0,     0,   865,     0,     0,     0,     0,     0,   247,
     248,   248,   247,   247,   247,     0,     0,  1722,   290,     0,
       1,   291,   100,   292,  1722,   293,   294,     0,     0,     0,
       0,     0,     0,   247,     0,     0,     0,     0,     0,   561,
       0,     0,     0,   251,   251,     2,     0,     0,     0,     0,
     251,   251,   247,     0,   251,   251,   958,     0,   247,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   248,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,     0,     0,     0,     0,     0,     0,     0,   246,     0,
       0,   299,   300,     0,     0,   246,     0,     0,   246,     0,
       0,     0,     0,   248,     0,   301,     0,     0,   248,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,  1153,   312,     0,   728,  1758,     0,     0,
       0,  1766,   313,   314,  1745,   315,   316,   317,   318,  1956,
    1958,  1962,  1966,  1968,  1972,     0,     0,     0,  1976,  1980,
    1984,  1988,     0,   247,     0,   247,   247,     0,     0,   247,
    1958,  1962,  1968,  1972,  1976,  1980,  1984,  1988,     0,     0,
       0,   247,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   248,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   248,   248,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   251,     0,     0,   251,     0,   246,
     246,   246,   246,     0,   247,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   246,   246,   246,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   251,     0,     0,     0,   565,   247,     0,     0,     0,
       0,   246,     0,   247,     0,     0,   247,     0,  1218,  1228,
       0,     0,  1218,  1228,     0,     0,   251,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   251,   251,   251,
     251,     0,     0,   246,     0,     0,     0,     0,     0,   246,
       0,     0,   246,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   248,     0,   728,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   565,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   251,   251,     0,     0,     0,     0,     0,     0,     0,
       0,   561,     0,     0,     0,     0,     0,   247,   247,   247,
     247,     0,     0,     0,     0,   248,   248,     0,     0,     0,
       0,     0,     0,     0,     0,   246,     0,     0,   246,   246,
       0,     0,     0,     0,     0,   247,   247,   247,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1446,   561,     0,
     251,     0,     0,     0,     0,   561,     0,     0,  1446,   247,
       0,     0,   561,     0,     0,     0,   247,   247,     0,     0,
     247,   247,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   247,     0,     0,   251,     0,     0,   247,     0,   251,
     247,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   561,     0,   731,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   561,   246,     0,     0,     0,     0,     0,     0,   246,
     246,     0,     0,     0,     0,     0,     0,     0,     0,   252,
       0,   246,     0,     0,     0,     0,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,     0,     0,     0,   246,
     246,   246,   251,     0,     0,     0,     0,   599,     0,     0,
       0,     0,     0,     2,     0,     0,     0,     0,   251,   251,
       0,     0,     0,   252,     0,     0,     0,     0,     0,   252,
       0,     0,     0,   247,     0,     0,   247,   247,     0,     0,
       0,   252,     0,   252,     0,   252,     0,     0,     0,     0,
     295,     0,     0,     0,     0,   247,   296,   297,   298,     0,
       0,     0,     0,     0,     0,     0,   247,     0,     0,   299,
     300,     0,     0,   252,   252,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     0,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,  1153,   312,     0,     0,  1154,     0,   246,     0,     0,
     313,   314,  1763,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,     0,     0,
     247,     0,     0,     0,     0,     0,   252,   247,   247,   252,
     252,   252,   251,     0,   731,     2,     0,     0,     0,   247,
       0,     0,     0,     0,     0,   246,   246,   246,   246,     0,
     252,     0,     0,     0,     0,     0,     0,   247,   247,   247,
       0,     0,     0,     0,     0,   247,     0,     0,   246,   252,
     246,     0,   295,     0,     0,   252,     0,     0,   296,   297,
     298,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,   599,   246,     0,     0,   301,   251,   251,     0,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,  1718,   311,  1153,   312,     0,     0,  1758,  1718,     0,
       0,  1778,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,     0,     0,   246,   246,     0,
       0,     0,     0,     0,   246,   246,     0,     0,   246,   246,
       0,     0,     0,     0,     0,   247,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     252,     0,   252,   252,     0,     0,   252,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   252,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   247,   247,   247,   247,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   290,     0,     1,
     291,   100,   292,     0,   293,   294,   247,     0,   247,     0,
       0,   252,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   247,
     247,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   252,     0,     0,     0,     0,     0,   247,
     252,   295,     0,   252,     0,     0,   247,   296,   297,   298,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     299,   300,     0,     0,     0,   247,   247,     0,   246,     0,
       0,   246,   247,   247,   301,     0,   247,   247,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,  1153,   312,     0,     0,  1758,     0,     0,     0,
    1782,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,     0,   246,     0,     0,     0,   561,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     246,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   246,   246,   246,   246,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   252,   252,   252,   252,     0,     0,
       0,     0,     0,    85,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   252,   252,   252,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   252,     0,   114,   126,
       0,   561,     0,   252,   252,     0,     0,   252,   252,     0,
       0,     0,     0,     0,     0,   246,   246,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   247,     0,   252,   247,
     177,   126,     0,     0,   252,   222,     0,   252,     0,     0,
      85,     0,     0,     0,     0,     0,     0,    85,    85,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   371,     0,     0,     0,     0,
       0,     0,     0,   247,   246,     0,     0,     0,   380,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   247,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   247,
     247,   247,   247,     0,     0,     0,     0,     0,   246,     0,
       0,     0,     0,   246,     0,     0,     0,     0,     0,   521,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     252,     0,   537,   252,   252,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   252,     0,     0,     0,   570,     0,     0,     0,
       0,     0,     0,   252,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   644,     0,
       0,     0,     0,   247,   247,     0,   246,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   126,     0,     0,     0,
       0,     0,   246,   246,     0,     0,     0,     0,     0,   177,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   678,
       0,    85,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   727,     0,     0,     0,     0,     0,   252,     0,     0,
       0,     0,   247,     0,   252,   252,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   252,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1743,     0,     0,
       0,     0,     0,     0,   252,   252,   252,     0,     0,     0,
       0,     0,   252,     0,     0,     0,   247,     0,     0,     0,
       0,   247,     0,     0,     2,   194,   195,   196,   197,   198,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
      18,    19,   236,   237,    22,    23,    24,     0,     0,     0,
       0,     0,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   238,     0,     0,     0,   246,     0,     0,     0,
      28,    29,     0,     0,     0,    32,   727,     0,     0,     2,
     856,   239,    38,   240,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   247,     0,   241,     0,     0,   126,
       0,     0,     0,     0,     0,     0,    43,    44,     0,     0,
     247,   247,   252,     0,     0,     0,   295,  -110,     0,     0,
       0,     0,   296,   297,   298,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   932,   299,   300,   940,     0,     0,
     246,   246,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     0,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,  1636,   312,  1637,
     252,   252,   252,   252,     0,     0,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,     0,
     126,   126,   126,   252,     0,   252,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   126,   126,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   252,   252,  1046,     0,
    1055,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1057,     0,     0,   247,     0,   252,     0,     0,     0,
       0,   403,     0,   252,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   252,   252,     0,     0,  1133,   537,     0,   252,
     252,     0,     0,   252,   252,     0,     0,     0,     0,     0,
    1151,     0,     0,     0,  1534,     0,     0,     0,     0,     0,
       0,   644,   644,   644,   644,     0,     0,     0,     0,     0,
       0,     0,     0,   403,     0,     0,     0,     0,   247,   247,
       0,   -65,   -65,   -65,   -65,   -65,   -65,   -65,   -65,   -65,
     -65,   -65,   -65,   -65,   -65,   -65,   -65,   -65,   -65,   -65,
     -65,   -65,   -65,   -65,     0,     0,     0,     0,   727,     0,
    1177,     0,     0,     0,     0,     0,     0,   678,   290,   -65,
       1,   291,   100,   292,     0,   293,   294,   -65,   -65,     0,
       0,     0,   -65,     0,     0,     0,  1151,     0,   -65,   -65,
     -65,     0,     0,  1225,     0,     2,     0,  1225,     0,     0,
       0,     0,     0,   -65,     0,     0,     0,     0,     0,     0,
       0,  1282,     0,   -65,   -65,   856,     0,     0,     0,   686,
       0,  1535,     0,  1536,   -65,     0,     0,     0,   403,     0,
       0,     0,   295,     0,   403,     0,     0,     0,   296,   297,
     298,     0,     0,     0,     0,     0,     0,     0,     0,  1335,
       0,   299,   300,     0,     0,     0,     0,  1347,     0,     0,
       0,     0,     0,   252,     0,   301,   252,     0,     0,   302,
     303,   304,   305,   306,   307,   308,   309,  1399,     0,   310,
       0,     0,   311,  1153,   312,  1646,     0,  1154,     0,     0,
       0,     0,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,   403,     0,   403,     0,     0,     0,     0,
     252,     0,  1431,  1435,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   252,     0,   856,  1438,     0,
     403,     0,   727,     0,     0,     0,   252,   252,   252,   252,
       0,     0,   856,  1451,     0,     0,     0,     0,     0,     0,
    1461,     0,     0,   856,   114,   126,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,   126,     0,     0,     0,     0,
       0,     0,     0,     0,  1494,     0,     2,     0,     0,     0,
     570,     0,     0,     0,     0,     0,   126,     0,     0,     0,
     252,   252,     0,     0,     0,     0,   932,     0,     0,     0,
    1110,  1111,  1112,   619,  1113,  1114,  1115,  1116,   624,   625,
    1117,   997,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,     0,     0,     0,     0,     0,    32,     0,     0,
       0,     0,   299,   300,  1118,     0,   628,   629,   630,     0,
       0,     0,   932,     0,     0,     0,   301,   403,     0,   252,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     310,     0,     0,   311,  -474,   312,   631,     0,  -474,     0,
     242,     0,   632,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,     0,     0,  1574,     0,
       0,     0,     0,   252,     0,     0,     0,  1582,   252,     0,
       0,     0,     0,     0,     0,     0,     0,   403,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   644,     0,     0,   644,  1616,  1618,     0,  1621,
       0,     0,     0,     0,     0,     0,     0,  1631,     0,     0,
       0,     0,     0,     0,     0,  1640,     0,     0,     0,     0,
       0,     0,  1151,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   644,     0,     0,     0,     0,     0,     0,
    1151,   252,     0,     0,     0,  1151,  1185,   644,   644,   644,
     644,     0,     0,     0,     0,     0,     0,   252,   252,  1892,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,     0,     0,     0,  1689,   997,     0,     0,     0,
       0,  1698,   997,     0,     0,   997,     0,     0,     0,   856,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,  1151,     0,   856,     0,  1225,   296,
     297,   298,     0,     0,     0,     0,  1711,     0,     0,     0,
     726,     0,   299,   300,     0,     0,  1225,     0,     0,     0,
       0,     0,     0,  1225,     0,     0,   301,     0,     0,     0,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,  1151,     0,   311,  1153,   312,  1893,     0,  1154,     0,
       0,     0,     0,   313,   314,     0,   315,   316,   317,   318,
       0,   252,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   403,     0,
       0,   403,   403,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1151,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1151,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   726,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   252,   252,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   997,     0,     0,   403,     0,  1151,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   403,     0,     0,     0,  1151,
       0,     0,     0,  1151,   403,     0,     0,     0,     0,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1785,     0,   997,     0,   997,     0,     2,     0,     0,     0,
       0,     0,     0,  1792,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1796,     0,     0,     0,     0,     0,     0,
       0,   380,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,  1461,     0,   570,     0,     0,     0,     0,     0,
       0,     0,   299,   300,     0,     0,     0,     0,     0,     0,
     403,     0,     0,     0,     0,     0,   301,     0,     0,     0,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,  1153,   312,  1893,     0,  1154,     0,
       0,     0,     0,   313,   314,  1132,   315,   316,   317,   318,
     997,     0,     0,     0,     0,     0,     0,     0,     0,  1150,
       0,   403,     0,  1155,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1850,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   644,   644,     0,     0,  1151,   570,  1151,     0,     0,
    1151,   644,     0,     0,     0,     0,  1880,  1883,     0,  1885,
       0,     0,     0,     0,     0,     0,     0,   726,     0,  1151,
       0,  1896,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1234,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1150,  1155,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   403,     0,   403,  1151,     0,
    1281,     0,     0,     0,     0,     0,     0,  1151,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   403,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1921,  1333,     0,
       0,   997,     0,     0,     0,     0,  1346,     0,   997,     0,
       0,   290,   997,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,  1397,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,    18,    19,   236,   237,    22,    23,
      24,  1429,  1433,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,   238,  1438,     0,     0,
       0,   296,   297,   298,    28,    29,     0,     0,     0,    32,
       0,   726,     0,     0,   299,   392,    38,   240,     0,     0,
    1796,     0,     0,     0,     0,     0,     0,     0,   301,     0,
     241,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,     0,   312,     0,     0,
    1151,     0,     0,     0,     0,   313,   314,     0,   315,   316,
     317,   318,     0,     0,   644,  1151,     0,     0,     0,     0,
       0,     0,  1151,     0,     0,     0,  1885,     0,  2035,     0,
       0,     0,     1,     0,     0,     0,     0,  2041,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   403,     0,     0,   403,     0,     0,     2,   194,   195,
     196,   197,   198,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,    18,    19,   236,   237,    22,    23,    24,
     727,     0,     0,  1711,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   238,     0,     0,   997,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,   403,
       0,     0,     0,     0,   239,    38,   240,     0,     0,     0,
       0,     0,     0,   403,     0,     0,     0,     0,     0,   241,
       0,     0,     0,     0,     0,     0,     0,     0,   403,    43,
      44,    45,     0,     0,   854,     0,     0,   997,     0,   997,
       0,  1444,     0,     0,     0,   556,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   997,     0,     0,     0,
       0,  2096,  2099,     0,  1151,     0,  1151,     0,     0,   644,
    1151,   644,     0,     0,     0,  1615,  1617,     0,  1620,     0,
       0,     0,     0,     0,     0,     0,  1132,     0,     0,  1155,
       0,     0,     0,     0,  1639,     0,     0,     0,     0,     0,
       0,  1150,  1155,     0,     0,     0,     0,     0,     0,   997,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1150,
    1155,     0,     0,     0,  1150,  1151,     0,     0,  1151,     0,
       0,     0,     0,     0,     0,     0,   644,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   116,     0,     0,     0,     0,     0,     0,
     133,  1151,     0,     0,  1688,     0,     0,     0,     0,     0,
    1697,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,     0,     0,   156,   165,   188,     0,     0,     0,     0,
       0,     0,     0,  1150,     0,     0,     0,     0,     0,     0,
       0,   403,     0,     0,     0,   403,   403,   403,     0,     0,
       0,   119,   119,     0,     0,     0,     0,     0,     0,     0,
       0,   403,   403,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   116,   116,     0,     0,     0,     0,     0,     0,
    1150,  1155,     0,     0,     0,     0,     0,  1960,  1964,   484,
    1970,  1974,     0,     0,     0,  1978,  1982,  1986,  1990,   119,
     119,     0,     0,     0,     0,   515,     0,  1960,  1964,  1970,
    1974,  1978,  1982,  1986,  1990,     0,     0,     0,     0,   403,
       0,     0,     0,     0,   116,     0,     0,     0,     0,     0,
       0,     0,  1150,     0,  1155,     0,   997,     0,     0,     0,
       0,     0,     0,     0,     0,  1150,  1155,     0,     0,     0,
       0,   119,     0,     0,     0,     0,     0,     0,     0,   156,
     559,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   567,     0,     0,
       0,     0,     0,     0,     0,     0,  1150,     0,  1155,     0,
     165,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   165,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   559,     0,     0,     0,   119,  1150,     0,
    1155,     0,  1150,     0,  1155,     0,     0,     0,     0,     0,
     119,   290,     0,     1,   291,   100,   292,     0,   293,   294,
     675,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   403,
     403,     0,     0,     0,     0,     0,     0,     0,     0,   403,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1110,  1111,  1112,   619,  1113,  1114,  1115,  1116,
     624,   625,  1117,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,     0,     0,     0,     0,     0,    32,
       0,     0,     0,     0,   299,   300,  1118,   116,   628,   629,
     630,   997,     0,   116,     0,   403,   403,     0,   301,     0,
       0,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,   119,   311,     0,   312,   631,     0,
     567,     0,   242,     0,   632,   313,   314,     0,   315,   316,
     317,   318,     0,   559,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1860,     0,
     119,     0,     0,     0,     0,     0,     0,     0,   559,     0,
       0,     0,     0,     0,  1150,  1155,  1150,  1155,     0,  1150,
    1875,     0,     0,     0,   156,  1615,  1882,     0,  1639,     0,
    1155,     0,     0,     0,     0,   567,     0,     0,  1150,  1155,
    1639,     0,     0,     0,     0,     0,     0,     0,     0,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,   116,   116,   116,     0,   116,     0,
       0,   116,     0,     0,     0,     0,     2,     0,     0,     0,
       0,     0,   116,   116,   116,     0,     0,  1150,  1155,     0,
       0,   119,   119,   119,     0,   119,  1150,  1155,   675,     0,
     515,     0,   559,     0,   116,     0,     0,     0,     0,   119,
     119,   119,     0,   295,     0,     0,     0,   116,     0,   296,
     297,   298,     0,     0,     0,     0,     0,     0,     0,   119,
       0,   567,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   567,     0,   301,     0,     0,     0,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,  1153,   312,     0,     0,  1154,     0,
       0,     0,     0,   313,   314,  1914,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1173,     0,     0,
       0,     0,     0,     0,     0,   116,     0,     0,     0,     0,
       0,   559,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   675,     0,     0,     0,     0,     0,   675,  1150,
       0,     0,     0,     0,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,  1150,     0,     0,     0,     0,  1155,
       0,  1150,  1875,     0,  1155,  1639,     0,  2034,     0,  2036,
       0,     2,     0,     0,     0,  1155,  2040,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   295,    27,
       0,     0,     0,     0,   296,   297,   298,    28,    29,   726,
       0,     0,    32,     0,     0,    35,    36,   299,   417,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,    40,     0,   302,   303,   304,   305,   306,
     307,   308,   309,    43,    44,   310,     0,     0,   311,   724,
     312,     0,     0,     0,     0,     0,     0,     0,   313,   314,
       0,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   156,     0,   559,     0,     0,
       0,     0,     0,     0,   559,     0,     0,     0,     0,   559,
    2095,  2098,     0,  1150,  1155,  1150,     0,     0,     0,  1150,
    1875,     0,     0,     0,   567,     0,     0,     0,     0,     0,
       0,   567,     0,     0,     0,     0,   119,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   116,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   116,
       0,     0,     0,     0,   559,     0,     0,     0,     0,     0,
     116,     0,     0,     0,  1150,  1155,   119,  1150,  1875,     0,
     559,     0,  2141,     0,     0,     0,   567,     0,     0,     0,
       0,   567,     0,     0,     0,     0,     0,   119,     0,     0,
       0,     0,     0,   745,     0,     0,     0,   567,     0,   746,
     747,   748,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    1150,     0,     0,     0,     0,     0,   559,     0,     0,     0,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,   567,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -364,     0,
       0,     0,   116,   116,     0,     0,  -364,  -364,     0,     0,
       0,  -364,   116,     0,   116,     0,     0,  -364,  -364,  -364,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   119,
     119,     0,  -364,     0,     0,     0,     0,     0,     0,   567,
       0,   567,  -364,  -364,  -364,  -364,  -364,   749,     1,     0,
    -364,  1555,  -364,  -364,     0,   750,     0,     0,   751,     0,
    -364,  -364,  -364,     0,  -364,  -364,  -364,  -364,  -364,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,   116,     0,   116,     0,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,   821,     0,     0,    43,    44,     0,     0,     0,
       0,   675,     0,   675,  -364,   745,  1774,  -364,  -364,  -364,
    -364,   746,   747,   748,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,     0,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,     0,     0,  -364,
    -364,     0,  -364,     0,     0,  -364,  -364,  -364,  -364,  -364,
       0,     0,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,     0,
    -364,     0,  -364,  -364,  -364,     0,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,   749,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,   750,  -364,  -364,
     751,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   194,   195,   196,   197,
     198,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,    18,    19,   236,   237,    22,    23,    24,   116,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   116,     0,
       0,     0,   858,   238,     0,   116,     0,     0,   296,   297,
     298,    28,    29,     0,     0,   567,    32,     0,     0,     0,
       0,   299,   392,    38,   240,   567,   116,     0,   559,     0,
       0,   116,   119,     0,   116,   301,     0,   241,     0,   302,
     303,   304,   305,   306,   307,   308,   309,    43,    44,   310,
       0,     0,   311,   567,   312,   567,     0,     0,   567,     0,
       0,   567,   313,   314,     0,   315,   316,   317,   318,     2,
     194,   195,   196,   197,   198,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,    18,    19,   236,   237,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   238,     0,     0,
       0,   116,     0,     0,     0,    28,    29,     0,     0,   116,
      32,     0,     0,     0,     0,     0,   239,    38,   240,     0,
     559,     0,     0,     0,     0,     0,     0,     0,   119,     0,
       0,   241,     0,     0,     0,     0,   567,     0,     0,     0,
       0,    43,    44,     0,     0,  -366,  1199,   567,  -366,  -366,
    -366,  -366,  1200,  1201,  1202,  -366,  -366,  -366,  -366,  -366,
    -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,
    -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,
    -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,
    -366,  -366,  -366,  -366,  -366,  -366,     0,  -366,  -366,  -366,
    -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,     0,     0,
    -366,  -366,     0,  -366,     0,     0,  -366,  -366,  -366,  -366,
    -366,     0,     0,  -366,  -366,  -366,  -366,  -366,  -366,  -366,
    -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,
       0,  -366,     0,  -366,  -366,  -366,     0,  -366,  -366,  -366,
    -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,
    1203,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  1204,  -366,
    -366,  1205,  -366,  -366,  -366,  -366,  -366,  -366,  -366,  -366,
    -366,  -366,     0,     2,   194,   195,   196,   197,   198,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,    18,
      19,   236,   237,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   116,
     116,   238,     0,   116,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,     0,
     239,    38,   240,     0,     0,     0,   567,   567,     0,     0,
     567,     0,     0,     0,     0,   241,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,     0,     0,
     854,  1700,     0,     0,     0,     0,     0,   116,     0,     0,
       0,   556,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -471,  1146,   119,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,  -471,     0,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,     0,     0,  -471,  -471,     0,
    -471,     0,     0,  -471,  -471,  -471,  -471,  -471,     0,     0,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,     0,  -471,     0,
    -471,  -471,  -471,     0,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -304,
     290,     0,     1,   291,   100,   292,  -304,   293,   294,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,     2,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
       0,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,     0,     0,   295,  -304,     0,  -304,     0,     0,
     296,   297,   298,  -304,  -304,     0,     0,  -304,  -304,  -304,
    -304,  -304,  -304,   299,   300,  -304,  -304,  -304,  -304,  -304,
    -304,  -304,  -304,  -304,     0,  -304,     0,   301,  -304,  -304,
       0,   302,   303,   304,   305,   306,   307,   308,   309,  -304,
    -304,   310,  -304,  -304,   311,  1249,   312,  -304,  -304,  1149,
    -304,  -304,  -304,  -304,   313,   314,  -304,   315,   316,   317,
     318,  -304,  -304,  -304,  -304,  -304,  -305,   290,     0,     1,
     291,   100,   292,  -305,   293,   294,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,     2,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,     0,  -305,  -305,
    -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,     0,
       0,   295,  -305,     0,  -305,     0,     0,   296,   297,   298,
    -305,  -305,     0,     0,  -305,  -305,  -305,  -305,  -305,  -305,
     299,   300,  -305,  -305,  -305,  -305,  -305,  -305,  -305,  -305,
    -305,     0,  -305,     0,   301,  -305,  -305,     0,   302,   303,
     304,   305,   306,   307,   308,   309,  -305,  -305,   310,  -305,
    -305,   311,  1153,   312,  -305,  -305,  1154,  -305,  -305,  -305,
    -305,   313,   314,  -305,   315,   316,   317,   318,  -305,  -305,
    -305,  -305,  -305,  -600,   290,     0,     1,   291,   100,   292,
    -600,   293,   294,  -600,  -600,  -600,  -600,  -600,  -600,  -600,
    -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,
    -600,     2,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,
    -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,
    -600,  -600,  -600,  -600,     0,  -600,  -600,  -600,  -600,  -600,
    -600,  -600,  -600,  -600,  -600,  -600,     0,     0,   295,  -600,
       0,  -600,     0,     0,   296,   297,   298,  -600,  -600,     0,
       0,  -600,  -600,  -600,  -600,  -600,  -600,   299,   300,  -600,
    -600,  -600,  -600,  -600,  -600,  -600,  -600,  -600,     0,  -600,
       0,   301,  -600,  -600,     0,   302,   303,   304,   305,   306,
     307,   308,   309,  -600,  -600,   310,  -600,  -600,   311,  -600,
     312,  -600,  -600,  -600,  -600,   735,  -600,  1330,   313,   314,
    -600,   315,   316,   317,   318,  -600,  -600,  -600,  -600,  -600,
    -601,   290,     0,     1,   291,   100,   292,  -601,   293,   294,
    -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,
    -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,     2,  -601,
    -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,
    -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,
    -601,     0,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,
    -601,  -601,  -601,     0,     0,   295,  -601,     0,  -601,     0,
       0,   296,   297,   298,  -601,  -601,     0,     0,  -601,  -601,
    -601,  -601,  -601,  -601,   299,   300,  -601,  -601,  -601,  -601,
    -601,  -601,  -601,  -601,  -601,     0,  -601,     0,   301,  -601,
    -601,     0,   302,   303,   304,   305,   306,   307,   308,   309,
    -601,  -601,   310,  -601,  -601,   311,  -601,   312,  -601,  -601,
    -601,  -601,   735,  -601,  1396,   313,   314,  -601,   315,   316,
     317,   318,  -601,  -601,  -601,  -601,  -601,  -611,   290,     0,
       1,   291,   100,   292,  -611,   293,   294,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,     2,  -611,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,     0,  -611,
    -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
       0,     0,   295,  -611,     0,  -611,     0,     0,   296,   297,
     298,  -611,  -611,     0,     0,  -611,  -611,  -611,  -611,  -611,
    -611,   299,   300,  -611,  -611,  -611,  -611,  -611,  -611,  -611,
    -611,  -611,     0,  -611,     0,   301,  -611,  -611,     0,   302,
     303,   304,   305,   306,   307,   308,   309,  -611,  -611,   310,
    -611,  -611,   311,  -611,   312,  -611,  -611,  1149,  -611,  -611,
    -611,  -611,   313,   314,  -611,   315,   316,   317,   318,  -611,
    -611,  -611,  -611,  -611,  -613,   290,     0,     1,   291,   100,
     292,  -613,   293,   294,  -613,  -613,  -613,  -613,  -613,  -613,
    -613,  -613,  -613,  -613,  -613,  -613,  -613,  -613,  -613,  -613,
    -613,  -613,     2,  -613,  -613,  -613,  -613,  -613,  -613,  -613,
    -613,  -613,  -613,  -613,  -613,  -613,  -613,  -613,  -613,  -613,
    -613,  -613,  -613,  -613,  -613,     0,  -613,  -613,  -613,  -613,
    -613,  -613,  -613,  -613,  -613,  -613,  -613,     0,     0,   295,
    -613,     0,  -613,     0,     0,   296,   297,   298,  -613,  -613,
       0,     0,  -613,  -613,  -613,  -613,  -613,  -613,   299,   300,
    -613,  -613,  -613,  -613,  -613,  -613,  -613,  -613,  -613,     0,
    -613,     0,   301,  -613,  -613,     0,   302,   303,   304,   305,
     306,   307,   308,   309,  -613,  -613,   310,  -613,  -613,   311,
    1153,   312,  -613,  -613,  1154,  -613,  -613,  -613,  -613,   313,
     314,  -613,   315,   316,   317,   318,  -613,  -613,  -613,  -613,
    -613,  -612,   290,     0,     1,   291,   100,   292,  -612,   293,
     294,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,
    -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,     2,
    -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,
    -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,
    -612,  -612,     0,  -612,  -612,  -612,  -612,  -612,  -612,  -612,
    -612,  -612,  -612,  -612,     0,     0,   295,  -612,     0,  -612,
       0,     0,   296,   297,   298,  -612,  -612,     0,     0,  -612,
    -612,  -612,  -612,  -612,  -612,   299,   300,  -612,  -612,  -612,
    -612,  -612,  -612,  -612,  -612,  -612,     0,  -612,     0,   301,
    -612,  -612,     0,   302,   303,   304,   305,   306,   307,   308,
     309,  -612,  -612,   310,  -612,  -612,   311,  -612,   312,  -612,
    -612,  1149,  -612,  -612,  -612,  -612,   313,   314,  -612,   315,
     316,   317,   318,  -612,  -612,  -612,  -612,  -612,  -357,  1910,
       0,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,     0,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,     0,     0,  -357,  -357,     0,  -357,     0,     0,  -357,
    -357,  -357,  -357,  -357,     0,     0,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,     0,  -357,     0,  -357,  -357,  -357,     0,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,  -357,
    -357,  -357,  -357,  -357,  -357,  -362,  1953,     0,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,     0,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,     0,     0,
    -362,  -362,     0,  -362,     0,     0,  -362,  -362,  -362,  -362,
    -362,     0,     0,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
       0,  -362,     0,  -362,  -362,  -362,     0,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -350,   290,     0,     1,   291,   100,   292,  -350,
     293,   294,  -350,  -350,  -350,  -350,  -350,  -350,  -350,  -350,
    -350,  -350,  -350,  -350,  -350,  -350,  -350,  -350,  -350,  -350,
       2,  -350,  -350,  -350,  -350,  -350,  -350,  -350,  -350,  -350,
    -350,  -350,  -350,  -350,  -350,  -350,  -350,  -350,  -350,  -350,
    -350,  -350,  -350,     0,  -350,  -350,  -350,  -350,  -350,  -350,
    -350,  -350,  -350,  -350,  -350,     0,     0,   295,  -350,     0,
    -350,     0,     0,   296,   297,   298,  -350,  -350,     0,     0,
    -350,  -350,  -350,  -350,  -350,  -350,   299,   300,  -350,  -350,
    -350,  -350,  -350,  -350,  -350,  -350,  -350,     0,  -350,     0,
     301,  -350,  -350,     0,   302,   303,   304,   305,   306,   307,
     308,   309,  -350,  -350,   310,  -350,  -350,   311,  -350,   312,
    -350,  -350,  -350,  -350,   735,  -350,  -350,   313,   314,  -350,
     315,   316,   317,   318,  -350,  -350,  -350,  -350,  -350,  -578,
     290,     0,     1,   291,   100,   292,  -578,   293,   294,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,     2,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
       0,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,     0,     0,   295,  -578,     0,  -578,     0,     0,
     296,   297,   298,  -578,  -578,     0,     0,  -578,  -578,  -578,
    -578,  -578,  -578,   299,   300,  -578,  -578,  -578,  -578,  -578,
    -578,  -578,  -578,  -578,     0,  -578,     0,   301,  -578,  -578,
       0,   302,   303,   304,   305,   306,   307,   308,   309,  -578,
    -578,   310,  -578,  -578,   311,  -578,   312,  -578,  -578,  -578,
    -578,   735,  -578,  -578,   313,   314,  -578,   315,   316,   317,
     318,  -578,  -578,  -578,  -578,  -578,  -586,   290,     0,     1,
     291,   100,   292,  -586,   293,   294,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,     2,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,     0,  -586,  -586,
    -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,     0,
       0,   295,  -586,     0,  -586,     0,     0,   296,   297,   298,
    -586,  -586,     0,     0,  -586,  -586,  -586,  -586,  -586,  -586,
     299,   300,  -586,  -586,  -586,  -586,  -586,  -586,  -586,  -586,
    -586,     0,  -586,     0,   301,  -586,  -586,     0,   302,   303,
     304,   305,   306,   307,   308,   309,  -586,  -586,   310,  -586,
    -586,   311,  -586,   312,  -586,  -586,  -586,  -586,   735,  -586,
    -586,   313,   314,  -586,   315,   316,   317,   318,  -586,  -586,
    -586,  -586,  -586,  -579,   290,     0,     1,   291,   100,   292,
    -579,   293,   294,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,     2,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,     0,  -579,  -579,  -579,  -579,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,     0,     0,   295,  -579,
       0,  -579,     0,     0,   296,   297,   298,  -579,  -579,     0,
       0,  -579,  -579,  -579,  -579,  -579,  -579,   299,   300,  -579,
    -579,  -579,  -579,  -579,  -579,  -579,  -579,  -579,     0,  -579,
       0,   301,  -579,  -579,     0,   302,   303,   304,   305,   306,
     307,   308,   309,  -579,  -579,   310,  -579,  -579,   311,  -579,
     312,  -579,  -579,  -579,  -579,   735,  -579,  -579,   313,   314,
    -579,   315,   316,   317,   318,  -579,  -579,  -579,  -579,  -579,
    -587,   290,     0,     1,   291,   100,   292,  -587,   293,   294,
    -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,
    -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,     2,  -587,
    -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,
    -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,
    -587,     0,  -587,  -587,  -587,  -587,  -587,  -587,  -587,  -587,
    -587,  -587,  -587,     0,     0,   295,  -587,     0,  -587,     0,
       0,   296,   297,   298,  -587,  -587,     0,     0,  -587,  -587,
    -587,  -587,  -587,  -587,   299,   300,  -587,  -587,  -587,  -587,
    -587,  -587,  -587,  -587,  -587,     0,  -587,     0,   301,  -587,
    -587,     0,   302,   303,   304,   305,   306,   307,   308,   309,
    -587,  -587,   310,  -587,  -587,   311,  -587,   312,  -587,  -587,
    -587,  -587,   735,  -587,  -587,   313,   314,  -587,   315,   316,
     317,   318,  -587,  -587,  -587,  -587,  -587,  -580,   290,     0,
       1,   291,   100,   292,  -580,   293,   294,  -580,  -580,  -580,
    -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,
    -580,  -580,  -580,  -580,  -580,     2,  -580,  -580,  -580,  -580,
    -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,
    -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,     0,  -580,
    -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,  -580,
       0,     0,   295,  -580,     0,  -580,     0,     0,   296,   297,
     298,  -580,  -580,     0,     0,  -580,  -580,  -580,  -580,  -580,
    -580,   299,   300,  -580,  -580,  -580,  -580,  -580,  -580,  -580,
    -580,  -580,     0,  -580,     0,   301,  -580,  -580,     0,   302,
     303,   304,   305,   306,   307,   308,   309,  -580,  -580,   310,
    -580,  -580,   311,  -580,   312,  -580,  -580,  -580,  -580,   735,
    -580,  -580,   313,   314,  -580,   315,   316,   317,   318,  -580,
    -580,  -580,  -580,  -580,  -588,   290,     0,     1,   291,   100,
     292,  -588,   293,   294,  -588,  -588,  -588,  -588,  -588,  -588,
    -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,
    -588,  -588,     2,  -588,  -588,  -588,  -588,  -588,  -588,  -588,
    -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,
    -588,  -588,  -588,  -588,  -588,     0,  -588,  -588,  -588,  -588,
    -588,  -588,  -588,  -588,  -588,  -588,  -588,     0,     0,   295,
    -588,     0,  -588,     0,     0,   296,   297,   298,  -588,  -588,
       0,     0,  -588,  -588,  -588,  -588,  -588,  -588,   299,   300,
    -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,  -588,     0,
    -588,     0,   301,  -588,  -588,     0,   302,   303,   304,   305,
     306,   307,   308,   309,  -588,  -588,   310,  -588,  -588,   311,
    -588,   312,  -588,  -588,  -588,  -588,   735,  -588,  -588,   313,
     314,  -588,   315,   316,   317,   318,  -588,  -588,  -588,  -588,
    -588,  -581,   290,     0,     1,   291,   100,   292,  -581,   293,
     294,  -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,
    -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,     2,
    -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,
    -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,  -581,
    -581,  -581,     0,  -581,  -581,  -581,  -581,  -581,  -581,  -581,
    -581,  -581,  -581,  -581,     0,     0,   295,  -581,     0,  -581,
       0,     0,   296,   297,   298,  -581,  -581,     0,     0,  -581,
    -581,  -581,  -581,  -581,  -581,   299,   300,  -581,  -581,  -581,
    -581,  -581,  -581,  -581,  -581,  -581,     0,  -581,     0,   301,
    -581,  -581,     0,   302,   303,   304,   305,   306,   307,   308,
     309,  -581,  -581,   310,  -581,  -581,   311,  -581,   312,  -581,
    -581,  -581,  -581,   735,  -581,  -581,   313,   314,  -581,   315,
     316,   317,   318,  -581,  -581,  -581,  -581,  -581,  -589,   290,
       0,     1,   291,   100,   292,  -589,   293,   294,  -589,  -589,
    -589,  -589,  -589,  -589,  -589,  -589,  -589,  -589,  -589,  -589,
    -589,  -589,  -589,  -589,  -589,  -589,     2,  -589,  -589,  -589,
    -589,  -589,  -589,  -589,  -589,  -589,  -589,  -589,  -589,  -589,
    -589,  -589,  -589,  -589,  -589,  -589,  -589,  -589,  -589,     0,
    -589,  -589,  -589,  -589,  -589,  -589,  -589,  -589,  -589,  -589,
    -589,     0,     0,   295,  -589,     0,  -589,     0,     0,   296,
     297,   298,  -589,  -589,     0,     0,  -589,  -589,  -589,  -589,
    -589,  -589,   299,   300,  -589,  -589,  -589,  -589,  -589,  -589,
    -589,  -589,  -589,     0,  -589,     0,   301,  -589,  -589,     0,
     302,   303,   304,   305,   306,   307,   308,   309,  -589,  -589,
     310,  -589,  -589,   311,  -589,   312,  -589,  -589,  -589,  -589,
     735,  -589,  -589,   313,   314,  -589,   315,   316,   317,   318,
    -589,  -589,  -589,  -589,  -589,  -359,  2054,     0,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,     0,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,     0,     0,
    -359,  -359,     0,  -359,     0,     0,  -359,  -359,  -359,  -359,
    -359,     0,     0,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
       0,  -359,     0,  -359,  -359,  -359,     0,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,  -359,
    -359,  -359,  -358,  2055,     0,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,     0,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,     0,     0,  -358,  -358,     0,
    -358,     0,     0,  -358,  -358,  -358,  -358,  -358,     0,     0,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,     0,  -358,     0,
    -358,  -358,  -358,     0,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,
    -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -358,  -364,
     745,     0,  -364,  -364,  -364,  -364,   746,   747,   748,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
       0,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,     0,     0,  -364,  -364,     0,  -364,     0,     0,
    -364,  -364,  -364,  -364,  -364,     0,     0,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,     0,  -364,     0,  -364,  -364,  -364,
       0,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,   749,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,  1144,  -364,  -364,   751,     0,  -364,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -471,  1146,     0,  -471,
    -471,  -471,  -471,     0,  -471,  -471,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,     0,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,     0,
       0,  -471,  -471,     0,  -471,     0,     0,  -471,  -471,  -471,
    -471,  -471,     0,     0,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,
    -471,     0,  -471,     0,  -471,  -471,  -471,     0,  -471,  -471,
    -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,  -471,     0,
       0,  -471,  -471,  -471,  -471,     0,  -471,  -471,  -471,  1147,
    -471,  -471,  -471,     0,  -471,  -471,  -471,  -471, -1107,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2, -1107, -1107, -1107,
   -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107,
   -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107,     0,
   -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107, -1107,
   -1107,     0,     0,   295, -1107,     0, -1107,     0,     0,   296,
     297,   298, -1107, -1107,     0,     0, -1107, -1107, -1107, -1107,
   -1107, -1107,   299,   300, -1107, -1107, -1107, -1107, -1107, -1107,
   -1107, -1107, -1107,     0, -1107,     0,   301, -1107, -1107,     0,
     302,   303,   304,   305,   306,   307,   308,   309, -1107, -1107,
     310,     0,     0,   311,  1153,   312, -1107,     0,  1154, -1107,
   -1107,     0, -1107,   313,   314,     0,   315,   316,   317,   318,
   -1240,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1240,
   -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240,
   -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240,
   -1240,     0, -1240, -1240, -1240, -1240, -1240, -1240, -1240, -1240,
   -1240, -1240, -1240,     0,     0,   295, -1240,     0, -1240,     0,
       0,   296,   297,   298, -1240, -1240,     0,     0, -1240, -1240,
   -1240, -1240, -1240, -1240,   299,   300, -1240, -1240, -1240, -1240,
   -1240, -1240, -1240, -1240, -1240,     0, -1240,     0,   301, -1240,
   -1240,     0,   302,   303,   304,   305,   306,   307,   308,   309,
   -1240, -1240,   310,     0,     0,   311,  1153,   312,  1646,     0,
    1154, -1240, -1240,     0, -1240,   313,   314,     0,   315,   316,
     317,   318, -1198,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1198, -1198, -1198, -1198, -1198, -1198, -1198, -1198, -1198,
   -1198, -1198, -1198, -1198, -1198, -1198, -1198, -1198, -1198, -1198,
   -1198, -1198, -1198,     0, -1198, -1198, -1198, -1198, -1198, -1198,
   -1198, -1198, -1198, -1198, -1198,     0,     0,   295, -1198,     0,
   -1198,     0,     0,   296,   297,   298, -1198, -1198,     0,     0,
   -1198, -1198, -1198, -1198, -1198, -1198,   299,   300, -1198, -1198,
   -1198, -1198, -1198, -1198, -1198, -1198, -1198,     0, -1198,     0,
     301, -1198, -1198,     0,   302,   303,   304,   305,   306,   307,
     308,   309, -1198, -1198,   310,     0,     0,   311,  1869,   312,
   -1198,     0,  1154, -1198, -1198,     0, -1198,   313,   314,     0,
     315,   316,   317,   318, -1229,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1229, -1229, -1229, -1229, -1229, -1229, -1229,
   -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229, -1229,
   -1229, -1229, -1229, -1229, -1229,     0,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,     0,     0,   295,
   -1229,     0, -1229,     0,     0,   296,   297,   298, -1229, -1229,
       0,     0, -1229,    32, -1229, -1229, -1229, -1229,   299,   300,
    1118, -1229,   628,   629,   630, -1229, -1229, -1229, -1229,     0,
   -1229,     0,   301, -1229, -1229,     0,   302,   303,   304,   305,
     306,   307,   308,   309,    43,    44,   310,     0,     0,   311,
    1153,   312,   631,     0,  1154, -1229,   242,     0,   632,   313,
     314,     0,   315,   316,   317,   318,  -612,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,  -612,  -612,  -612,  -612,  -612,
    -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,
    -612,  -612,  -612,  -612,  -612,  -612,  -612,     0,  -612,  -612,
    -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,     0,
       0,   295,  -612,     0,  -612,     0,     0,   296,   297,   298,
    -612,  -612,     0,     0,  -612,  -612,  -612,  -612,  -612,  -612,
     299,   300,  -612,  -612,  -612,  -612,  -612,  -612,  -612,  -612,
    -612,     0,  -612,     0,   301,  -612,  -612,     0,   302,   303,
     304,   305,   306,   307,   308,   309,  -612,  -612,   310,     0,
       0,   311,  -612,   312,  1148,     0,  1149,  -612,  -612,     0,
    -612,   313,   314,     0,   315,   316,   317,   318, -1221,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2, -1221, -1221, -1221,
   -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221,
   -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221,     0,
   -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221, -1221,
   -1221,     0,     0,   295, -1221,     0, -1221,     0,     0,   296,
     297,   298, -1221, -1221,     0,     0, -1221, -1221, -1221, -1221,
   -1221, -1221,   299,   300, -1221, -1221, -1221, -1221, -1221, -1221,
   -1221, -1221, -1221,     0, -1221,     0,   301, -1221, -1221,     0,
     302,   303,   304,   305,   306,   307,   308,   309, -1221, -1221,
     310,     0,     0,   311,  2100,   312, -1221,     0,  1149, -1221,
   -1221,     0, -1221,   313,   314,     0,   315,   316,   317,   318,
   -1222,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1222,
   -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222,
   -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222,
   -1222,     0, -1222, -1222, -1222, -1222, -1222, -1222, -1222, -1222,
   -1222, -1222, -1222,     0,     0,   295, -1222,     0, -1222,     0,
       0,   296,   297,   298, -1222, -1222,     0,     0, -1222, -1222,
   -1222, -1222, -1222, -1222,   299,   300, -1222, -1222, -1222, -1222,
   -1222, -1222, -1222, -1222, -1222,     0, -1222,     0,   301, -1222,
   -1222,     0,   302,   303,   304,   305,   306,   307,   308,   309,
   -1222, -1222,   310,     0,     0,   311,  1153,   312,  2101,     0,
    1154, -1222, -1222,     0, -1222,   313,   314,     0,   315,   316,
     317,   318, -1216,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216,
   -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216, -1216,
   -1216, -1216, -1216,     0,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,     0,     0,   295, -1216,     0,
   -1216,     0,     0,   296,   297,   298, -1216, -1216,     0,     0,
   -1216,    32, -1216, -1216, -1216, -1216,   299,   300,  1118, -1216,
     628,   629,   630, -1216, -1216, -1216, -1216,     0, -1216,     0,
     301, -1216, -1216,     0,   302,   303,   304,   305,   306,   307,
     308,   309,    43,    44,   310,     0,     0,   311,  1153,   312,
     631,     0,  1154, -1216,   242,     0,   632,   313,   314,     0,
     315,   316,   317,   318, -1164,   607,     0, -1164, -1164, -1164,
   -1164,     0, -1164, -1164,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1164, -1164, -1164, -1164, -1164, -1164, -1164, -1164,
   -1164, -1164, -1164, -1164, -1164, -1164, -1164, -1164, -1164, -1164,
   -1164, -1164, -1164, -1164, -1164,     0, -1164, -1164, -1164, -1164,
   -1164, -1164, -1164, -1164, -1164, -1164, -1164,     0,     0, -1164,
   -1164,     0, -1164,     0,     0, -1164, -1164, -1164, -1164, -1164,
       0,     0, -1164, -1164, -1164, -1164, -1164, -1164, -1164, -1164,
   -1164, -1164, -1164, -1164, -1164, -1164, -1164, -1164, -1164,     0,
   -1164,     0, -1164, -1164, -1164,     0, -1164, -1164, -1164, -1164,
   -1164, -1164, -1164, -1164, -1164, -1164, -1164,     0,     0, -1164,
       0, -1164,   608,     0, -1164, -1164, -1164,     0, -1164, -1164,
   -1164,     0, -1164, -1164, -1164, -1164, -1187,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
      18,    19,   236,   237,    22,    23,    24,     0,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,     0,
       0,   295,   238,     0, -1187,     0,     0,   296,   297,   298,
      28,    29,     0,     0, -1187,    32, -1187, -1187, -1187, -1187,
     299,   392,   627,   240,   628,   629,   630, -1187, -1187, -1187,
   -1187,     0, -1187,     0,   301, -1187,   241,     0,   302,   303,
     304,   305,   306,   307,   308,   309,    43,    44,   310,     0,
       0,   311,     0,   312,   631,     0, -1187, -1187,   242,     0,
     632,   313,   314,     0,   315,   316,   317,   318, -1165,   607,
       0, -1165, -1165, -1165, -1165,     0, -1165, -1165,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1165, -1165, -1165, -1165,
   -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165,
   -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165,     0,
   -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165,
   -1165,     0,     0, -1165, -1165,     0, -1165,     0,     0, -1165,
   -1165, -1165, -1165, -1165,     0,     0, -1165, -1165, -1165, -1165,
   -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165,
   -1165, -1165, -1165,     0, -1165,     0, -1165, -1165, -1165,     0,
   -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165, -1165,
   -1165,     0,     0, -1165,     0, -1165,   608,     0, -1165, -1165,
   -1165,     0, -1165, -1165, -1165,     0, -1165, -1165, -1165, -1165,
   -1226,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2, -1226,
   -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226,
   -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226, -1226,
   -1226,     0,  1110,  1111,  1112,   619,  1113,  1114,  1115,  1116,
     624,   625,  1117,     0,     0,   295, -1226,     0, -1226,     0,
       0,   296,   297,   298, -1226, -1226,     0,     0, -1226,    32,
   -1226, -1226, -1226, -1226,   299,   300,  1118, -1226,   628,   629,
     630, -1226, -1226, -1226, -1226,     0, -1226,     0,   301, -1226,
   -1226,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,     0,   312,   631,     0,
   -1226, -1226,   242,     0,   632,   313,   314,     0,   315,   316,
     317,   318, -1242,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242,
   -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242, -1242,
   -1242, -1242, -1242,     0, -1242, -1242, -1242, -1242, -1242, -1242,
   -1242, -1242, -1242, -1242, -1242,     0,     0,   295, -1242,     0,
   -1242,     0,     0,   296,   297,   298, -1242, -1242,     0,     0,
   -1242, -1242, -1242, -1242, -1242, -1242,   299,   300, -1242, -1242,
   -1242, -1242, -1242, -1242, -1242, -1242, -1242,     0, -1242,     0,
     301, -1242, -1242,     0,   302,   303,   304,   305,   306,   307,
     308,   309, -1242, -1242,   310,     0,     0,   311,     0,   312,
    1129,     0, -1242, -1242,   735,     0, -1242,   313,   314,     0,
     315,   316,   317,   318, -1177,  1156,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,    18,    19,
     236,   237,    22,    23,    24,     0,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,     0,     0,   295,
     238,     0, -1177,     0,     0,   296,   297,   298,    28,    29,
       0,     0, -1177,    32, -1177, -1177, -1177, -1177,   299,   392,
     627,   240,   628,   629,   630, -1177, -1177, -1177, -1177,     0,
   -1177,     0,   301, -1177,   241,     0,   302,   303,   304,   305,
     306,   307,   308,   309,    43,    44,   310,     0,     0,   311,
       0,   312,   631,     0, -1177, -1177,   242,     0,   632,   313,
     314,     0,   315,   316,   317,   318, -1181,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
      18,    19,   236,   237,    22,    23,    24,     0,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,     0,
       0,   295,   238,     0, -1181,     0,     0,   296,   297,   298,
      28,    29,     0,     0, -1181,    32, -1181, -1181, -1181, -1181,
     299,   392,   627,   240,   628,   629,   630, -1181, -1181, -1181,
   -1181,     0, -1181,     0,   301, -1181,   241,     0,   302,   303,
     304,   305,   306,   307,   308,   309,    43,    44,   310,     0,
       0,   311,     0,   312,   631,     0, -1181, -1181,   242,     0,
     632,   313,   314,     0,   315,   316,   317,   318, -1176,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    18,    19,   236,   237,    22,    23,    24,     0,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,     0,     0,   295,   238,     0, -1176,     0,     0,   296,
     297,   298,    28,    29,     0,     0, -1176,    32, -1176, -1176,
   -1176, -1176,   299,   392,   627,   240,   628,   629,   630, -1176,
   -1176, -1176, -1176,     0, -1176,     0,   301, -1176,   241,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     310,     0,     0,   311,     0,   312,   631,     0, -1176, -1176,
     242,     0,   632,   313,   314,     0,   315,   316,   317,   318,
   -1180,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,    18,    19,   236,   237,    22,    23,
      24,     0,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,     0,     0,   295,   238,     0, -1180,     0,
       0,   296,   297,   298,    28,    29,     0,     0, -1180,    32,
   -1180, -1180, -1180, -1180,   299,   392,   627,   240,   628,   629,
     630, -1180, -1180, -1180, -1180,     0, -1180,     0,   301, -1180,
     241,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,     0,   312,   631,     0,
   -1180, -1180,   242,     0,   632,   313,   314,     0,   315,   316,
     317,   318, -1094,  1169,     0, -1094, -1094, -1094, -1094,     0,
   -1094, -1094,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,
   -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,
   -1094, -1094, -1094,     0, -1094, -1094, -1094, -1094, -1094, -1094,
   -1094, -1094, -1094, -1094, -1094,     0,     0, -1094, -1094,     0,
   -1094,     0,     0, -1094, -1094, -1094, -1094, -1094,     0,     0,
   -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094, -1094,
   -1094, -1094, -1094, -1094, -1094, -1094, -1094,     0, -1094,     0,
   -1094, -1094, -1094,     0, -1094, -1094, -1094, -1094, -1094, -1094,
   -1094, -1094, -1094, -1094, -1094,     0,     0, -1094,     0, -1094,
   -1094,     0, -1094, -1094, -1094,     0, -1094, -1094, -1094,     0,
   -1094, -1094, -1094, -1094, -1096,  1170,     0, -1096, -1096, -1096,
   -1096,     0, -1096, -1096,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096,
   -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096,
   -1096, -1096, -1096, -1096, -1096,     0, -1096, -1096, -1096, -1096,
   -1096, -1096, -1096, -1096, -1096, -1096, -1096,     0,     0, -1096,
   -1096,     0, -1096,     0,     0, -1096, -1096, -1096, -1096, -1096,
       0,     0, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096,
   -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096, -1096,     0,
   -1096,     0, -1096, -1096, -1096,     0, -1096, -1096, -1096, -1096,
   -1096, -1096, -1096, -1096, -1096, -1096, -1096,     0,     0, -1096,
       0, -1096, -1096,     0, -1096, -1096, -1096,     0, -1096, -1096,
   -1096,     0, -1096, -1096, -1096, -1096, -1136,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2, -1136, -1136, -1136, -1136, -1136,
   -1136, -1136, -1136, -1136, -1136, -1136, -1136, -1136, -1136, -1136,
   -1136, -1136, -1136, -1136, -1136, -1136, -1136,     0,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,     0,
       0,   295, -1136,     0, -1136,     0,     0,   296,   297,   298,
   -1136, -1136,     0,     0, -1136,    32, -1136, -1136, -1136, -1136,
     299,   300,  1118, -1136,   628,   629,   630, -1136, -1136, -1136,
   -1136,     0, -1136,     0,   301, -1136, -1136,     0,   302,   303,
     304,   305,   306,   307,   308,   309,    43,    44,   310,     0,
       0,   311,     0,   312,   631,     0, -1136, -1136,   242,     0,
     632,   313,   314,     0,   315,   316,   317,   318, -1138,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2, -1138, -1138, -1138,
   -1138, -1138, -1138, -1138, -1138, -1138, -1138, -1138, -1138, -1138,
   -1138, -1138, -1138, -1138, -1138, -1138, -1138, -1138, -1138,     0,
     616,   617,   618,   619,   620,   621,   622,   623,   624,   625,
     626,     0,     0,   295, -1138,     0, -1138,     0,     0,   296,
     297,   298, -1138, -1138,     0,     0, -1138,    32, -1138, -1138,
   -1138, -1138,   299,   300,  1118, -1138,   628,   629,   630, -1138,
   -1138, -1138, -1138,     0, -1138,     0,   301, -1138, -1138,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     310,     0,     0,   311,     0,   312,   631,     0, -1138, -1138,
     242,     0,   632,   313,   314,     0,   315,   316,   317,   318,
   -1178,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,    18,    19,   236,   237,    22,    23,
      24,     0,   616,   617,   618,   619,   620,   621,   622,   623,
     624,   625,   626,     0,     0,   295,   238,     0, -1178,     0,
       0,   296,   297,   298,    28,    29,     0,     0, -1178,    32,
   -1178, -1178, -1178, -1178,   299,   392,   627,   240,   628,   629,
     630, -1178, -1178, -1178, -1178,     0, -1178,     0,   301, -1178,
     241,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,     0,   312,   631,     0,
   -1178, -1178,   242,     0,   632,   313,   314,     0,   315,   316,
     317,   318, -1182,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,    18,    19,   236,   237,
      22,    23,    24,     0,   616,   617,   618,   619,   620,   621,
     622,   623,   624,   625,   626,     0,     0,   295,   238,     0,
   -1182,     0,     0,   296,   297,   298,    28,    29,     0,     0,
   -1182,    32, -1182, -1182, -1182, -1182,   299,   392,   627,   240,
     628,   629,   630, -1182, -1182, -1182, -1182,     0, -1182,     0,
     301, -1182,   241,     0,   302,   303,   304,   305,   306,   307,
     308,   309,    43,    44,   310,     0,     0,   311,     0,   312,
     631,     0, -1182, -1182,   242,     0,   632,   313,   314,     0,
     315,   316,   317,   318, -1179,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,    18,    19,
     236,   237,    22,    23,    24,     0,   616,   617,   618,   619,
     620,   621,   622,   623,   624,   625,   626,     0,     0,   295,
     238,     0, -1179,     0,     0,   296,   297,   298,    28,    29,
       0,     0, -1179,    32, -1179, -1179, -1179, -1179,   299,   392,
     627,   240,   628,   629,   630, -1179, -1179, -1179, -1179,     0,
   -1179,     0,   301, -1179,   241,     0,   302,   303,   304,   305,
     306,   307,   308,   309,    43,    44,   310,     0,     0,   311,
       0,   312,   631,     0, -1179, -1179,   242,     0,   632,   313,
     314,     0,   315,   316,   317,   318, -1183,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
      18,    19,   236,   237,    22,    23,    24,     0,   616,   617,
     618,   619,   620,   621,   622,   623,   624,   625,   626,     0,
       0,   295,   238,     0, -1183,     0,     0,   296,   297,   298,
      28,    29,     0,     0, -1183,    32, -1183, -1183, -1183, -1183,
     299,   392,   627,   240,   628,   629,   630, -1183, -1183, -1183,
   -1183,     0, -1183,     0,   301, -1183,   241,     0,   302,   303,
     304,   305,   306,   307,   308,   309,    43,    44,   310,     0,
       0,   311,     0,   312,   631,     0, -1183, -1183,   242,     0,
     632,   313,   314,     0,   315,   316,   317,   318, -1174,   607,
       0, -1174, -1174, -1174, -1174,     0, -1174, -1174,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1174, -1174, -1174, -1174,
   -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174,
   -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174,     0,
   -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174,
   -1174,     0,     0, -1174, -1174,     0, -1174,     0,     0, -1174,
   -1174, -1174, -1174, -1174,     0,     0, -1174, -1174, -1174, -1174,
   -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174,
   -1174, -1174, -1174,     0, -1174,     0, -1174, -1174, -1174,     0,
   -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174, -1174,
   -1174,     0,     0, -1174,     0, -1174,   608,     0, -1174, -1174,
   -1174,     0, -1174, -1174, -1174,     0, -1174, -1174, -1174, -1174,
   -1175,   607,     0, -1175, -1175, -1175, -1175,     0, -1175, -1175,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1175, -1175,
   -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175,
   -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175,
   -1175,     0, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175,
   -1175, -1175, -1175,     0,     0, -1175, -1175,     0, -1175,     0,
       0, -1175, -1175, -1175, -1175, -1175,     0,     0, -1175, -1175,
   -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175,
   -1175, -1175, -1175, -1175, -1175,     0, -1175,     0, -1175, -1175,
   -1175,     0, -1175, -1175, -1175, -1175, -1175, -1175, -1175, -1175,
   -1175, -1175, -1175,     0,     0, -1175,     0, -1175,   608,     0,
   -1175, -1175, -1175,     0, -1175, -1175, -1175,     0, -1175, -1175,
   -1175, -1175, -1021,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021,     0, -1021, -1021, -1021, -1021, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021,     0,     0,   295, -1021,     0,
   -1021,     0,     0,   296,   297,   298, -1021, -1021,     0,     0,
   -1021, -1021, -1021, -1021, -1021, -1021,   299,   300, -1021, -1021,
   -1021, -1021, -1021, -1021, -1021, -1021, -1021,     0, -1021,     0,
     301, -1021, -1021,     0,   302,   303,   304,   305,   306,   307,
     308,   309, -1021, -1021,   310,     0,     0,   311,     0,   312,
   -1021,     0,  1842,  1843,  1009,     0, -1021,   313,   314,     0,
     315,   316,   317,   318, -1023,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2, -1023, -1023, -1023, -1023, -1023, -1023, -1023,
   -1023, -1023, -1023, -1023, -1023, -1023, -1023, -1023, -1023, -1023,
   -1023, -1023, -1023, -1023, -1023,     0, -1023, -1023, -1023, -1023,
   -1023, -1023, -1023, -1023, -1023, -1023, -1023,     0,     0,   295,
   -1023,     0, -1023,     0,     0,   296,   297,   298, -1023, -1023,
       0,     0, -1023, -1023, -1023, -1023, -1023, -1023,   299,   300,
   -1023, -1023, -1023, -1023, -1023, -1023, -1023, -1023, -1023,     0,
   -1023,     0,   301, -1023, -1023,     0,   302,   303,   304,   305,
     306,   307,   308,   309, -1023, -1023,   310,     0,     0,   311,
       0,   312, -1023,     0, -1023,  2015,  1009,     0, -1023,   313,
     314,     0,   315,   316,   317,   318, -1017,  2018,     0, -1017,
   -1017, -1017, -1017,     0, -1017, -1017,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1017, -1017, -1017, -1017, -1017, -1017,
   -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017,
   -1017, -1017, -1017, -1017, -1017, -1017, -1017,     0, -1017, -1017,
   -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017,     0,
       0, -1017, -1017,     0, -1017,     0,     0, -1017, -1017, -1017,
   -1017, -1017,     0,     0, -1017, -1017, -1017, -1017, -1017, -1017,
   -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017,
   -1017,     0, -1017,     0, -1017, -1017, -1017,     0, -1017, -1017,
   -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017, -1017,     0,
       0, -1017,     0, -1017, -1017,     0, -1017, -1017, -1017,     0,
   -1017, -1017, -1017,     0, -1017, -1017, -1017, -1017, -1223,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2, -1223, -1223, -1223,
   -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223,
   -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223,     0,
   -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223, -1223,
   -1223,     0,     0,   295, -1223,     0, -1223,     0,     0,   296,
     297,   298, -1223, -1223,     0,     0, -1223, -1223, -1223, -1223,
   -1223, -1223,   299,   300, -1223, -1223, -1223, -1223, -1223, -1223,
   -1223, -1223, -1223,     0, -1223,     0,   301, -1223, -1223,     0,
     302,   303,   304,   305,   306,   307,   308,   309, -1223, -1223,
     310,     0,     0,   311,     0,   312, -1223,     0, -1223, -1223,
   -1223,     0, -1223,   313,   314,     0,   315,   316,   317,   318,
   -1018,  2092,     0, -1018, -1018, -1018, -1018,     0, -1018, -1018,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1018, -1018,
   -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018,
   -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018,
   -1018,     0, -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018,
   -1018, -1018, -1018,     0,     0, -1018, -1018,     0, -1018,     0,
       0, -1018, -1018, -1018, -1018, -1018,     0,     0, -1018, -1018,
   -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018,
   -1018, -1018, -1018, -1018, -1018,     0, -1018,     0, -1018, -1018,
   -1018,     0, -1018, -1018, -1018, -1018, -1018, -1018, -1018, -1018,
   -1018, -1018, -1018,     0,     0, -1018,     0, -1018, -1018,     0,
   -1018, -1018, -1018,     0, -1018, -1018, -1018,     0, -1018, -1018,
   -1018, -1018,  -925,   573,     0,  -925,  -925,  -925,  -925,     0,
    -925,  -925,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -925,  -925,  -925,  -925,  -925,  -925,  -925,  -925,  -925,  -925,
    -925,  -925,  -925,  -925,  -925,  -925,  -925,  -925,  -925,  -925,
    -925,  -925,  -925,     0,     0,  -925,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -925,  -925,     0,
    -925,     0,     0,  -925,  -925,  -925,  -925,  -925,     0,     0,
    -925,  -925,  -925,  -925,  -925,  -925,  -925,  -925,  -925,  -925,
    -925,     0,     0,  -925,  -925,  -925,  -925,     0,  -925,     0,
    -925,  -925,  -925,     0,  -925,  -925,  -925,  -925,  -925,  -925,
    -925,  -925,  -925,  -925,  -925,     0,     0,  -925,   837,  -925,
    -925,     0,   575,  -925,  -925,     0,     0,  -925,  -925,     0,
    -925,  -925,  -925,  -925,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   194,   195,   196,   197,   198,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,    18,    19,   236,
     237,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   295,   238,
       0,     0,     0,     0,   296,   297,   298,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,   299,   392,    38,
     240,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,   241,     0,   302,   303,   304,   305,   306,
     307,   308,   309,    43,    44,   310,     0,     0,   311,     0,
     312,   979,     0,   980,   981,   735,     0,     0,   313,   314,
       0,   315,   316,   317,   318,  1258,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,    18,    19,
     236,   237,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   295,
     238,     0,     0,     0,     0,   296,   297,   298,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,   299,   392,
      38,   240,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,   241,     0,   302,   303,   304,   305,
     306,   307,   308,   309,    43,    44,   310,     0,     0,   311,
       0,   312,   979,     0,   980,  -109,   735,     0,     0,   313,
     314,     0,   315,   316,   317,   318,  1265,     0,     1,   291,
     100,   292,     0,   293,   294,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,    18,
      19,   236,   237,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,   238,     0,     0,     0,     0,   296,   297,   298,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,   299,
     392,    38,   240,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,   241,     0,   302,   303,   304,
     305,   306,   307,   308,   309,    43,    44,   310,     0,     0,
     311,     0,   312,   979,     0,   980,   -97,   735,     0,     0,
     313,   314,     0,   315,   316,   317,   318,  1269,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
      18,    19,   236,   237,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   295,   238,     0,     0,     0,     0,   296,   297,   298,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
     299,   392,    38,   240,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,   241,     0,   302,   303,
     304,   305,   306,   307,   308,   309,    43,    44,   310,     0,
       0,   311,     0,   312,   979,     0,   980,  -101,   735,     0,
       0,   313,   314,     0,   315,   316,   317,   318,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   194,   195,   196,   197,
     198,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,    18,    19,   236,   237,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,   238,     0,     0,     0,     0,   296,   297,
     298,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,   299,   392,    38,   240,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,   241,     0,   302,
     303,   304,   305,   306,   307,   308,   309,    43,    44,   310,
       0,     0,   311,     0,   312,  1539,     0,   980,   -64,   735,
       0,     0,   313,   314,     0,   315,   316,   317,   318,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,    18,    19,   236,   237,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,   238,     0,     0,     0,     0,   296,
     297,   298,    28,    29,     0,     0,     0,    32,     0,     0,
       0,     0,   299,   392,    38,   240,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,   241,     0,
     302,   303,   304,   305,   306,   307,   308,   309,    43,    44,
     310,     0,     0,   311,     0,   312,  1548,     0,   980,  1549,
     735,     0,     0,   313,   314,     0,   315,   316,   317,   318,
    1606,     0,     1,   291,   100,   292,     0,   293,   294,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   194,   195,
     196,   197,   198,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,    18,    19,   236,   237,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   295,   238,     0,     0,     0,     0,
     296,   297,   298,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,   299,   392,    38,   240,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,   241,
       0,   302,   303,   304,   305,   306,   307,   308,   309,    43,
      44,   310,     0,     0,   311,     0,   312,   979,     0,   980,
     -80,   735,     0,     0,   313,   314,     0,   315,   316,   317,
     318,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,    18,    19,   236,   237,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,   238,     0,     0,     0,
       0,   296,   297,   298,    28,    29,     0,     0,     0,    32,
       0,     0,     0,     0,   299,   392,    38,   240,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
     241,     0,   302,   303,   304,   305,   306,   307,   308,   309,
      43,    44,   310,     0,     0,   311,     0,   312,  1548,     0,
     980,  -106,   735,     0,     0,   313,   314,     0,   315,   316,
     317,   318,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     194,   195,   196,   197,   198,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,    18,    19,   236,   237,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   295,   238,     0,     0,
       0,     0,   296,   297,   298,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,   299,   392,    38,   240,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,   241,     0,   302,   303,   304,   305,   306,   307,   308,
     309,    43,    44,   310,     0,     0,   311,     0,   312,  1548,
       0,   980,   -96,   735,     0,     0,   313,   314,     0,   315,
     316,   317,   318,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,    18,    19,   236,   237,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   295,   238,     0,
       0,     0,     0,   296,   297,   298,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,   299,   392,    38,   240,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,   241,     0,   302,   303,   304,   305,   306,   307,
     308,   309,    43,    44,   310,     0,     0,   311,     0,   312,
    1548,     0,   980,  -100,   735,     0,     0,   313,   314,     0,
     315,   316,   317,   318,  1803,     0,     1,   291,   100,   292,
       0,   293,   294,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   194,   195,   196,   197,   198,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,    18,    19,   236,
     237,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   295,   238,
       0,     0,     0,     0,   296,   297,   298,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,   299,   392,    38,
     240,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,   241,     0,   302,   303,   304,   305,   306,
     307,   308,   309,    43,    44,   310,     0,     0,   311,     0,
     312,   979,     0,   980,   -87,   735,     0,     0,   313,   314,
       0,   315,   316,   317,   318,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,    18,    19,
     236,   237,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   295,
     238,     0,     0,     0,     0,   296,   297,   298,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,   299,   392,
      38,   240,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,   241,     0,   302,   303,   304,   305,
     306,   307,   308,   309,    43,    44,   310,     0,     0,   311,
       0,   312,  1548,     0,   980,   -77,   735,     0,     0,   313,
     314,     0,   315,   316,   317,   318,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,    18,
      19,   236,   237,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,   238,     0,     0,     0,     0,   296,   297,   298,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,   299,
     392,    38,   240,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,   241,     0,   302,   303,   304,
     305,   306,   307,   308,   309,    43,    44,   310,     0,     0,
     311,     0,   312,  1548,     0,   980,   -84,   735,     0,     0,
     313,   314,     0,   315,   316,   317,   318,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1187,    27,     0,     0,     0,     0,   296,   297,   298,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
     299,   417,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,    40,     0,   302,   303,
     304,   305,   306,   307,   308,   309,    43,    44,   310,     0,
       0,   698,   724,   312,     0,     0,     0,     0,     0,     0,
       0,   313,   314,     0,   315,   316,   317,   318,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,     0,     0,     0,     0,
       0,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,    27,     0,     0,     0,     0,   296,   297,
     298,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,   299,   417,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,    40,     0,   302,
     303,   304,   305,   306,   307,   308,   309,    43,    44,   310,
       0,     0,   311,   290,   312,     1,   291,   100,   292,   242,
     293,   294,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     0,     0,     0,     0,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   295,    27,     0,
       0,     0,     0,   296,   297,   298,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,   299,   417,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,    40,     0,   302,   303,   304,   305,   306,   307,
     308,   309,    43,    44,   310,     0,     0,   698,   724,   312,
       0,     0,     0,     0,     0,     0,     0,   313,   314,     0,
     315,   316,   317,   318,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,     0,     0,     0,     0,     0,     8,     9,    10,
     554,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   295,    27,
       0,     0,     0,     0,   296,   297,   298,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,   299,   417,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,    40,     0,   302,   303,   304,   305,   306,
     307,   308,   309,    43,    44,   881,     0,     0,   882,   724,
     312,     0,     0,     0,     0,     0,     0,     0,   313,   314,
       0,   315,   316,   317,   318,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1110,  1111,  1112,   619,
    1113,  1114,  1115,  1116,   624,   625,  1117,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,     0,     0,
       0,     0,     0,    32,     0,     0,     0,     0,   299,   300,
    1118,     0,   628,   629,   630,     0,   290,     0,     1,   291,
     100,   292,   301,   293,   294,     0,   302,   303,   304,   305,
     306,   307,   308,   309,    43,    44,   310,     0,     0,   311,
    1153,   312,   631,     2,  1154,     0,   242,     0,   632,   313,
     314,     0,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   616,   617,   618,
     619,   620,   621,   622,   623,   624,   625,   626,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,     0,
       0,     0,     0,     0,    32,     0,     0,     0,     0,   299,
     300,  1118,     0,   628,   629,   630,     0,  1872,     0,     1,
     291,   100,   292,   301,   293,   294,     0,   302,   303,   304,
     305,   306,   307,   308,   309,    43,    44,   310,     0,     0,
     311,     0,   312,   631,     2,     0,     0,   242,     0,   632,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1110,  1111,
    1112,   619,  1113,  1114,  1115,  1116,   624,   625,  1117,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
       0,     0,     0,     0,     0,    32,     0,     0,     0,     0,
     299,   300,  1118,     0,   628,   629,   630,     0,   290,     0,
       1,   291,   100,   292,   301,   293,   294,     0,   302,   303,
     304,   305,   306,   307,   308,   309,    43,    44,   310,     0,
       0,   311,     0,   312,   631,     2,     0,     0,   242,     0,
     632,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,  2038,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,  1153,   312,     0,     0,  1154,     0,     0,
       0,     0,   313,   314,  1917,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,  1153,   312,  1893,     0,
    1154,     0,     0,     0,     0,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     2,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   311,  2102,
     312,  2103,     0,  1149,     0,     0,     0,     0,   313,   314,
       0,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     2,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,  1153,   312,  2101,     0,  1154,     0,     0,     0,
       0,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       2,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   311,  1274,   312,     0,     0,     0,
       0,   735,     0,     0,   313,   314,     0,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,  1341,   312,
       0,     0,     0,     0,   735,     0,     0,   313,   314,     0,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     2,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,  1153,   312,     0,     0,  1154,     0,     0,     0,     0,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     2,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,     0,   312,  1645,     0,  1149,     0,
       0,     0,     0,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,  1683,   312,     0,
       0,     0,     0,   735,     0,     0,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     2,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
    1692,   312,     0,     0,     0,     0,   735,     0,     0,   313,
     314,     0,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,  1724,   312,     0,     0,  1149,     0,     0,
       0,     0,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,     0,   312,     0,     0,
    1755,     0,     0,     0,  1756,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     2,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   311,     0,
     312,     0,     0,  1149,     0,     0,     0,     0,   313,   314,
    1762,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     2,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,     0,   312,     0,     0,  1755,     0,     0,     0,
    1764,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       2,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   311,     0,   312,     0,     0,  1755,
       0,     0,     0,  1776,   313,   314,     0,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,     0,   312,
       0,     0,  1755,     0,     0,     0,  1780,   313,   314,     0,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     2,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,  1868,   312,     0,     0,  1149,     0,     0,     0,     0,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     2,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,  1870,   312,     0,     0,  1149,     0,
       0,     0,     0,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,  1871,   312,     0,
       0,  1154,     0,     0,     0,     0,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     2,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
    1874,   312,     0,     0,  1149,     0,     0,     0,     0,   313,
     314,     0,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,  1894,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,     0,   312,  1891,     0,  1149,     0,     0,
       0,     0,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,  1895,   312,  1637,     0,
       0,     0,     0,     0,     0,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     2,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   311,     0,
     312,     0,     0,  1149,     0,     0,     0,     0,   313,   314,
    1913,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     2,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,     0,   312,     0,     0,  1149,     0,     0,     0,
       0,   313,   314,  1916,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       2,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   311,  2023,   312,     0,     0,  1149,
       0,     0,     0,     0,   313,   314,     0,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,  1869,   312,
       0,     0,  1154,     0,     0,     0,     0,   313,   314,     0,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     2,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,  2030,   312,     0,     0,  1149,     0,     0,     0,     0,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     2,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,  1895,   312,  1637,     0,     0,     0,
       0,     0,     0,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,  2106,   312,     0,
       0,  1149,     0,     0,     0,     0,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     2,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
       0,   312,     0,     0,     0,  2134,  1009,     0,     0,   313,
     314,     0,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,  2137,   312,     0,     0,  1149,     0,     0,
       0,     0,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,  2138,   312,     0,     0,
    1149,     0,     0,     0,     0,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     2,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   311,  2165,
     312,     0,     0,  1149,     0,     0,     0,     0,   313,   314,
       0,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     2,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,     0,   312,     0,     0,     0,     0,     0,     0,
       0,   313,   314,   539,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       2,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   311,     0,   312,     0,     0,     0,
       0,   735,     0,     0,   313,   314,     0,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,   290,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,     0,   312,
       0,     0,     0,     0,     0,     0,     0,   313,   314,   829,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,   290,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     2,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,     0,   312,     0,     0,     0,     0,     0,     0,     0,
     313,   314,   833,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,   290,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     2,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,     0,   312,     0,     0,     0,     0,
    1009,     0,     0,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,     0,   312,     0,
       0,     0,     0,     0,     0,     0,   313,   314,  1050,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     2,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
       0,   312,     0,     0,     0,     0,     0,     0,  1102,   313,
     314,     0,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,  1481,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,   311,   724,   312,     0,     0,     0,     0,     0,
       0,     0,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,     0,   312,     0,     0,
       0,     0,   735,     0,     0,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     2,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   311,     0,
     312,     0,     0,     0,     0,     0,     0,     0,   313,   314,
    1587,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
     290,     0,     1,   291,   100,   292,     0,   293,   294,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     2,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,  1619,   312,     0,     0,     0,     0,     0,     0,
       0,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       2,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   311,     0,   312,     0,     0,     0,
       0,     0,     0,  1622,   313,   314,     0,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,  1832,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   311,     0,   312,
       0,     0,     0,     0,  1831,     0,     0,   313,   314,     0,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,  1835,
       0,     1,   291,   100,   292,     0,   293,   294,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     2,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     311,     0,   312,     0,     0,     0,     0,   735,     0,     0,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,   295,     0,     0,     0,     0,     0,   296,
     297,   298,  1839,     0,     1,   291,   100,   292,     0,   293,
     294,     0,   299,   300,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   301,     0,     0,     2,
     302,   303,   304,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,   311,     0,   312,     0,     0,     0,     0,
     735,     0,     0,   313,   314,     0,   315,   316,   317,   318,
       0,     0,     0,     0,     0,     0,   295,     0,     0,     0,
       0,     0,   296,   297,   298,   290,     0,     1,   291,   100,
     292,     0,   293,   294,     0,   299,   300,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   301,
       0,     0,     2,   302,   303,   304,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,   311,     0,   312,     0,
       0,     0,     0,   735,     0,     0,   313,   314,     0,   315,
     316,   317,   318,     0,     0,     0,     0,     0,     0,   295,
       0,     0,     0,     0,     0,   296,   297,   298,   290,     0,
       1,   291,   100,   292,     0,   293,   294,     0,   299,   300,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   301,     0,     0,     2,   302,   303,   304,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,   311,
    1881,   312,     0,     0,     0,     0,     0,     0,     0,   313,
     314,     0,   315,   316,   317,   318,     0,     0,     0,     0,
       0,     0,   295,     0,     0,     0,     0,     0,   296,   297,
     298,   290,     0,     1,   291,   100,   292,     0,   293,   294,
       0,   299,   300,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   301,     0,     0,     2,   302,
     303,   304,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,  1940,     0,   312,     0,     0,     0,     0,  1831,
       0,     0,   313,   314,     0,   315,   316,   317,   318,     0,
       0,     0,     0,     0,     0,   295,     0,     0,     0,     0,
       0,   296,   297,   298,   290,     0,     1,   291,   100,   292,
       0,   293,   294,     0,   299,   300,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   301,     0,
       0,     2,   302,   303,   304,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,   311,  2039,   312,     0,     0,
       0,     0,     0,     0,     0,   313,   314,     0,   315,   316,
     317,   318,     0,     0,     0,     0,     0,     0,   295,     0,
       0,     0,     0,     0,   296,   297,   298,   290,     0,     1,
     291,   100,   292,     0,   293,   294,     0,   299,   300,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   301,     0,     0,     2,   302,   303,   304,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,   311,  2097,
     312,     0,     0,     0,     0,     0,     0,     0,   313,   314,
       0,   315,   316,   317,   318,     0,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,     0,   296,   297,   298,
     688,     0,     1,   291,   100,   292,     0,   293,   294,     0,
     299,   300,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   301,     0,     0,     2,   302,   303,
     304,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,   311,     0,   312,     0,     0,     0,     0,     0,     0,
       0,   313,   314,     0,   315,   316,   317,   318,     0,     0,
       0,     0,     0,     0,   295,     0,     0,     0,     0,     0,
     296,   297,   298,   290,     0,     1,   291,   100,   292,     0,
     293,   294,     0,   299,   300,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   301,     0,     0,
       2,   302,   303,   304,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,   689,     0,   312,     0,     0,     0,
       0,     0,     0,     0,   313,   314,     0,   315,   316,   317,
     318,     0,     0,     0,     0,     0,     0,   295,     0,     0,
       0,     0,     0,   296,   297,   298,   688,     0,     1,   291,
     100,   292,     0,   293,   294,     0,   299,   300,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     301,     0,     0,     2,   302,   303,   304,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,   698,     0,   312,
       0,     0,     0,     0,     0,     0,     0,   313,   314,     0,
     315,   316,   317,   318,     0,     0,     0,     0,     0,     0,
     295,     0,     0,     0,     0,     0,   296,   297,   298,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   299,
     300,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   301,     0,     0,     0,   302,   303,   304,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
     721,     0,   312,  -913,   573,     0,  -913,  -913,  -913,     0,
     313,   314,     0,   315,   316,   317,   318,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -913,  -913,  -913,  -913,  -913,  -913,  -913,  -913,  -913,
    -913,  -913,  -913,  -913,  -913,  -913,  -913,  -913,  -913,  -913,
    -913,  -913,  -913,  -913,     0,     0,  -913,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -913,  -913,
       0,  -913,     0,     0,  -913,  -913,     0,  -913,  -913,     0,
       0,  -913,  -913,  -913,  -913,  -913,  -913,     0,  -913,  -913,
    -913,  -913,     0,     0,  -913,  -913,  -913,  -913,     0,  -913,
       0,  -913,  -913,  -913,     0,  -913,  -913,  -913,  -913,  -913,
    -913,  -913,     0,  -913,  -913,  -913,     0,     0,  -913,   574,
    -913,  -913,     0,   575,  -913,     0,     0,     0,  -913,  -913,
    -257,   914,     0,     1,   291,   100,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,  -257,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,    27,     0,   413,     0,
       0,   296,   297,     0,    28,    29,     0,     0,   414,    32,
     415,   416,    35,    36,     0,   417,    38,    39,   418,     0,
       0,   419,   420,   421,   422,     0,   423,     0,   424,   425,
      40,     0,   302,   303,   304,   305,   306,   307,   308,     0,
      43,    44,    45,     0,     0,   426,     0,   427,   428,  -255,
     917,  -257,     1,   291,   100,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   194,   195,
     196,   197,   198,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,  -255,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   295,    27,     0,   413,     0,     0,
     296,   297,     0,    28,    29,     0,     0,   414,    32,   415,
     416,    35,    36,     0,   417,    38,    39,   418,     0,     0,
     419,   420,   421,   422,     0,   423,     0,   424,   425,    40,
       0,   302,   303,   304,   305,   306,   307,   308,     0,    43,
      44,    45,     0,     0,   426,     0,   427,   428,  -258,   914,
    -255,     1,   291,   100,   313,   314,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,  -258,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,    27,     0,   413,     0,     0,   296,
     297,     0,    28,    29,     0,     0,   414,    32,   415,   416,
      35,    36,     0,   417,    38,    39,   418,     0,     0,   419,
     420,   421,   422,     0,   423,     0,   424,   425,    40,     0,
     302,   303,   304,   305,   306,   307,   308,     0,    43,    44,
      45,     0,     0,   426,     0,   427,   428,  -256,   917,  -258,
       1,   291,   100,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
    -256,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,    27,     0,   413,     0,     0,   296,   297,
       0,    28,    29,     0,     0,   414,    32,   415,   416,    35,
      36,     0,   417,    38,    39,   418,     0,     0,   419,   420,
     421,   422,     0,   423,     0,   424,   425,    40,     0,   302,
     303,   304,   305,   306,   307,   308,     0,    43,    44,    45,
       0,     0,   426,     0,   427,   428,     0,   412,  -256,     1,
     291,   100,   313,   314,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   295,    27,     0,   413,     0,     0,   296,   297,     0,
      28,    29,     0,     0,   414,    32,   415,   416,    35,    36,
       0,   417,    38,    39,   418,     0,     0,   419,   420,   421,
     422,     0,   423,     0,   424,   425,    40,     0,   302,   303,
     304,   305,   306,   307,   308,     0,    43,    44,    45,     0,
       0,   426,     0,   427,   428,     0,   480,   429,     1,   291,
     100,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,    27,     0,   413,     0,     0,   296,   297,     0,    28,
      29,     0,     0,   414,    32,   415,   416,    35,    36,     0,
     417,    38,    39,   418,     0,     0,   419,   420,   421,   422,
       0,   423,     0,   424,   425,    40,     0,   302,   303,   304,
     305,   306,   307,   308,     0,    43,    44,    45,     0,     0,
     426,     0,   427,   428,     0,   502,   481,     1,   291,   100,
     313,   314,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   295,
      27,     0,   413,     0,     0,   296,   297,     0,    28,    29,
       0,     0,   414,    32,   415,   416,    35,    36,     0,   417,
      38,    39,   418,     0,     0,   419,   420,   421,   422,     0,
     423,     0,   424,   425,    40,     0,   302,   303,   304,   305,
     306,   307,   308,     0,    43,    44,    45,     0,     0,   426,
       0,   427,   428,     0,   507,   503,     1,   291,   100,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   295,    27,
       0,   413,     0,     0,   296,   297,     0,    28,    29,     0,
       0,   414,    32,   415,   416,    35,    36,     0,   417,    38,
      39,   418,     0,     0,   419,   420,   421,   422,     0,   423,
       0,   424,   425,    40,     0,   302,   303,   304,   305,   306,
     307,   308,     0,    43,    44,    45,     0,     0,   426,     0,
     427,   428,     0,   511,   508,     1,   291,   100,   313,   314,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   295,    27,     0,
     413,     0,     0,   296,   297,     0,    28,    29,     0,     0,
     414,    32,   415,   416,    35,    36,     0,   417,    38,    39,
     418,     0,     0,   419,   420,   421,   422,     0,   423,     0,
     424,   425,    40,     0,   302,   303,   304,   305,   306,   307,
     308,     0,    43,    44,    45,     0,     0,   426,     0,   427,
     428,     0,   914,   512,     1,   291,   100,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   295,    27,     0,   413,
       0,     0,   296,   297,     0,    28,    29,     0,     0,   414,
      32,   415,   416,    35,    36,     0,   417,    38,    39,   418,
       0,     0,   419,   420,   421,   422,     0,   423,     0,   424,
     425,    40,     0,   302,   303,   304,   305,   306,   307,   308,
       0,    43,    44,    45,     0,     0,   426,     0,   427,   428,
       0,   917,  -768,     1,   291,   100,   313,   314,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,    27,     0,   413,     0,
       0,   296,   297,     0,    28,    29,     0,     0,   414,    32,
     415,   416,    35,    36,     0,   417,    38,    39,   418,     0,
       0,   419,   420,   421,   422,     0,   423,     0,   424,   425,
      40,     0,   302,   303,   304,   305,   306,   307,   308,     0,
      43,    44,    45,     0,     0,   426,     0,   427,   428,     0,
     914,  -769,     1,   291,   100,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   194,   195,
     196,   197,   198,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   295,    27,     0,   413,     0,     0,
     296,   297,     0,    28,    29,     0,     0,   414,    32,   415,
     416,    35,    36,     0,   417,    38,    39,   418,     0,     0,
     419,   420,   421,   422,     0,   423,     0,   424,   425,    40,
       0,   302,   303,   304,   305,   306,   307,   308,     0,    43,
      44,    45,     0,     0,   426,     0,   427,   428,     0,   917,
    -765,     1,   291,   100,   313,   314,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,    27,     0,   413,     0,     0,   296,
     297,     0,    28,    29,     0,     0,   414,    32,   415,   416,
      35,    36,     0,   417,    38,    39,   418,     0,     0,   419,
     420,   421,   422,     0,   423,     0,   424,   425,    40,     0,
     302,   303,   304,   305,   306,   307,   308,     0,    43,    44,
      45,     0,     0,   426,     0,   427,   428,     0,   914,  -766,
       1,   291,   100,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,    27,     0,   413,     0,     0,   296,   297,
       0,    28,    29,     0,     0,   414,    32,   415,   416,    35,
      36,     0,   417,    38,    39,   418,     0,     0,   419,   420,
     421,   422,     0,   423,     0,   424,   425,    40,     0,   302,
     303,   304,   305,   306,   307,   308,     0,    43,    44,    45,
       0,     0,   426,     0,   427,   428,     0,   917,  -771,     1,
     291,   100,   313,   314,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   295,    27,     0,   413,     0,     0,   296,   297,     0,
      28,    29,     0,     0,   414,    32,   415,   416,    35,    36,
       0,   417,    38,    39,   418,     0,     0,   419,   420,   421,
     422,     0,   423,     0,   424,   425,    40,     0,   302,   303,
     304,   305,   306,   307,   308,     0,    43,    44,    45,     0,
       0,   426,     0,   427,   428,     0,  1032,  -772,     1,   291,
     100,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,    27,     0,   413,     0,     0,   296,   297,     0,    28,
      29,     0,     0,   414,    32,   415,   416,    35,    36,     0,
     417,    38,    39,   418,     0,     0,   419,   420,   421,   422,
       0,   423,     0,   424,   425,    40,     0,   302,   303,   304,
     305,   306,   307,   308,     0,    43,    44,    45,     0,     0,
     426,     0,   427,   428,     0,  1036,  1033,     1,   291,   100,
     313,   314,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   295,
      27,     0,   413,     0,     0,   296,   297,     0,    28,    29,
       0,     0,   414,    32,   415,   416,    35,    36,     0,   417,
      38,    39,   418,     0,     0,   419,   420,   421,   422,     0,
     423,     0,   424,   425,    40,     0,   302,   303,   304,   305,
     306,   307,   308,     0,    43,    44,    45,     0,     0,   426,
       0,   427,   428,     0,   914,  1037,     1,   291,   100,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   295,    27,
       0,   413,     0,     0,   296,   297,     0,    28,    29,     0,
       0,   414,    32,   415,   416,    35,    36,     0,   417,    38,
      39,   418,     0,     0,   419,   420,   421,   422,     0,   423,
       0,   424,   425,    40,     0,   302,   303,   304,   305,   306,
     307,   308,     0,    43,    44,    45,     0,     0,   426,     0,
     427,   428,     0,   917,  -748,     1,   291,   100,   313,   314,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   295,    27,     0,
     413,     0,     0,   296,   297,     0,    28,    29,     0,     0,
     414,    32,   415,   416,    35,    36,     0,   417,    38,    39,
     418,     0,     0,   419,   420,   421,   422,     0,   423,     0,
     424,   425,    40,     0,   302,   303,   304,   305,   306,   307,
     308,     0,    43,    44,    45,     0,     0,   426,     0,   427,
     428,     0,   914,  -749,     1,   291,   100,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   295,    27,     0,   413,
       0,     0,   296,   297,     0,    28,    29,     0,     0,   414,
      32,   415,   416,    35,    36,     0,   417,    38,    39,   418,
       0,     0,   419,   420,   421,   422,     0,   423,     0,   424,
     425,    40,     0,   302,   303,   304,   305,   306,   307,   308,
       0,    43,    44,    45,     0,     0,   426,     0,   427,   428,
       0,   917,  -751,     1,   291,   100,   313,   314,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,    27,     0,   413,     0,
       0,   296,   297,     0,    28,    29,     0,     0,   414,    32,
     415,   416,    35,    36,     0,   417,    38,    39,   418,     0,
       0,   419,   420,   421,   422,     0,   423,     0,   424,   425,
      40,     0,   302,   303,   304,   305,   306,   307,   308,     0,
      43,    44,    45,     0,     0,   426,     0,   427,   428,     0,
    1569,  -752,     1,   291,   100,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   194,   195,
     196,   197,   198,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   295,    27,     0,   413,     0,     0,
     296,   297,     0,    28,    29,     0,     0,   414,    32,   415,
     416,    35,    36,     0,   417,    38,    39,   418,     0,     0,
     419,   420,   421,   422,     0,   423,     0,   424,   425,    40,
       0,   302,   303,   304,   305,   306,   307,   308,     0,    43,
      44,    45,     0,     0,   426,     0,   427,   428,     0,   914,
    1570,     1,   291,   100,   313,   314,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,    27,     0,   413,     0,     0,   296,
     297,     0,    28,    29,     0,     0,   414,    32,   415,   416,
      35,    36,     0,   417,    38,    39,   418,     0,     0,   419,
     420,   421,   422,     0,   423,     0,   424,   425,    40,     0,
     302,   303,   304,   305,   306,   307,   308,     0,    43,    44,
      45,     0,     0,   426,     0,   427,   428,     0,   917,  -673,
       1,   291,   100,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,    27,     0,   413,     0,     0,   296,   297,
       0,    28,    29,     0,     0,   414,    32,   415,   416,    35,
      36,     0,   417,    38,    39,   418,     0,     0,   419,   420,
     421,   422,     0,   423,     0,   424,   425,    40,     0,   302,
     303,   304,   305,   306,   307,   308,     0,    43,    44,    45,
       0,     0,   426,     0,   427,   428,     0,   914,  -674,     1,
     291,   100,   313,   314,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   295,    27,     0,   413,     0,     0,   296,   297,     0,
      28,    29,     0,     0,   414,    32,   415,   416,    35,    36,
       0,   417,    38,    39,   418,     0,     0,   419,   420,   421,
     422,     0,   423,     0,   424,   425,    40,     0,   302,   303,
     304,   305,   306,   307,   308,     0,    43,    44,    45,     0,
       0,   426,     0,   427,   428,     0,   917,  -754,     1,   291,
     100,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,    27,     0,   413,     0,     0,   296,   297,     0,    28,
      29,     0,     0,   414,    32,   415,   416,    35,    36,     0,
     417,    38,    39,   418,     0,     0,   419,   420,   421,   422,
       0,   423,     0,   424,   425,    40,     0,   302,   303,   304,
     305,   306,   307,   308,     0,    43,    44,    45,     0,     0,
     426,     0,   427,   428,     0,   914,  -755,     1,   291,   100,
     313,   314,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   295,
      27,     0,   413,     0,     0,   296,   297,     0,    28,    29,
       0,     0,   414,    32,   415,   416,    35,    36,     0,   417,
      38,    39,   418,     0,     0,   419,   420,   421,   422,     0,
     423,     0,   424,   425,    40,     0,   302,   303,   304,   305,
     306,   307,   308,     0,    43,    44,    45,     0,     0,   426,
       0,   427,   428,     0,   917,  -666,     1,   291,   100,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   295,    27,
       0,   413,     0,     0,   296,   297,     0,    28,    29,     0,
       0,   414,    32,   415,   416,    35,    36,     0,   417,    38,
      39,   418,     0,     0,   419,   420,   421,   422,     0,   423,
       0,   424,   425,    40,     0,   302,   303,   304,   305,   306,
     307,   308,     0,    43,    44,    45,     0,     0,   426,     0,
     427,   428,     0,   914,  -667,     1,   291,   100,   313,   314,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   295,    27,     0,
     413,     0,     0,   296,   297,     0,    28,    29,     0,     0,
     414,    32,   415,   416,    35,    36,     0,   417,    38,    39,
     418,     0,     0,   419,   420,   421,   422,     0,   423,     0,
     424,   425,    40,     0,   302,   303,   304,   305,   306,   307,
     308,     0,    43,    44,    45,     0,     0,   426,     0,   427,
     428,     0,   917,  -662,     1,   291,   100,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   295,    27,     0,   413,
       0,     0,   296,   297,     0,    28,    29,     0,     0,   414,
      32,   415,   416,    35,    36,     0,   417,    38,    39,   418,
       0,     0,   419,   420,   421,   422,     0,   423,     0,   424,
     425,    40,     0,   302,   303,   304,   305,   306,   307,   308,
       0,    43,    44,    45,     0,     0,   426,     0,   427,   428,
       0,   914,  -663,     1,   291,   100,   313,   314,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,    27,     0,   413,     0,
       0,   296,   297,     0,    28,    29,     0,     0,   414,    32,
     415,   416,    35,    36,     0,   417,    38,    39,   418,     0,
       0,   419,   420,   421,   422,     0,   423,     0,   424,   425,
      40,     0,   302,   303,   304,   305,   306,   307,   308,     0,
      43,    44,    45,     0,     0,   426,     0,   427,   428,     0,
     917,  -652,     1,   291,   100,   313,   314,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     2,   194,   195,
     196,   197,   198,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   295,    27,     0,   413,     0,     0,
     296,   297,     0,    28,    29,     0,     0,   414,    32,   415,
     416,    35,    36,     0,   417,    38,    39,   418,     0,     0,
     419,   420,   421,   422,     0,   423,     0,   424,   425,    40,
       0,   302,   303,   304,   305,   306,   307,   308,     0,    43,
      44,    45,     0,     0,   426,     0,   427,   428,     0,   914,
    -653,     1,   291,   100,   313,   314,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   295,    27,     0,   413,     0,     0,   296,
     297,     0,    28,    29,     0,     0,   414,    32,   415,   416,
      35,    36,     0,   417,    38,    39,   418,     0,     0,   419,
     420,   421,   422,     0,   423,     0,   424,   425,    40,     0,
     302,   303,   304,   305,   306,   307,   308,     0,    43,    44,
      45,     0,     0,   426,     0,   427,   428,     0,   917,  -647,
       1,   291,   100,   313,   314,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   295,    27,     0,   413,     0,     0,   296,   297,
       0,    28,    29,     0,     0,   414,    32,   415,   416,    35,
      36,     0,   417,    38,    39,   418,     0,     0,   419,   420,
     421,   422,     0,   423,     0,   424,   425,    40,     0,   302,
     303,   304,   305,   306,   307,   308,     0,    43,    44,    45,
       0,     0,   426,     0,   427,   428,     0,   914,  -648,     1,
     291,   100,   313,   314,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     2,   194,   195,   196,   197,   198,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   295,    27,     0,   413,     0,     0,   296,   297,     0,
      28,    29,     0,     0,   414,    32,   415,   416,    35,    36,
       0,   417,    38,    39,   418,     0,     0,   419,   420,   421,
     422,     0,   423,     0,   424,   425,    40,     0,   302,   303,
     304,   305,   306,   307,   308,     0,    43,    44,    45,     0,
       0,   426,     0,   427,   428,     0,   917,  -664,     1,   291,
     100,   313,   314,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     295,    27,     0,   413,     0,     0,   296,   297,     0,    28,
      29,     0,     0,   414,    32,   415,   416,    35,    36,     0,
     417,    38,    39,   418,     0,     0,   419,   420,   421,   422,
       0,   423,     0,   424,   425,    40,     0,   302,   303,   304,
     305,   306,   307,   308,     0,    43,    44,    45,     0,     0,
     426,     0,   427,   428,     0,   290,  -665,     1,   291,   100,
     313,   314,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   295,
      27,     0,   413,     0,     0,   296,   297,     0,    28,    29,
       0,     0,   414,    32,   415,   416,    35,    36,     0,   417,
      38,    39,   418,     0,     0,   419,   420,   421,   422,     0,
     423,     0,   424,   425,    40,     0,   302,   303,   304,   305,
     306,   307,   308,     0,    43,    44,    45,     0,     0,   426,
       0,   427,   428,   412,     0,     1,   291,   100,     0,   313,
     314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   295,    27,     0,
     413,     0,     0,   296,   297,     0,    28,    29,     0,     0,
     414,    32,   415,   416,    35,    36,     0,   417,    38,    39,
     418,     0,     0,   419,   420,   421,   422,     0,   423,     0,
     424,   425,    40,     0,   302,   303,   304,   305,   306,   307,
     308,     0,    43,    44,    45,     0,     0,   426,     0,   427,
     428,   480,     0,     1,   291,   100,     0,   313,   314,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   295,    27,     0,   413,     0,
       0,   296,   297,     0,    28,    29,     0,     0,   414,    32,
     415,   416,    35,    36,     0,   417,    38,    39,   418,     0,
       0,   419,   420,   421,   422,     0,   423,     0,   424,   425,
      40, -1228,   302,   303,   304,   305,   306,   307,   308,     0,
      43,    44,    45,     0,     0,   426,     0,   427,   428,     0,
       0,     0,     0,     0,     0,   313,   314,     0,     0,     0,
   -1228, -1228, -1228, -1228, -1228, -1228, -1228, -1228, -1228, -1228,
   -1228, -1228, -1228, -1228, -1228, -1228, -1228, -1228, -1228, -1228,
   -1228, -1228,     0, -1228, -1228, -1228, -1228, -1228, -1228, -1228,
   -1228, -1228, -1228, -1228,     0,     0,     0, -1228,     0, -1228,
       0,     0,     0,     0,     0, -1228, -1228,     0,     0, -1228,
   -1228, -1228, -1228, -1228, -1228,     0,     0, -1228, -1228, -1228,
   -1228, -1228, -1228, -1228, -1228, -1228,     0, -1228, -1213,     0,
   -1228, -1228,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1228, -1228,     0,     0,     0,     0,     0,     0, -1228,
       0,     0, -1228, -1228,     0, -1228,     0, -1213, -1213, -1213,
   -1213, -1213, -1213, -1213, -1213, -1213, -1213, -1213, -1213, -1213,
   -1213, -1213, -1213, -1213, -1213, -1213, -1213, -1213, -1213,     0,
   -1213, -1213, -1213, -1213, -1213, -1213, -1213, -1213, -1213, -1213,
   -1213,     0,     0,     0, -1213,     0, -1213,     0,     0,     0,
       0,     0, -1213, -1213,     0,     0, -1213, -1213, -1213, -1213,
   -1213, -1213,     0,     0, -1213, -1213, -1213, -1213, -1213, -1213,
   -1213, -1213, -1213,     0, -1213, -1215,     0, -1213, -1213,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1213, -1213,
       0,     0,     0,     0,     0,     0, -1213,     0,     0, -1213,
   -1213,     0, -1213,     0, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215,     0, -1215, -1215, -1215,
   -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,     0,     0,
       0, -1215,     0, -1215,     0,     0,     0,     0,     0, -1215,
   -1215,     0,     0, -1215, -1215, -1215, -1215, -1215, -1215,     0,
       0, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215, -1215,
       0, -1215, -1212,     0, -1215, -1215,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1215, -1215,     0,     0,     0,
       0,     0,     0, -1215,     0,     0, -1215, -1215,     0, -1215,
       0, -1212, -1212, -1212, -1212, -1212, -1212, -1212, -1212, -1212,
   -1212, -1212, -1212, -1212, -1212, -1212, -1212, -1212, -1212, -1212,
   -1212, -1212, -1212,     0, -1212, -1212, -1212, -1212, -1212, -1212,
   -1212, -1212, -1212, -1212, -1212,     0,     0,     0, -1212,     0,
   -1212,     0,     0,     0,     0,     0, -1212, -1212,     0,     0,
   -1212, -1212, -1212, -1212, -1212, -1212,     0,     0, -1212, -1212,
   -1212, -1212, -1212, -1212, -1212, -1212, -1212,     0, -1212, -1214,
       0, -1212, -1212,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1212, -1212,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1212, -1212,     0, -1212,     0, -1214, -1214,
   -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214,
   -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214,
       0, -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214, -1214,
   -1214, -1214,     0,     0,     0, -1214,     0, -1214,     0,     0,
       0,     0,     0, -1214, -1214,     0,     0, -1214, -1214, -1214,
   -1214, -1214, -1214,     0,     0, -1214, -1214, -1214, -1214, -1214,
   -1214, -1214, -1214, -1214,     0, -1214,     0,     0, -1214, -1214,
       1,     0,     0,     0,     0,     0,     0,     0,     0, -1214,
   -1214,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1214, -1214,     0, -1214,     0,     2,   194,   195,   196,   197,
     198,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,    18,    19,   236,   237,    22,    23,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   238,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,     0,
       0,     0,   239,    38,   240,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   241,     0,     1,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
       0,     0,   854,     0,     0,     0,     0,     0,     0,  1464,
       0,     0,     0,   556,     2,   194,   195,   196,   197,   198,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
      18,    19,   236,   237,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   238,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   239,    38,   240,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   241,     0,     1,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,     0,
       0,  1215,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1216,     2,   194,   195,   196,   197,   198,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,    18,
      19,   236,   237,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   238,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,     0,
     239,    38,   240,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   241,     0,     1,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,     0,     0,
    1215,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1238,     2,   194,   195,   196,   197,   198,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,    18,    19,
     236,   237,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     238,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,     0,   239,
      38,   240,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   241,     0,     1,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,     0,     0,  1215,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1716,     2,   194,   195,   196,   197,   198,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,    18,    19,   236,
     237,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   238,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   239,    38,
     240,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   241,     0,     1,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,     0,     0,  1215,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1731,
       2,     3,     4,   261,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    26,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,   262,    31,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     1,     0,     0,     0,    42,     0,     0,
       0,     0,    43,    44,    45,     0,     0,    46,     0,     0,
       0,     0,     0,     0,     0,     0,   263,     0,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,   413,     0,
       0,     0,     0,     0,    28,    29,     0,     0,   414,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,     1,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,     0,     0,   943,     0,   427,     0,     0,
       0,     0,     0,     0,   944,     0,     2,   194,   195,   196,
     197,   198,     8,     9,    10,   554,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     1,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
      45,     0,     0,   922,     0,     0,   923,     0,     0,     0,
       0,     0,   924,     0,     2,   194,   195,   196,   197,   198,
       8,     9,    10,   554,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     1,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,     0,
       0,   922,     0,     0,  1509,     0,     0,     0,     0,     0,
     924,     0,     2,   194,   195,   196,   197,   198,     8,     9,
      10,   554,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1747,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,     0,     0,    46,
       0,     0,     0,     0,     0,     0,     0,     0,   924,     2,
     194,   195,   196,   197,   198,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,    18,    19,   236,   237,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   238,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,     0,   239,    38,   240,     0,
       0,     0,     0,     0,     0,     0,  1748,     0,     0,     0,
       0,   241,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   -94,     2,   194,   195,   196,   197,   198,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,    18,
      19,   236,   237,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   238,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,     0,
     239,    38,   240,     0,     0,     0,     0,     0,     0,     0,
    1863,     0,     0,     0,     0,   241,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   -95,     2,   194,   195,
     196,   197,   198,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,    18,    19,   236,   237,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   238,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   239,    38,   240,     0,     0,     0,
       0,     0,     0,     0,  2002,     0,     0,     0,     0,   241,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     -79,     2,   194,   195,   196,   197,   198,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,    18,    19,   236,
     237,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   238,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,     0,     0,     0,   239,    38,
     240,     0,     0,     0,     0,     0,     0, -1294,   280,     0,
       1,     0,     0,   241,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   -86,     2,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
      25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    26,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,    30,    31,     0,    32,    33,    34,    35,
      36,     0,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     1,     0,     0,     0,     0,     0,    40,    41,     0,
       0,     0,    42,     0,     0,     0,     0,    43,    44,    45,
       0,     0,    46,     0,     0,    47,     2,   194,   195,   196,
     197,   198,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,   159,     0,     1,     0,     0,    40,     0,
       0,     0,     0,     0,     0,   821,     0,     0,    43,    44,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1775,
       2,     3,     4,   160,     6,     7,     8,     9,    10,   161,
     162,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    26,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     0,   159,     0,     1,     0,     0,     0,
       0,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,     0,     0,    46,     0,     0,
     163,     2,     3,     4,   160,     6,     7,     8,     9,    10,
     161,   162,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,     0,     0,   594,     0,     1,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,    45,     0,     0,    46,     0,
       0,   163,     2,   194,   195,   196,   197,   198,   226,   227,
     228,   595,   596,   231,   232,   233,   234,   235,    18,    19,
     236,   237,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     238,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,     0,   239,
      38,   240,     0,     0,     0,     0,  -932,     0,  -932,     0,
       0,     0,     0,     0,   241,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,    45,     0,     0,    46,
       0,     0,   597,  -932,  -932,  -932,  -932,  -932,  -932,  -932,
    -932,  -932,  -932,  -932,  -932,  -932,  -932,  -932,  -932,  -932,
    -932,  -932,  -932,  -932,  -932,  -932,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -932,     0,     0,     0,     0,     0,     0,     0,  -932,
    -932,     0,     0,     0,  -932,     0,     0,     0,     0,     0,
    -932,  -932,  -932,     0,     0,     0,     0,     0,     0,     1,
       0,     0,     0,     0,     0,  -932,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  -932,  -932,  -932,     0,     0,
    -932,     0,     0,  -932,     2,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,    25,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    26,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,    30,    31,     0,    32,    33,    34,    35,    36,
       0,    37,    38,    39,     0,     0,     0, -1295,   272,     0,
       1,     0,     0,     0,     0,     0,    40,    41,     0,     0,
       0,    42,     0,     0,     0,     0,    43,    44,    45,     0,
       0,    46,     0,     0,    47,     2,     3,     4,   160,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,     0,     0,
      25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    26,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,    33,    34,    35,
      36,     0,    37,    38,    39,     0,   193,     0,     1,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,    45,
       0,     0,    46,     2,   194,   195,   196,   197,   198,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     199,    27,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,    35,    36,     0,
      37,    38,    39,     0,     0,   193,     0,     1,     0,     0,
       0,     0,     0,     0,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,     0,     0,
    1215,  1703,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   199,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,   193,     0,     1,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,     0,     0,     0,     0,
     200,     2,   194,   195,   196,   197,   198,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   199,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,     0,
       0,     0,    32,     0,     0,    35,    36,     0,    37,    38,
      39,     0,     0,   936,     0,     1,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,    44,     0,     0,     0,     0,   375,
       2,   194,   195,   196,   197,   198,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   199,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,  1490,     0,     1,     0,     0,     0,     0,     0,
       0,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,     0,     0,     0,     0,   200,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   199,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     0,
       0,   193,     0,     1,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,     0,     0,     0,     0,   375,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   199,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
     193,     0,     1,     0,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,     0,     0,     0,     0,  1584,     2,   194,   195,
     196,   197,   198,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   199,    27,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,    35,    36,     0,    37,    38,    39,     0,     0,   159,
       0,     1,     0,     0,     0,     0,     0,     0,     0,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,     0,     0,     0,     0,  1930,     2,     3,     4,   160,
       6,     7,     8,     9,    10,   554,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    26,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,   159,     0,     1,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
      45,     0,     0,    46,     2,     3,     4,   160,     6,     7,
       8,     9,    10,   554,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,   878,     0,     1,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,    45,     0,
       0,    46,     2,   194,   195,   196,   197,   198,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,    18,    19,
     236,   237,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     238,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,     0,   239,
      38,   240,     0,     0,     0,     1,     0,     0,     0,     0,
       0,     0,     0,     0,   241,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,     0,     0,     0,   879,
       2,     3,     4,   160,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    26,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,    35,    36,     0,    37,    38,    39,
       0,     0,     0,     1,     0,     0,     0,     0,     0,     0,
       0,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,     0,     0,    46,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,     0,     0,
       0,     1,     0,     0,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,    45,     0,     0,    46,     2,   194,   195,   196,
     197,   198,     8,     9,    10,   554,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,     0,     0,     0,    32,     0,     0,
      35,    36,     0,    37,    38,    39,     0,     0,     0,     1,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,    44,
      45,     0,     0,    46,     2,   194,   195,   196,   197,   198,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     0,     0,     0,     1,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,     0,     0,
       0,   713,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,     0,     0,     0,     1,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,     0,     0,     0,  1469,
       2,   194,   195,   196,   197,   198,   226,   227,   228,  1556,
     230,   231,   232,   233,   234,   235,    18,    19,   236,   237,
      22,    23,    24,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   238,     0,
       0,     0,     0,     0,     0,     0,    28,    29,     0,     0,
       0,    32,     0,     0,     0,     0,     0,   239,    38,   240,
       0,  1064,     0,     1,     0,     0,     0,     0,     0,     0,
       0,     0,   241,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,    44,    45,     0,     0,    46,     2,   194,
     195,   196,   197,   198,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,  1065,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   199,    27,     0,     0,     0,
       0,     0,     0,     0,    28,    29,     0,     0,     0,    32,
       0,     0,    35,    36,     0,    37,    38,    39,  1070,     0,
       1,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,    44,     0,     0,     0,     2,   194,   195,   196,   197,
     198,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,  1071,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   199,    27,     0,     0,     0,     0,     0,     0,
       0,    28,    29,     0,     0,     0,    32,     0,     0,    35,
      36,     0,    37,    38,    39,  1076,     0,     1,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,    44,     0,
       0,     0,     2,   194,   195,   196,   197,   198,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,  1077,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   199,
      27,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,    35,    36,     0,    37,
      38,    39,   863,     0,     1,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,     0,     0,     0,     2,
     194,   195,   196,   197,   198,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,    18,    19,   236,   237,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   238,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,     0,   239,    38,   240,     1,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   241,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,     0,     2,   194,   195,   196,   197,   198,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,  1025,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   199,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     1,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,     0,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,  1082,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   199,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     1,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,     0,     2,   194,   195,   196,   197,   198,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,    35,    36,
       0,    37,    38,    39,     1,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     0,     0,     0,
       0,     0,     0,   821,     0,     0,    43,    44,     0,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   199,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     1,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,     0,     2,   194,   195,   196,   197,   198,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
      18,    19,   236,   237,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   238,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,   469,   470,     0,     0,
       0,   239,    38,   240,     1,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   241,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,     0,     2,
     194,   195,   196,   197,   198,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,    35,    36,     0,    37,    38,    39,     1,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,     0,     2,   194,   195,   196,   197,   198,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
      18,    19,   236,   237,    22,    23,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   494,   238,     0,     0,     0,     0,     0,     0,     0,
      28,    29,     0,     0,     0,    32,     0,     0,     0,     0,
       0,   239,    38,   240,     1,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   241,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,    44,     0,     2,
     194,   195,   196,   197,   198,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,    18,    19,   236,   237,    22,
      23,    24,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   238,     0,     0,
       0,     0,     0,     0,     0,    28,    29,     0,     0,     0,
      32,     0,     0,     0,     0,     0,   239,    38,   240,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   241,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,    44,     2,   194,   195,   196,   197,   198,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,    18,
      19,   236,   237,    22,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   238,     0,     0,     0,     0,     0,     0,     0,    28,
      29,     0,     0,     0,    32,     0,     0,     0,     0,     0,
     239,    38,   240,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   241,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,    44,    45,     0,     0,
     854,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   556,     2,   194,   195,   196,   197,   198,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,    18,    19,
     236,   237,    22,    23,    24,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     238,     0,     0,     0,     0,     0,     0,     0,    28,    29,
       0,     0,     0,    32,     0,     0,     0,     0,     0,   239,
      38,   240,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   241,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,    44,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   242,     2,   194,   195,
     196,   197,   198,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,    18,    19,   236,   237,    22,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   238,     0,     0,     0,     0,
       0,     0,     0,    28,    29,     0,     0,     0,    32,     0,
       0,     0,     0,     0,   239,    38,   240,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   241,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
      44,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1545
};

static const yytype_int16 yycheck[] =
{
       0,   921,  1225,   630,   921,   330,   712,   150,    80,    77,
     330,    86,    78,   847,   465,   526,   461,   851,   462,  1009,
     847,   372,    80,   374,   851,   276,   150,    77,   826,    58,
      30,    31,   991,   122,   993,    94,   147,     1,    87,    87,
    1094,    41,   735,  1629,   570,   932,    46,   749,   741,    30,
     122,   744,   847,    53,    94,  1641,   851,   138,    58,   122,
      60,    42,   714,     1,   122,    77,   870,   120,   526,   826,
     151,    77,   153,   126,   155,     1,    76,    77,    78,     1,
      80,    87,   795,    87,     3,    85,   138,    87,    94,     1,
      94,     3,   126,   795,    94,    95,    17,     3,    98,   151,
     314,   153,   991,   155,   993,   180,   181,   107,     1,     3,
     110,     3,   991,     5,   993,   116,   115,    77,    17,   120,
     101,   102,   122,   124,   105,   125,   126,    87,     1,     3,
     130,     5,    46,   126,   134,   135,   136,   954,   138,   168,
     974,     1,   142,   177,   144,    69,    70,   147,   148,    17,
     150,   151,   152,   153,   118,   155,   120,     3,   158,    77,
      78,   991,     1,   993,     3,   735,   180,   181,   168,   992,
       3,   741,   115,     1,   744,     3,    17,   177,     1,    73,
       3,   256,    28,     1,   177,     1,   124,   253,     1,     1,
     116,    37,   192,     3,   120,   999,   461,   121,   266,   121,
     119,   407,   202,     1,   204,   556,    53,   125,   276,   121,
     461,   125,   212,   213,     1,   136,   266,   276,     3,   278,
       5,   329,   222,   192,   116,   225,   276,   121,   121,   278,
     278,     3,   124,   335,     3,   343,   276,   136,   278,   347,
     545,     5,   116,     1,   258,     1,   873,   276,   121,    86,
     124,     1,     1,   253,   266,     1,     1,   545,   258,     1,
     107,   121,   262,   277,     1,   616,   266,   410,   136,   115,
     575,     1,   278,   578,   278,   580,   276,   582,   278,     1,
     126,   262,   121,     1,     1,   409,   410,   575,     3,   122,
     578,   749,   580,   121,   582,   136,   296,   335,   121,   213,
    1886,  1260,   302,   121,     5,   121,   116,   120,  1267,   121,
     120,   311,  1271,    28,   124,     3,   276,    77,   278,     3,
     118,   120,   120,   121,     3,     3,    77,   126,   297,     3,
     856,   116,   313,   120,   303,   253,   877,   795,     5,   124,
     112,   113,   115,   180,   181,   192,   380,   116,   266,   555,
     122,   120,     5,   126,    28,   124,   431,   432,   433,   434,
     118,   125,   120,   121,     5,   121,   366,   367,   118,   118,
     120,  1260,   372,   124,   374,   121,   121,     3,  1267,   121,
     380,  1260,  1271,     3,   121,     5,   386,   380,  1267,     5,
     462,   121,  1271,   120,    73,    73,     1,  1214,   116,   121,
     127,   118,   120,   372,   462,   374,  1099,   122,    28,   409,
     410,     5,   953,   413,   414,     3,  2122,   177,     1,   256,
     420,   258,   123,   423,   424,   425,   426,   427,   112,   113,
    1260,     3,   877,   684,   122,   546,  1259,  1267,   122,     3,
     277,  1271,   121,  1266,   769,   770,   771,  1270,   122,   769,
     770,   771,   527,   120,     3,   530,   456,   457,   458,     5,
     115,   461,   462,   116,     1,   465,   555,   258,   468,   550,
    2176,   552,     3,   473,   799,   800,   801,   477,   478,   799,
     800,   801,   482,   483,     1,   929,     3,   521,  1711,   940,
    1203,   942,   555,   119,   494,   495,  1209,    28,   550,   115,
     552,  1203,   122,   537,   504,   505,   266,  1209,   953,   509,
     510,   116,   426,   513,   514,   120,   276,   517,   518,   519,
    1046,   521,   116,     3,   524,   372,   732,   374,   521,  1099,
     638,  1057,   115,   641,   122,   535,   536,   537,    12,    13,
     113,   541,     1,   115,   537,   545,   546,  1601,   118,   763,
     550,  1009,   552,   553,   999,   555,   556,   557,   122,     3,
     560,   121,     5,  1215,  1451,   784,     7,     8,     9,   118,
     570,   120,  1562,   924,   120,   575,   790,   570,   578,   116,
     580,  1233,   582,   120,   798,    65,     3,   556,  1240,   589,
     122,   122,   817,   812,   431,   112,   113,   434,   118,   517,
     518,   519,   122,   120,   818,   870,  1440,  1494,   258,     3,
    1497,     3,   963,  1440,  1412,  1413,   684,   535,   536,   870,
       3,   621,    11,   623,   121,   684,  1443,   852,   853,     3,
     630,   113,   112,   113,   684,  1555,   118,   712,  1555,   113,
     114,   555,   122,   557,   684,  1440,     3,   616,   854,  1608,
     121,   651,   652,   653,   654,  1412,  1413,   116,     7,     8,
       9,   120,   115,   869,     1,   679,   680,   932,   115,   669,
     670,     1,   116,   126,   880,   118,   778,   779,   678,   781,
     121,     1,   123,     3,   684,   666,   667,  1145,   953,   689,
     527,  1149,     3,   530,  1152,  1512,  1154,   112,  1921,   116,
    1527,   461,   953,   703,   806,   807,   808,   809,  1059,   556,
     710,   711,   712,   713,   714,   715,   118,    28,   817,  1608,
     122,   721,   116,   847,   116,   114,     3,   851,  1523,  1608,
    1525,   120,   732,   116,   999,  1725,   717,   718,   719,   113,
     778,   779,   589,   781,   118,  1203,   746,   119,   999,   115,
     750,  1209,   124,   852,   853,     3,   113,   114,  1063,  1110,
     126,   521,     0,     3,   524,   854,   115,   785,   806,   807,
     808,   809,   787,     3,   123,  1063,  1081,   126,  1608,   116,
      28,  1069,     5,   120,  1607,   115,   116,  1075,    28,    37,
     120,   854,   792,  1081,  1487,   813,   796,    74,    28,     3,
     815,     0,    79,   292,   115,     7,     8,     9,     1,    86,
       3,     7,     8,     9,   651,   652,   653,   654,   961,   962,
     309,   821,   822,   823,    28,     3,   826,   827,   828,   904,
     905,     1,   907,   110,   111,   910,   911,   961,   962,  1045,
     929,  1831,   679,   680,   681,   122,  1805,   847,     3,   973,
     850,   851,  1842,     3,   854,     5,   967,   929,   858,   859,
     651,   652,   653,   654,   119,  1216,   929,   115,   868,   869,
     870,   929,     1,   873,    11,   115,   786,   877,    77,   879,
     880,    31,   882,   114,   884,   966,   118,  1238,    87,   120,
       7,     8,     9,  1710,     3,    94,    95,    90,  1715,     7,
       8,     9,    11,     1,   814,  1792,  1793,   982,   126,     7,
       8,     9,  1438,     3,   966,     5,  1805,  1487,   678,  1030,
    1031,   123,   922,   788,   684,   925,  1805,   123,   784,   929,
     126,  1256,   932,   120,   112,   113,  1256,   937,   115,   113,
     940,    31,   942,   943,   122,   115,   116,   120,   122,   126,
     120,   816,   952,   953,   954,   924,   812,   112,   113,  1040,
     135,   961,   962,   138,   964,    11,   966,   967,   882,  1058,
     113,  1788,   786,   973,   974,  1805,   151,   114,   153,   122,
     155,  1804,   119,   120,   119,   122,   115,   116,  1040,   124,
    1196,   120,    14,    15,   963,  1058,   256,   257,   115,   999,
     814,   651,   652,   653,   654,   114,   123,  1213,   922,   126,
     119,   120,  1046,   122,   213,   123,   112,   115,    12,    13,
       3,   119,   785,   937,  2014,   123,   787,  1733,   126,   943,
    1030,  1031,  1659,   120,  1034,  1035,   132,   133,  1038,  1039,
    1040,     3,  1042,   292,  1489,  1045,  1046,   120,  1574,  1263,
     813,  1562,  1704,  1046,   815,  1055,   788,  1057,  1058,  1059,
     309,    79,  1055,  1063,  1057,   112,  1066,   266,   114,  1069,
     122,   122,  1072,   124,   120,  1075,   122,   276,  1078,   278,
    2000,  1081,   136,  1083,   816,   132,   133,   258,     1,   122,
    1059,   124,   110,   111,   148,  1176,   121,  1097,   152,     3,
    2090,   292,  1102,    65,  1562,  1105,   124,   782,   783,   121,
     870,     3,   311,     5,  1114,   113,  1116,   292,   309,   113,
     114,  1938,   120,   116,  1176,  1125,  1215,  1045,   126,   112,
     113,  1045,   115,   114,   309,   810,   811,   113,  1138,   120,
    2130,  1110,   116,  1143,  1144,   982,   122,  1498,   124,   115,
     112,   113,  1215,  1134,   772,   773,   115,  1157,  1158,  1159,
    1160,    74,   991,   992,   993,   115,    79,   115,   114,     0,
     121,   119,   932,    86,   120,  1175,  1176,  1177,   126,  1179,
       7,     8,     9,   119,   802,   803,  1451,  1187,   114,  1189,
     122,    77,   124,   953,   120,   114,  1196,   110,   111,   253,
    1200,   120,   115,   116,  1204,   115,  1206,   120,   112,   113,
    1210,   115,  1059,     3,  1214,  1215,   114,  2012,  2013,   115,
     112,   113,   120,   653,   654,     7,     8,     9,   115,  1494,
     114,  1437,  1497,  1233,  1940,   115,   120,   116,    28,   999,
    1240,   120,   296,   256,   257,   124,    77,  1216,   302,   116,
    1250,   116,   114,   120,    44,   120,    87,   124,   120,  1785,
     114,     3,   461,    94,    95,  1102,   120,   527,  1105,  1238,
     530,    88,    89,    90,   774,   775,  1257,  1904,     3,   772,
     773,   456,   457,   118,    74,    75,    28,   122,   115,   114,
     782,   783,  1750,   468,   116,   120,   123,  1755,   120,   126,
    1758,   115,    44,    28,   804,   805,  1143,   482,   483,   802,
     803,  1102,   115,   122,  1105,   124,  1440,     3,   810,   811,
    1157,  1158,  1159,  1160,  1850,   122,   116,   124,   115,   504,
     505,  1842,    74,    75,   509,   510,   118,   119,   513,   514,
    1187,   123,    28,  1180,   114,  1182,   118,   116,   120,    74,
     120,   120,  1143,   407,    79,   124,   114,   122,    44,   413,
     115,    86,   120,  1714,   114,  1716,  1157,  1158,  1159,  1160,
     120,   425,   116,  1831,   116,   550,   120,   552,   120,  1730,
    1731,   118,   122,   120,  1842,   110,   111,  1593,    74,    75,
     128,   651,   652,   653,   654,   134,     1,   122,     3,  1523,
    1524,  1525,  1526,  1403,  1404,   116,   116,  1407,  1408,   120,
     120,   116,  1412,  1413,   116,   120,   135,  1177,   120,  1179,
      74,   681,   116,    16,   478,    79,   120,  1408,   774,   775,
    1259,  1260,    86,   116,    74,   266,   128,  1266,  1267,    79,
    1440,  1270,  1271,  1443,   116,   276,    86,   278,   120,  1449,
     621,  1451,  1102,   134,  1454,  1105,   110,   111,   804,   805,
     116,  1461,   129,   130,   120,   119,  1466,  1467,  1468,  1900,
     110,   111,   112,   135,   118,   115,   120,   517,   518,   519,
     651,   652,   653,   654,   116,   684,   126,    16,   120,  1489,
     689,  1491,   116,  1143,  1494,   535,   536,  1497,   116,  2126,
    1500,   148,   120,  2014,     1,   152,     3,  1157,  1158,  1159,
    1160,   122,  1512,   712,   527,    10,    11,   530,  1518,  1519,
       3,   122,   721,  1523,  1524,  1525,  1526,  1792,  1793,  1498,
     122,   116,   124,   732,   122,   118,   124,   120,   116,    74,
    1574,     1,  1666,     3,    79,    28,     1,     1,     3,     3,
    1468,    86,   119,   118,  1468,   120,  2014,   115,    69,    70,
     129,   130,  1776,  1777,  1778,  1779,  1780,  1781,  1782,  1783,
     122,  1571,  1572,   118,  1574,   110,   111,  1491,   118,  2090,
      91,  1574,  1582,   414,    95,     1,    97,   122,  1939,  1582,
     122,    74,   124,  1593,    74,   120,    79,  1948,     1,    79,
       3,   118,     1,    86,     3,     1,    86,     3,    74,   113,
     121,  1611,  1612,    79,   113,     1,  2047,     3,  2049,  1619,
      86,  1621,  1622,  1712,   823,  1625,   113,   110,   111,  1629,
     110,   111,  2090,  1633,    44,    45,  1636,   119,   651,   652,
     653,   654,    10,    11,   110,   111,   118,   120,   120,  1712,
     116,  1632,   122,  2004,  2005,   122,   710,   711,    74,  1659,
     714,   715,   127,    79,    74,    75,  1666,  1648,   681,    79,
      86,   870,  1102,    14,    15,  1105,    86,   127,   877,  1593,
    2111,    74,  2113,   882,  2115,   884,    79,   118,   118,   120,
     120,  1451,   127,    86,   110,   111,   122,   122,   124,   126,
     110,   111,   118,   119,   120,   115,  1536,   120,  1538,  1546,
    1710,     3,  1712,  1143,  1536,  1715,  1538,   110,   111,  1794,
     120,  2152,  2153,   116,  2155,   535,   536,  1157,  1158,  1159,
    1160,     3,   120,  1733,  1494,  1735,  1736,  1497,   937,  2170,
     120,  1822,   121,  1824,   122,  1714,   118,  1716,   902,   903,
     902,   903,   651,   652,   953,  2186,    28,   651,   652,    94,
      95,  1730,  1731,     1,   935,    37,  1847,   124,  1849,   115,
    1822,  1771,  1824,   115,  1611,  1612,   115,   122,  1607,  1608,
     118,   118,    74,   115,  1621,   115,  2000,    79,  1788,   827,
     828,   966,  1792,  1793,    86,  1847,  1796,  1849,   118,   118,
     118,   118,    74,   113,   116,  2130,   121,    79,  1808,   122,
    2130,   127,   113,   127,    86,   869,  1850,   126,   110,   111,
    1611,  1612,  1822,   115,  1824,   127,   880,   127,   127,   127,
    1621,   118,   118,   118,   122,   118,    74,   121,   110,   111,
     112,    79,   118,   115,   113,   119,   121,  1847,    86,  1849,
    1850,   121,   116,   684,   126,   116,   116,  1850,   116,  1034,
    1035,     3,   127,  1038,  1039,  1040,   115,   124,  1868,  1869,
    1870,  1871,   110,   111,  1874,   127,   127,   116,  1878,  1879,
     118,  1881,   120,  1883,   116,   115,    28,   124,  2012,  2013,
     124,   115,   115,    56,   115,  1895,   118,  1157,  1158,  1159,
    1160,   118,   118,   113,  1904,   113,   118,  1907,   126,   116,
     116,   116,   113,   115,   113,   115,   120,  1898,   116,  1900,
    1180,   116,  1182,   116,   120,   116,   116,   121,  2009,   126,
     116,  1102,    74,    56,  1105,   124,   124,    79,  1938,   124,
    1940,   124,   124,  1114,    86,   999,     7,   124,   124,    10,
      11,    12,    13,    14,    15,    16,    17,  2009,   124,   116,
     116,  1611,  1612,   116,   118,   116,   121,   116,   110,   111,
    1939,  1621,  1143,   116,   113,  1804,  1805,   127,   116,  1948,
     122,   127,   127,   124,   124,   115,  1157,  1158,  1159,  1160,
     116,   115,   127,   115,   127,   116,   116,  1196,   116,   116,
    1175,  1176,   116,   116,   116,    11,     3,  2007,  2008,  2009,
    2010,  2011,  2012,  2013,   118,   126,   122,   127,   127,  2019,
    2020,  2021,  2022,   126,   119,    44,    45,   124,   122,   118,
    2030,    28,  1792,  1793,   124,  2004,  2005,  1874,   119,  2039,
      37,  2041,    74,   119,  2119,  2120,   115,    79,   118,   122,
    2050,  2051,   113,   114,    86,    74,    75,   116,   116,   116,
      79,   127,   123,     0,   127,   127,  2047,    86,  2049,   118,
      64,   132,   133,   134,   135,   136,   127,    74,   110,   111,
     127,   127,    79,  1874,   116,   127,  2086,  2087,   127,    86,
     116,   110,   111,  2093,  2094,   116,   115,  2097,   116,  2099,
      74,     0,  2102,   116,    41,    79,  2106,    64,   116,   116,
     127,   127,    86,   110,   111,   112,    53,   127,   115,   118,
    2120,   122,  2122,    60,   127,   118,  2126,   124,   118,  2110,
    2111,   118,  2113,   116,  2115,   130,   110,   111,  2138,   118,
      77,   118,   116,    80,  1157,  1158,  1159,  1160,   118,    86,
      87,   118,   118,   118,   118,   118,   118,    94,    95,  1213,
    2160,  2161,   118,   468,   468,  2165,  2160,  1180,   973,  1182,
     107,  2152,  2153,   110,  2155,     3,  2176,   468,    77,  1233,
     850,  1611,  1612,   276,   276,   122,  1240,     1,    87,  2170,
     468,  1621,   908,   130,   309,    94,    95,   468,   135,   136,
      28,   138,  2039,   964,  2041,  2186,  1489,   309,   715,    37,
     425,   148,  1831,   150,   151,   152,   153,   302,   155,   253,
     721,  2110,   414,    94,  1874,    87,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,   136,   258,    87,
       0,    95,    87,   180,   181,  1771,    74,    -1,  2039,   148,
    2041,    79,     1,   152,     3,   192,    -1,    -1,    86,    -1,
      74,    -1,    -1,    -1,    -1,    79,    -1,   204,    -1,  2106,
      -1,    -1,    86,    74,    -1,    -1,   213,    -1,    79,    28,
      -1,    -1,   110,   111,    -1,    86,    -1,   115,    37,    38,
      -1,    -1,  1491,   288,    -1,    -1,   110,   111,   126,    -1,
      -1,    -1,   297,    -1,   118,   119,   120,    -1,   303,   110,
     111,   112,    -1,    -1,   115,  2106,   253,    77,    -1,   256,
     257,   258,    -1,    -1,    -1,    74,    -1,    87,    -1,   266,
      79,    -1,   113,   114,    94,    95,    -1,    86,    -1,   276,
     277,   278,   123,  1518,  1519,    -1,    -1,   128,   129,   130,
      -1,   132,   133,   134,   135,   136,    -1,    -1,    -1,   296,
      -1,   110,   111,   112,    -1,   302,   115,   266,    -1,   118,
      -1,   120,   121,    -1,   311,    -1,   136,   276,    -1,   278,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   148,  2039,
      -1,  2041,   152,    -1,  1593,     3,  1571,  1572,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    -1,    -1,
      -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
     367,    -1,    -1,    -1,    -1,   372,    -1,   374,    -1,    -1,
    1611,  1612,    -1,   135,  1874,    -1,   138,    -1,  1619,    -1,
    1621,  1622,    -1,    -1,  1625,    -1,  2106,     3,    -1,   151,
      -1,   153,  1633,   155,    -1,  1636,    74,    -1,    -1,    -1,
     407,    79,   409,   410,    -1,    -1,   413,   414,    86,    -1,
      -1,    -1,    28,   420,    -1,    -1,    -1,   424,   425,    -1,
     427,    37,    38,    -1,     0,    -1,   330,    -1,    -1,   119,
      -1,    -1,   110,   111,   112,    -1,   266,   115,   116,    -1,
      -1,    -1,    -1,    -1,   413,    -1,   276,    -1,   278,   456,
     457,    -1,    -1,    -1,   461,   462,   425,    -1,    74,    -1,
      -1,   468,    -1,    79,  1733,    -1,   473,    -1,    -1,    -1,
      86,   478,    -1,    -1,    -1,   482,   483,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,   110,   111,   112,   504,   505,   115,
      -1,    77,   509,   510,    -1,    -1,   513,   514,    -1,   478,
      28,    87,    -1,   520,    -1,    -1,    -1,    -1,    94,    95,
     527,    -1,    -1,   530,    -1,    -1,   130,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   545,  2039,
      -1,  2041,    -1,   550,    -1,   552,    -1,    65,   555,   556,
      -1,    -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,
     136,    -1,    -1,    -1,    -1,    -1,    84,    85,   575,    -1,
      -1,   578,   148,   580,    -1,   582,   152,  1822,    -1,  1824,
      98,    -1,   589,   413,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,   425,    -1,   115,   116,   117,
     118,    -1,  1847,    -1,  1849,    -1,  2106,   125,   126,    -1,
     128,   129,   130,   131,    37,    -1,    -1,    -1,    -1,    -1,
     685,    44,    45,    -1,    -1,    -1,    -1,  1868,  1869,  1870,
    1871,    -1,    -1,  1874,    -1,    -1,    -1,  1878,  1879,    -1,
    1881,    -1,  1883,    -1,   651,   652,   653,   654,   478,    -1,
      -1,    74,    75,    -1,  1895,    -1,    79,    -1,    -1,    -1,
      -1,    -1,    -1,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1940,   679,   680,   681,    -1,    -1,   684,    -1,    -1,
      -1,    -1,   689,    -1,   288,     3,    -1,   110,   111,   112,
     266,    -1,    -1,   297,   456,   457,   703,    -1,    -1,   303,
     276,    -1,   278,   710,   711,   712,    -1,   714,   715,    -1,
      28,    -1,    -1,    -1,   721,   684,    -1,    -1,    -1,    37,
     482,   483,   626,    -1,    -1,   732,    -1,    -1,   735,    -1,
      -1,    -1,    -1,    -1,   741,    -1,    -1,   744,    -1,    -1,
      -1,    -1,   504,   505,    -1,    -1,    -1,   509,   510,    -1,
      -1,   513,   514,    -1,    -1,    -1,    74,    -1,    -1,    -1,
      -1,    79,  2007,  2008,  2009,  2010,  2011,    -1,    86,    -1,
      -1,    -1,    -1,    -1,  2019,  2020,  2021,  2022,    -1,    -1,
      -1,    -1,   847,    -1,    -1,   850,   851,    -1,   550,  2030,
     552,    -1,   110,   111,   112,    -1,    -1,   115,  2039,    -1,
    2041,    -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   823,    -1,    -1,   826,
     827,   828,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   413,    -1,    -1,
     847,  2086,  2087,   850,   851,   749,    -1,   854,    -1,   425,
      -1,   106,  2093,  2094,   684,    -1,  2097,    -1,  2099,    -1,
      -1,  2102,   869,   870,    -1,  2106,    -1,    -1,    -1,    -1,
     877,    -1,    -1,   880,    -1,   882,    -1,   884,   782,   783,
     784,   785,   786,    -1,    -1,   789,    -1,    -1,    -1,   954,
      -1,   795,    -1,    -1,    -1,    -1,     1,  2138,     3,    -1,
     869,    -1,   478,    -1,    -1,    -1,   810,   811,   812,   813,
     814,   880,    -1,   817,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   929,    28,  2165,    -1,    -1,    -1,     3,    -1,
     937,    -1,    37,    38,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   953,   954,   852,   853,
      -1,    -1,    -1,    28,   961,   962,    -1,    -1,    -1,   966,
      -1,    -1,    37,    -1,    -1,    -1,   973,    -1,    -1,    74,
      -1,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      -1,    86,    -1,    -1,   991,   992,   993,    44,    45,    -1,
      -1,    -1,   999,     1,    -1,     3,     4,     5,     6,    74,
       8,     9,    -1,   258,    79,   110,   111,   112,    -1,    -1,
     115,    86,    -1,   118,    -1,   120,   121,    74,    75,    -1,
      28,    -1,    79,    -1,    -1,    -1,    -1,  1034,  1035,    86,
      -1,  1038,  1039,  1040,    -1,   110,   111,    -1,    -1,   869,
     115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     880,  1058,  1059,   110,   111,   112,  1063,    65,    -1,   314,
      -1,    -1,  1069,    71,    72,    73,    -1,    -1,  1075,    -1,
      -1,    -1,    -1,    -1,  1081,    -1,    84,    85,    -1,    -1,
      -1,   685,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
      98,    -1,  1099,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,   684,   117,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
     902,   903,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1214,
    1157,  1158,  1159,  1160,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    76,    77,    78,  1175,  1176,
      -1,    -1,    -1,  1180,    85,  1182,    87,    -1,    -1,    -1,
    1187,    -1,    -1,    94,    95,    -1,    -1,    -1,    -1,  1196,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   966,    -1,  1213,  1214,  1215,    -1,
      -1,    -1,    -1,  1117,   125,   126,   127,   128,   129,    -1,
      -1,    -1,    -1,    -1,   135,    -1,  1233,   138,    -1,    -1,
      -1,    -1,    -1,  1240,    -1,    -1,    -1,    -1,    -1,    -1,
     151,  1145,   153,   847,   155,    -1,   850,   851,  1152,    -1,
      -1,    -1,  1259,  1260,    -1,    -1,    -1,    -1,    -1,  1266,
    1267,    -1,    -1,  1270,  1271,    -1,   177,   178,   179,    -1,
      -1,   526,  1034,  1035,    -1,    -1,  1038,  1039,  1040,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   869,    -1,    -1,    -1,    -1,    -1,  1203,
      -1,   212,   213,    -1,   880,  1209,    -1,    -1,    -1,    -1,
     135,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   151,    -1,   153,    -1,
     155,    -1,    -1,   588,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   253,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     954,    -1,    -1,    -1,    -1,   266,    -1,     0,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   276,   621,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1440,    -1,    -1,  1443,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   651,   652,   653,   654,
      -1,   456,   457,    -1,    -1,  1412,  1413,    -1,    -1,    -1,
      -1,    -1,    -1,  1175,  1176,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   482,   483,    -1,
      -1,    -1,    -1,  1440,    77,    -1,  1443,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    87,    -1,    -1,  1512,    -1,   504,
     505,    94,    95,    -1,   509,   510,    -1,    -1,   513,   514,
      -1,   716,  1527,    -1,    -1,   720,    -1,    -1,    -1,   380,
     381,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1487,    -1,    -1,    -1,  1491,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   749,    -1,   407,    -1,    -1,    -1,
      -1,    -1,    -1,   414,    -1,  1512,    -1,    -1,   763,    -1,
      -1,  1518,  1519,    -1,    -1,   426,  1523,  1524,  1525,  1526,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   790,    -1,    -1,    -1,    -1,
     795,    -1,    -1,   798,    -1,   456,   457,    -1,    -1,    -1,
     461,    -1,    -1,    -1,   465,    -1,    -1,   468,    -1,    -1,
      -1,    -1,    -1,   818,  1571,  1572,   477,    -1,    -1,    -1,
     213,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1593,    -1,    -1,    -1,
      -1,    -1,    -1,   504,   505,    -1,    -1,    -1,   509,   510,
    1607,  1608,   513,   514,    -1,    -1,   517,   518,   519,    -1,
    1214,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   266,   535,   536,    -1,    -1,    -1,    -1,
      -1,   456,   457,   276,    -1,   278,    -1,    -1,    -1,   550,
      -1,   552,    -1,   468,   555,  1710,   557,    -1,    -1,    -1,
    1715,    -1,    -1,    -1,    -1,    -1,    -1,   482,   483,  1666,
      -1,   572,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,
     505,    -1,    -1,    -1,   509,   510,    -1,    -1,   513,   514,
      -1,  1756,  1757,    -1,  1759,  1760,    -1,    -1,    -1,  1764,
    1765,  1766,  1767,  1710,    -1,  1712,    -1,    -1,  1715,    -1,
      -1,  1776,  1777,  1778,  1779,  1780,  1781,  1782,  1783,    -1,
      -1,    -1,    -1,  1788,    -1,   550,  1733,   552,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1009,    -1,  1518,  1519,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   678,    -1,    -1,
      -1,    -1,    -1,   684,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1788,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1804,  1805,   710,
      -1,    -1,    -1,   714,    -1,    -1,    -1,    -1,    -1,  1571,
    1572,    -1,    -1,    -1,    -1,  1822,    -1,  1824,   461,    -1,
      -1,   732,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1440,    -1,    -1,  1443,
    1847,    -1,  1849,    -1,    -1,    -1,  1750,  1102,    -1,    -1,
    1105,  1755,  1756,  1757,  1758,  1759,  1760,    -1,    -1,  1114,
    1764,  1765,  1766,  1767,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1938,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1136,  1137,    -1,    -1,    -1,    -1,    -1,  1143,    -1,
    1145,    -1,    -1,    -1,  1149,    -1,    -1,  1152,    -1,  1154,
      -1,    -1,  1157,  1158,  1159,  1160,    -1,    -1,  1512,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   135,    -1,  1527,   138,    -1,    -1,    -1,    -1,    -1,
      -1,  1938,    -1,  1940,    -1,  2000,    -1,   151,    -1,   153,
      -1,   155,    -1,   854,    -1,    -1,    -1,    -1,  1203,    -1,
      -1,    -1,    -1,    -1,  1209,    -1,    -1,   868,   869,   870,
      -1,    -1,    -1,    -1,    -1,    -1,   877,    -1,    -1,   880,
      -1,   882,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1034,
    1035,    -1,    -1,  1038,  1039,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2007,  2008,  2009,  2010,  2011,  2012,  2013,    -1,  1263,    -1,
      -1,   922,  2019,  2020,  2021,  2022,    -1,    -1,    -1,    -1,
      -1,   932,    -1,    -1,    -1,    -1,   937,    -1,    -1,    -1,
      -1,    -1,   943,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   684,   953,    -1,   258,    -1,   689,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   966,    -1,    -1,    -1,    -1,
    1822,    -1,  1824,    -1,   975,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   721,  2086,
    2087,    -1,    -1,    -1,    -1,  1847,    -1,  1849,   999,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1710,    -1,    -1,    -1,
      -1,  1715,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1034,  1035,    -1,    -1,  1038,  1039,  1040,
      -1,    -1,    -1,    -1,  1045,  1046,    -1,    -1,    -1,    -1,
      -1,   966,    -1,    -1,    -1,  1056,    80,    -1,    -1,    -1,
      -1,    -1,  1756,  1757,    -1,  1759,  1760,    -1,    -1,    -1,
    1764,  1765,  1766,  1767,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1776,  1777,  1778,  1779,  1780,  1781,  1782,  1783,
     823,    -1,    -1,    -1,  1788,    -1,    -1,    -1,   122,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1034,
    1035,    -1,    -1,  1038,  1039,  1040,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   870,    -1,    -1,
      -1,    -1,    -1,    -1,   877,   456,   457,    -1,    -1,    -1,
      46,   884,   456,   457,    -1,  2007,  2008,  2009,  2010,  2011,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2019,  2020,  2021,
    2022,   482,   483,    -1,  1175,  1176,    -1,    -1,   482,   483,
      -1,    77,    78,    -1,    -1,    -1,  1531,    -1,    -1,    85,
      -1,    -1,    -1,   504,   505,  1196,    -1,    -1,   509,   510,
     504,   505,   513,   514,   937,   509,   510,    -1,    -1,   513,
     514,    -1,  1213,    -1,  1215,    -1,   520,  1562,    -1,    -1,
     953,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,
     126,    -1,  1233,    -1,  2086,  2087,    -1,    -1,    -1,  1240,
      -1,    -1,    -1,    -1,  1938,    -1,   550,    -1,   552,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1175,  1176,    -1,    -1,    -1,    -1,  1611,  1612,    -1,    -1,
      -1,    -1,    -1,    -1,  1619,    -1,  1621,  1622,    -1,    -1,
    1625,   177,     1,    -1,     3,     4,     5,    -1,  1633,    -1,
      -1,  1636,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2000,    -1,    -1,    28,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   621,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   222,    -1,    -1,   225,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   367,    -1,    -1,    65,   651,   652,   653,
     654,    -1,    71,    72,    -1,    -1,    -1,   253,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    85,    -1,    -1,    -1,
     266,    -1,    -1,  1518,  1519,    -1,    -1,    -1,    -1,    98,
    1725,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     414,    -1,  1737,    -1,    -1,    -1,   115,    -1,    -1,    -1,
     424,    -1,    -1,   427,    -1,  1750,   125,   126,    -1,    -1,
    1755,    -1,    -1,  1758,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1571,  1572,    -1,    -1,
      -1,   735,    -1,    -1,    -1,    -1,  1437,   741,   462,    -1,
     744,    -1,    -1,    -1,   468,    -1,    -1,    -1,    -1,    -1,
    1451,    -1,    -1,    -1,  1187,    -1,    -1,    -1,    -1,    -1,
    1461,    -1,    -1,  1196,    -1,    -1,    -1,  1468,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   380,    -1,  1831,    -1,  1489,    -1,
    1491,    -1,    -1,    -1,    -1,    -1,    -1,  1842,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1518,  1519,    -1,
      -1,   545,    -1,  1868,  1869,  1870,  1871,    -1,    -1,  1874,
     426,   555,    -1,  1878,  1879,    -1,  1881,    -1,  1883,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1895,   575,    -1,    -1,   578,    -1,   580,    -1,   582,   177,
    1905,  1906,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   465,
    1571,  1572,    -1,  1574,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1593,    -1,    -1,   213,    -1,    -1,   902,   903,
      -1,    -1,    -1,  1518,  1519,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   517,   518,   519,    -1,   521,    -1,    -1,   524,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   535,
     536,   537,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1571,  1572,   276,   555,
      -1,    -1,   966,    -1,    -1,    -1,    -1,    -1,    -1,  2014,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2030,    -1,   991,    -1,   993,
      -1,    -1,    -1,    -1,  2039,    -1,  2041,    -1,    -1,    -1,
      -1,    -1,    -1,  1704,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1034,  1035,    -1,    -1,  1038,  1039,    -1,
    1034,  1035,    -1,    -1,  1038,  1039,  1040,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2090,    -1,    -1,  2093,  2094,
      -1,    -1,  2097,    -1,  2099,    -1,    -1,  2102,  1491,    -1,
      -1,  2106,   380,    -1,    -1,    -1,    -1,  2112,   386,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   678,    -1,    -1,  2130,    -1,   106,    -1,    -1,
      -1,    -1,    -1,  2138,    -1,  1099,    -1,    -1,  1102,    -1,
      -1,  1105,   826,   827,   828,    -1,    -1,    -1,    -1,    -1,
    1114,   130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2165,  1822,    -1,  1824,    -1,    -1,    -1,    -1,    -1,    -1,
     854,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1143,
      -1,    -1,    -1,   461,    -1,    -1,  1847,    -1,  1849,    -1,
      -1,     1,    -1,  1157,  1158,  1159,  1160,    -1,  1859,    -1,
    1593,    -1,  2007,  2008,    -1,  2010,  2011,    -1,    -1,    -1,
      -1,  1175,  1176,   192,  2019,  2020,  2021,  2022,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,   521,    -1,   929,   524,  1822,    -1,  1824,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,   537,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,  1847,    -1,  1849,    85,    86,    87,    -1,   557,
      -1,  2086,  2087,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,   570,    -1,    -1,    -1,  1260,    -1,    -1,    -1,
     110,   111,    -1,  1267,    -1,    -1,    -1,  1271,    -1,   288,
      -1,    -1,   122,    -1,   293,   294,    -1,    -1,   297,    -1,
      -1,    -1,    -1,    -1,   303,    -1,   882,     0,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   314,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2007,  2008,  2009,  2010,
    2011,   330,    -1,    -1,    -1,    -1,   335,    -1,  2019,  2020,
    2021,  2022,    -1,    -1,    -1,    -1,   922,    -1,    -1,    -1,
      -1,    -1,    -1,    46,  1058,    -1,    -1,    -1,    -1,  1063,
      -1,    -1,    -1,    -1,   940,  1069,   942,   943,    -1,    -1,
      -1,  1075,    -1,   372,    -1,   374,    -1,  1081,    -1,    -1,
     678,    -1,    -1,    -1,    77,    78,   684,    -1,    -1,    -1,
      -1,    -1,    85,    -1,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    94,    95,    -1,    -1,  2086,  2087,    -1,    -1,    -1,
     409,    -1,  2007,  2008,  2009,  2010,  2011,    -1,     3,    -1,
      -1,    -1,    -1,    -1,  2019,  2020,  2021,  2022,    -1,    -1,
      -1,    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,  1045,
    1046,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,   177,    -1,    -1,    -1,    -1,    74,
      75,  2086,  2087,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,  1487,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1215,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,   520,   107,    -1,    -1,   110,   111,  1518,  1519,   222,
      -1,    -1,   225,    -1,  1518,  1519,   121,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1536,    -1,  1538,    -1,    -1,   556,    -1,    -1,
     253,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   870,   266,    -1,    -1,    -1,    -1,    -1,   877,
    1571,  1572,    -1,   276,    -1,   278,    -1,  1571,  1572,   588,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1177,    -1,  1179,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   616,    -1,    -1,
      -1,    -1,    -1,    -1,  1608,    -1,    -1,  1611,  1612,     1,
      -1,     3,    -1,    -1,   932,  1619,    -1,  1621,  1622,   937,
      -1,  1625,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1633,
      -1,    -1,  1636,    -1,    -1,   953,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   685,   380,    -1,    -1,
     689,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,   999,    74,    75,    -1,    -1,    -1,    79,  1412,  1413,
      82,    83,    -1,    85,    86,    87,    -1,   716,    -1,    -1,
      -1,   720,   721,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,   426,    -1,    -1,   735,    -1,   110,   111,
     112,    -1,   741,   115,   116,   744,    -1,    -1,  1046,    -1,
      -1,    -1,    -1,    -1,   126,    -1,    -1,  1055,    -1,  1057,
      -1,    -1,    -1,    -1,   763,    -1,    -1,    -1,    -1,    -1,
     769,   770,   771,   772,   773,   774,   775,    -1,    -1,   778,
     779,    -1,   781,   782,   783,   784,   785,   786,   787,   788,
      -1,   790,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   798,
     799,   800,   801,   802,   803,   804,   805,   806,   807,   808,
     809,   810,   811,   812,   813,   814,   815,   816,    -1,   818,
      -1,  1805,    -1,    -1,   517,   518,   519,    -1,   521,    -1,
      -1,   524,    -1,    -1,    -1,    -1,    -1,    -1,  1822,    -1,
    1824,    -1,   535,   536,   537,    -1,    -1,    -1,   847,    -1,
      -1,   850,   851,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   555,  1847,    -1,  1849,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1177,
      -1,  1179,    -1,    -1,  1868,  1869,  1870,  1871,    -1,    -1,
    1874,    -1,  1468,    -1,  1878,  1879,    -1,  1881,    -1,  1883,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1895,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   921,    -1,    -1,   924,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   954,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   963,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     4,     5,     6,    -1,     8,     9,    -1,   106,
      -1,    -1,    -1,    -1,    -1,   678,    -1,    -1,    -1,    -1,
      -1,   684,   991,    -1,   993,    -1,    -1,    -1,  1574,    -1,
      -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,  1712,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2007,  2008,    -1,  2010,
    2011,    -1,    -1,  2007,  2008,  2009,  2010,  2011,  2019,  2020,
    2021,  2022,    -1,    -1,    -1,  2019,  2020,  2021,  2022,    71,
      72,    73,    -1,    -1,    -1,    -1,  2030,    -1,    -1,    -1,
      -1,    -1,    84,    -1,    -1,  2039,    -1,  2041,    -1,    -1,
    1059,    -1,    -1,    -1,    -1,   192,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,   113,    -1,    -1,    -1,   117,    -1,    -1,    -1,   121,
      -1,    -1,    -1,   125,   126,  2086,  2087,   129,   130,   131,
    1099,    -1,  2086,  2087,    -1,    -1,    -1,    -1,    -1,  2093,
    2094,  1110,    -1,  2097,    -1,  2099,    -1,    -1,  2102,    -1,
      -1,    -1,  2106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1136,  1137,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1451,  2138,    -1,    -1,    -1,    -1,    -1,
      -1,   288,    -1,  1461,    -1,    -1,   293,   294,    -1,    -1,
     297,    -1,    -1,    -1,    -1,    -1,   303,    -1,    -1,    -1,
      -1,  2165,    -1,    -1,    -1,    -1,    -1,   314,    -1,   882,
      -1,  1489,    -1,  1491,    -1,    -1,  1494,    -1,    -1,  1497,
      -1,    -1,    -1,   330,    -1,    -1,    -1,    -1,   335,    -1,
      -1,    -1,    -1,    -1,    -1,  1214,     1,  1216,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,   922,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1238,
      -1,    -1,    -1,    28,    -1,   372,    -1,   374,    -1,    -1,
     943,    -1,    37,    -1,    -1,    -1,    -1,  1256,    -1,    -1,
      -1,  1260,    -1,    -1,  1263,    -1,    -1,    -1,  1267,    -1,
      -1,    -1,  1271,    -1,  1850,    -1,  1574,    -1,    -1,    -1,
      65,    -1,   409,    -1,  1582,    -1,    71,    72,    73,    74,
      -1,    -1,    -1,    -1,    79,  1593,    -1,    -1,    -1,    84,
      85,    86,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
       4,     5,     6,    98,     8,     9,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,    -1,
     115,   116,   117,    -1,    28,    -1,   106,    -1,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,  1045,  1046,    -1,    -1,    -1,    -1,    -1,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      84,    85,    -1,   520,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,   192,   117,   118,    -1,   120,    -1,    -1,   556,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,  1440,    -1,    -1,  1443,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   180,   181,    -1,    -1,    -1,    -1,    -1,
      -1,   588,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,    -1,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,  1177,    -1,  1179,    -1,  1487,   616,
      -1,    -1,    -1,    -1,  1792,  1793,    -1,    -1,  1796,  1498,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1512,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1527,   256,
     257,   258,  1531,    -1,    -1,    65,    -1,  1536,    -1,  1538,
      -1,    71,    72,    73,   314,    -1,    -1,    -1,    -1,    -1,
     277,    -1,  1850,    -1,    84,    -1,  1555,    -1,   685,    -1,
      -1,    -1,   689,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,   118,   716,
     120,   121,   122,   720,   721,   125,   126,    -1,   128,   129,
     130,   131,   372,    -1,   374,    -1,    -1,    -1,   735,  1608,
      -1,    -1,    -1,    -1,   741,    -1,    -1,   744,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   763,    -1,    -1,    -1,
      -1,    -1,   769,   770,   771,   772,   773,   774,   775,    -1,
      -1,   778,   779,    -1,   781,   782,   783,   784,   785,   786,
     787,   788,    -1,   790,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   798,   799,   800,   801,   802,   803,   804,   805,   806,
     807,   808,   809,   810,   811,   812,   813,   814,   815,   816,
      -1,   818,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1710,    -1,    -1,    -1,  1714,  1715,  1716,    -1,    -1,
     847,    -1,    -1,   850,   851,    -1,  1725,    -1,    -1,    -1,
      -1,  1730,  1731,    -1,    -1,    -1,    -1,    -1,  1737,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     520,    -1,    -1,    -1,    -1,    -1,    -1,  1756,  1757,    -1,
    1759,  1760,    -1,    -1,    -1,  1764,  1765,  1766,  1767,    -1,
      -1,    -1,    -1,    -1,    -1,  1468,    -1,  1776,  1777,  1778,
    1779,  1780,  1781,  1782,  1783,    -1,   556,    -1,    -1,  1788,
      -1,    -1,    -1,   520,   921,    -1,    -1,   924,    -1,    -1,
     527,    -1,    -1,   530,    -1,    -1,  1805,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   588,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   954,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   963,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   616,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   991,    -1,   993,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1574,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1905,  1906,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   651,   652,   653,   654,    -1,    -1,
      -1,    -1,  1059,    -1,    -1,    -1,    -1,    -1,    -1,  1938,
    1939,    -1,    -1,    -1,    -1,    -1,   716,    -1,    -1,  1948,
     720,    -1,   679,   680,   681,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,   735,    -1,    -1,    -1,    -1,
      -1,   741,  1099,    -1,   744,    -1,   703,    -1,    -1,    -1,
      -1,    -1,    28,  1110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   763,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2000,    -1,    -1,    -1,  2004,  2005,    -1,   735,  1136,
    1137,    -1,    -1,    -1,   741,    -1,    -1,   744,    -1,    65,
     790,    -1,    -1,    -1,    -1,    71,    72,    73,   798,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   818,    -1,
      -1,    -1,    98,    -1,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
     621,   117,   118,    -1,    -1,    -1,   122,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,  1214,    -1,  1216,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   653,   654,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1238,    -1,  2112,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1256,
      -1,  2130,    -1,  1260,    -1,    -1,  1263,    -1,    -1,    -1,
    1267,    -1,    -1,    -1,  1271,    -1,    -1,    -1,    -1,    -1,
      -1,   921,    -1,    -1,   924,    -1,    -1,  1850,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   963,    -1,    -1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   991,    28,   993,    -1,    -1,    -1,    -1,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,   991,   992,   993,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    77,    -1,    -1,    -1,    -1,    -1,  1059,
      -1,    -1,    86,    87,   100,    -1,    -1,    -1,    -1,    -1,
      94,    95,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,  1440,    -1,    -1,  1443,    -1,   112,    -1,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1099,
      -1,    -1,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,
    1110,    -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   148,    -1,   150,    -1,   152,    -1,
    1487,    -1,    -1,    -1,    -1,    -1,  1136,  1137,    -1,    -1,
      -1,  1498,  1099,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1512,   180,   181,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1527,    -1,    -1,    -1,  1531,    -1,    -1,    -1,    -1,  1536,
      -1,  1538,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   213,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1555,    -1,
    1157,  1158,  1159,  1160,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1216,    -1,    -1,    -1,
      -1,    -1,    -1,  1180,    -1,  1182,    -1,    -1,    -1,   253,
      -1,    -1,   256,   257,   258,    -1,    -1,    -1,  1238,    -1,
      -1,    -1,   266,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1608,   276,   277,   278,    -1,    -1,    -1,    -1,    -1,
    1260,    -1,    -1,  1263,    -1,    -1,    -1,  1267,    -1,    -1,
      -1,  1271,   296,    -1,    -1,    -1,    -1,    -1,   302,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   311,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1259,  1260,    -1,    -1,    -1,    -1,    -1,  1266,
    1267,    -1,    -1,  1270,  1271,    -1,    -1,    -1,    -1,    -1,
      -1,  1102,    -1,    -1,  1105,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1114,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1710,    -1,    -1,    -1,  1714,  1715,  1716,
      -1,    -1,  1143,    -1,    -1,    -1,    -1,    -1,  1725,    -1,
      -1,    -1,    -1,  1730,  1731,    -1,  1157,  1158,  1159,  1160,
    1737,    -1,    -1,   407,    -1,   409,   410,    -1,    -1,   413,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1756,
    1757,   425,  1759,  1760,    -1,    -1,    -1,  1764,  1765,  1766,
    1767,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1776,
    1777,  1778,  1779,  1780,  1781,  1782,  1783,    -1,    -1,    -1,
      -1,  1788,    -1,    -1,    -1,    -1,     1,   461,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1805,    -1,
      -1,    -1,    -1,    -1,   478,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,  1487,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,  1498,    -1,
      65,    66,    -1,   527,    -1,    -1,   530,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1487,  1531,    -1,    -1,    -1,   100,  1536,    -1,  1538,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,  1905,  1906,
     115,   116,    -1,    -1,    -1,  1555,    -1,    -1,    -1,    -1,
      -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1938,  1939,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1948,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   627,    -1,    -1,    -1,    -1,  1608,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   651,   652,   653,
     654,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2000,    -1,    -1,    -1,  2004,  2005,    -1,
    1607,  1608,    -1,    -1,    -1,   679,   680,   681,    -1,    -1,
     684,    -1,    -1,    -1,    -1,   689,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   703,
      -1,    -1,    -1,    -1,    -1,    -1,   710,   711,   712,    -1,
     714,   715,    -1,    -1,    -1,    -1,    -1,   721,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,   732,    -1,
      -1,   735,    -1,    -1,  1714,    -1,  1716,   741,    -1,    -1,
     744,    -1,    -1,    -1,    -1,  1725,    -1,    -1,    -1,    -1,
    1730,  1731,    28,    -1,    -1,    -1,    -1,  1737,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,  2112,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,  2130,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   823,
      -1,    -1,    -1,    -1,   100,  1805,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   847,    -1,    -1,   850,   851,    -1,    86,
    1611,  1612,    -1,    -1,    -1,    -1,    -1,    -1,  1619,    -1,
    1621,  1622,    -1,    -1,  1625,   869,   870,  1804,  1805,    -1,
      -1,    -1,  1633,   877,    -1,  1636,   880,   881,   882,    -1,
     884,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   150,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1905,  1906,    -1,    -1,    -1,
      -1,    -1,    -1,   937,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   180,   181,    -1,    -1,    -1,    -1,   953,
     954,    -1,    -1,    -1,    -1,    -1,    -1,   961,   962,  1939,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1948,   973,
      -1,    -1,    -1,    -1,    -1,    -1,   213,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   991,   992,   993,
      -1,    -1,    -1,    -1,    -1,   999,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   253,    -1,    -1,   256,
     257,   258,    -1,    -1,  2004,  2005,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   296,
      -1,    -1,    -1,    -1,    -1,   302,    -1,    -1,   314,    -1,
      -1,    -1,    -1,    -1,   311,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   330,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1099,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1868,  1869,  1870,
    1871,    -1,    -1,  1874,  1118,    -1,    -1,  1878,  1879,    -1,
    1881,    -1,  1883,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2112,    -1,  1895,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2130,    -1,    -1,  1157,  1158,  1159,  1160,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     407,    -1,   409,   410,    -1,    -1,  1180,    -1,  1182,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1213,
    1214,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   461,    -1,    -1,    -1,    -1,  1233,
      86,    -1,    -1,    -1,    -1,    -1,  1240,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,  1259,  1260,    -1,    -1,    -1,
      -1,    -1,  1266,  1267,    -1,    -1,  1270,  1271,    -1,  2030,
      -1,    -1,    28,    -1,   130,    -1,    -1,    -1,  2039,    -1,
    2041,    -1,    -1,   520,    -1,    -1,    -1,    -1,    -1,    -1,
     527,    -1,    -1,   530,   150,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,   180,   181,    -1,    -1,    84,    85,
      -1,    -1,  2093,  2094,    -1,    -1,  2097,    -1,  2099,    -1,
      -1,  2102,    98,    -1,    -1,  2106,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,   213,    -1,   115,
     116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,
     126,   127,   128,   129,   130,   131,    -1,  2138,    -1,    -1,
     626,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   253,    -1,    -1,
     256,   257,   258,    -1,  2165,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   651,   652,   653,   654,    -1,    -1,
      -1,   277,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1440,    -1,    -1,  1443,
     296,    -1,   679,   680,   681,    -1,   302,    -1,    -1,    -1,
      -1,    -1,   689,    -1,    -1,   311,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   703,    -1,    -1,    -1,
      -1,    -1,    -1,   710,   711,   712,    -1,   714,   715,    -1,
      -1,    -1,    -1,  1487,   721,    -1,    -1,  1491,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   732,    -1,    -1,   735,    -1,
      -1,    -1,    -1,   749,   741,    -1,    -1,   744,  1512,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   763,    -1,  1523,
    1524,  1525,  1526,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   782,   783,   784,   785,
     786,    -1,    -1,   789,   790,    -1,    -1,    -1,    -1,   795,
      -1,   407,   798,   409,   410,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   810,   811,   812,   813,   814,    -1,
      -1,   817,   818,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   823,    -1,    -1,  1593,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1607,  1608,   461,   852,   853,    -1,    -1,
     847,    -1,    -1,   850,   851,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   870,    -1,    -1,    -1,    -1,    -1,    -1,
     877,    -1,    -1,    -1,    -1,   882,    -1,   884,    -1,    -1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1666,    -1,   520,    -1,    -1,    -1,    -1,    -1,
      -1,   527,    -1,    -1,   530,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
     937,    -1,    -1,    -1,    -1,    -1,  1710,    -1,    -1,    -1,
      -1,  1715,    -1,    -1,    66,    -1,   953,   954,    -1,    -1,
      -1,    -1,    74,    75,   961,   962,    -1,    79,    -1,  1733,
      82,    83,    -1,    85,    86,    87,   973,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,   991,   992,   993,    -1,   110,   111,
     112,    -1,   999,   115,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   126,    -1,   128,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1788,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   651,   652,   653,   654,    -1,
    1804,  1805,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   679,   680,   681,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   689,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   703,    -1,    -1,
      -1,    -1,    -1,    -1,   710,   711,   712,    -1,   714,   715,
      -1,    -1,  1099,    -1,    -1,   721,    -1,    -1,    -1,    -1,
      -1,  1117,    -1,    -1,    -1,    -1,   732,    -1,    -1,   735,
      -1,    -1,    -1,    -1,    -1,   741,    -1,    -1,   744,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1145,
      -1,    -1,    -1,    -1,    -1,    -1,  1152,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1157,  1158,  1159,  1160,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1938,    -1,  1940,    -1,    -1,    -1,
      -1,    -1,    -1,  1180,    -1,  1182,    -1,    -1,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,  1203,    -1,  1196,
      -1,    -1,    -1,  1209,    -1,    -1,    -1,   823,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,  1213,  1214,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   847,    -1,    -1,   850,   851,  1233,    -1,    -1,    -1,
      -1,    -1,    -1,  1240,    -1,    -1,    -1,    -1,  2012,  2013,
      -1,    -1,    65,    -1,   870,    -1,    -1,  1263,    71,    72,
      73,   877,  1259,  1260,    86,    -1,   882,    -1,   884,  1266,
    1267,    84,    85,  1270,  1271,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,    -1,    -1,   120,   130,    -1,
      -1,   124,   125,   126,   136,   128,   129,   130,   131,    -1,
      -1,   937,    -1,    -1,    -1,    -1,   148,    -1,   150,    -1,
     152,    -1,    -1,    -1,    -1,    -1,    -1,   953,   954,    -1,
      -1,    -1,    -1,    -1,    -1,   961,   962,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   973,   180,   181,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   991,   992,   993,    -1,    -1,
      -1,    -1,    -1,   999,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   213,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   253,    -1,    -1,   256,   257,   258,    -1,    -1,    -1,
      -1,    -1,    86,  1440,    -1,    -1,  1443,    -1,    -1,     1,
      -1,     3,     4,     5,     6,   277,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   296,    -1,    28,    -1,    -1,    -1,
     302,    -1,    -1,  1099,    -1,    -1,   130,    -1,    -1,    -1,
    1487,    -1,   136,    -1,  1491,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   148,    -1,   150,    -1,   152,    -1,
      -1,    -1,    -1,    65,    -1,  1512,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,  1523,  1524,  1525,  1526,
      -1,    -1,    84,    85,    -1,    -1,   180,   181,    -1,    -1,
      -1,  1157,  1158,  1159,  1160,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,  1180,   117,  1182,    -1,   120,    -1,
      -1,    -1,    -1,   125,   126,   127,   128,   129,   130,   131,
    1196,    -1,    -1,    -1,    -1,   407,    -1,   409,   410,    -1,
      -1,   413,    -1,    -1,    -1,    -1,  1593,  1213,  1214,    -1,
      -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,    -1,   253,
    1607,  1608,   256,   257,   258,    -1,    -1,  1233,     1,    -1,
       3,     4,     5,     6,  1240,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,   277,    -1,    -1,    -1,    -1,    -1,   461,
      -1,    -1,    -1,  1259,  1260,    28,    -1,    -1,    -1,    -1,
    1266,  1267,   296,    -1,  1270,  1271,   478,    -1,   302,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1666,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   520,    -1,
      -1,    84,    85,    -1,    -1,   527,    -1,    -1,   530,    -1,
      -1,    -1,    -1,  1710,    -1,    98,    -1,    -1,  1715,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,    -1,  1733,   120,    -1,    -1,
      -1,   124,   125,   126,  1750,   128,   129,   130,   131,  1755,
    1756,  1757,  1758,  1759,  1760,    -1,    -1,    -1,  1764,  1765,
    1766,  1767,    -1,   407,    -1,   409,   410,    -1,    -1,   413,
    1776,  1777,  1778,  1779,  1780,  1781,  1782,  1783,    -1,    -1,
      -1,   425,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1788,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1804,  1805,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1440,    -1,    -1,  1443,    -1,   651,
     652,   653,   654,    -1,   478,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   679,   680,   681,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1487,    -1,    -1,    -1,  1491,   520,    -1,    -1,    -1,
      -1,   703,    -1,   527,    -1,    -1,   530,    -1,   710,   711,
      -1,    -1,   714,   715,    -1,    -1,  1512,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1523,  1524,  1525,
    1526,    -1,    -1,   735,    -1,    -1,    -1,    -1,    -1,   741,
      -1,    -1,   744,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1938,    -1,  1940,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1593,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1607,  1608,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   823,    -1,    -1,    -1,    -1,    -1,   651,   652,   653,
     654,    -1,    -1,    -1,    -1,  2012,  2013,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   847,    -1,    -1,   850,   851,
      -1,    -1,    -1,    -1,    -1,   679,   680,   681,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   869,   870,    -1,
    1666,    -1,    -1,    -1,    -1,   877,    -1,    -1,   880,   703,
      -1,    -1,   884,    -1,    -1,    -1,   710,   711,    -1,    -1,
     714,   715,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   735,    -1,    -1,  1710,    -1,    -1,   741,    -1,  1715,
     744,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   937,    -1,  1733,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   953,   954,    -1,    -1,    -1,    -1,    -1,    -1,   961,
     962,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      -1,   973,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,   991,
     992,   993,  1788,    -1,    -1,    -1,    -1,   999,    -1,    -1,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,  1804,  1805,
      -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,   136,
      -1,    -1,    -1,   847,    -1,    -1,   850,   851,    -1,    -1,
      -1,   148,    -1,   150,    -1,   152,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,   869,    71,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   880,    -1,    -1,    84,
      85,    -1,    -1,   180,   181,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,    -1,  1099,    -1,    -1,
     125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
     954,    -1,    -1,    -1,    -1,    -1,   253,   961,   962,   256,
     257,   258,  1938,    -1,  1940,    28,    -1,    -1,    -1,   973,
      -1,    -1,    -1,    -1,    -1,  1157,  1158,  1159,  1160,    -1,
     277,    -1,    -1,    -1,    -1,    -1,    -1,   991,   992,   993,
      -1,    -1,    -1,    -1,    -1,   999,    -1,    -1,  1180,   296,
    1182,    -1,    65,    -1,    -1,   302,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1213,  1214,    -1,    -1,    98,  2012,  2013,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,  1233,   115,   116,   117,    -1,    -1,   120,  1240,    -1,
      -1,   124,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1259,  1260,    -1,
      -1,    -1,    -1,    -1,  1266,  1267,    -1,    -1,  1270,  1271,
      -1,    -1,    -1,    -1,    -1,  1099,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     407,    -1,   409,   410,    -1,    -1,   413,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1157,  1158,  1159,  1160,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,  1180,    -1,  1182,    -1,
      -1,   478,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1213,
    1214,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   520,    -1,    -1,    -1,    -1,    -1,  1233,
     527,    65,    -1,   530,    -1,    -1,  1240,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      84,    85,    -1,    -1,    -1,  1259,  1260,    -1,  1440,    -1,
      -1,  1443,  1266,  1267,    98,    -1,  1270,  1271,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1487,    -1,    -1,    -1,  1491,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1512,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1523,  1524,  1525,  1526,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   651,   652,   653,   654,    -1,    -1,
      -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   679,   680,   681,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   703,    -1,    45,    46,
      -1,  1593,    -1,   710,   711,    -1,    -1,   714,   715,    -1,
      -1,    -1,    -1,    -1,    -1,  1607,  1608,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1440,    -1,   735,  1443,
      77,    78,    -1,    -1,   741,    82,    -1,   744,    -1,    -1,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   112,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1487,  1666,    -1,    -1,    -1,   125,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1512,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1523,
    1524,  1525,  1526,    -1,    -1,    -1,    -1,    -1,  1710,    -1,
      -1,    -1,    -1,  1715,    -1,    -1,    -1,    -1,    -1,   176,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     847,    -1,   189,   850,   851,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   869,    -1,    -1,    -1,   213,    -1,    -1,    -1,
      -1,    -1,    -1,   880,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   258,    -1,
      -1,    -1,    -1,  1607,  1608,    -1,  1788,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   253,    -1,    -1,    -1,
      -1,    -1,  1804,  1805,    -1,    -1,    -1,    -1,    -1,   266,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   276,
      -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   311,    -1,    -1,    -1,    -1,    -1,   954,    -1,    -1,
      -1,    -1,  1666,    -1,   961,   962,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   973,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
      -1,    -1,    -1,    -1,   991,   992,   993,    -1,    -1,    -1,
      -1,    -1,   999,    -1,    -1,    -1,  1710,    -1,    -1,    -1,
      -1,  1715,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    66,    -1,    -1,    -1,  1938,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,   426,    -1,    -1,    28,
     407,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1788,    -1,   100,    -1,    -1,   426,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,    -1,
    1804,  1805,  1099,    -1,    -1,    -1,    65,   121,    -1,    -1,
      -1,    -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   461,    84,    85,   464,    -1,    -1,
    2012,  2013,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,   118,
    1157,  1158,  1159,  1160,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     517,   518,   519,  1180,    -1,  1182,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   535,   536,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1213,  1214,   555,    -1,
     557,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   568,    -1,    -1,  1938,    -1,  1233,    -1,    -1,    -1,
      -1,   130,    -1,  1240,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1259,  1260,    -1,    -1,   626,   604,    -1,  1266,
    1267,    -1,    -1,  1270,  1271,    -1,    -1,    -1,    -1,    -1,
     640,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
      -1,   651,   652,   653,   654,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,  2012,  2013,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,   698,    -1,
     677,    -1,    -1,    -1,    -1,    -1,    -1,   684,     1,    66,
       3,     4,     5,     6,    -1,     8,     9,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,   726,    -1,    85,    86,
      87,    -1,    -1,   710,    -1,    28,    -1,   714,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   751,    -1,   110,   111,   732,    -1,    -1,    -1,   288,
      -1,   118,    -1,   120,   121,    -1,    -1,    -1,   297,    -1,
      -1,    -1,    65,    -1,   303,    -1,    -1,    -1,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   789,
      -1,    84,    85,    -1,    -1,    -1,    -1,   797,    -1,    -1,
      -1,    -1,    -1,  1440,    -1,    98,  1443,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   817,    -1,   112,
      -1,    -1,   115,   116,   117,   118,    -1,   120,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,   372,    -1,   374,    -1,    -1,    -1,    -1,
    1487,    -1,   852,   853,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1512,    -1,   854,   855,    -1,
     409,    -1,   882,    -1,    -1,    -1,  1523,  1524,  1525,  1526,
      -1,    -1,   869,   870,    -1,    -1,    -1,    -1,    -1,    -1,
     877,    -1,    -1,   880,   881,   882,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   922,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   931,    -1,    28,    -1,    -1,    -1,
     937,    -1,    -1,    -1,    -1,    -1,   943,    -1,    -1,    -1,
    1607,  1608,    -1,    -1,    -1,    -1,   953,    -1,    -1,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,   520,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    -1,    88,    89,    90,    -1,
      -1,    -1,   999,    -1,    -1,    -1,    98,   556,    -1,  1666,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,   116,   117,   118,    -1,   120,    -1,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1045,    -1,
      -1,    -1,    -1,  1710,    -1,    -1,    -1,  1054,  1715,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   616,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1102,    -1,    -1,  1105,  1106,  1107,    -1,  1109,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1117,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1125,    -1,    -1,    -1,    -1,
      -1,    -1,  1132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1143,    -1,    -1,    -1,    -1,    -1,    -1,
    1150,  1788,    -1,    -1,    -1,  1155,   685,  1157,  1158,  1159,
    1160,    -1,    -1,    -1,    -1,    -1,    -1,  1804,  1805,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1205,   735,    -1,    -1,    -1,
      -1,  1211,   741,    -1,    -1,   744,    -1,    -1,    -1,  1196,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,  1234,    -1,  1213,    -1,  1215,    71,
      72,    73,    -1,    -1,    -1,    -1,  1223,    -1,    -1,    -1,
     311,    -1,    84,    85,    -1,    -1,  1233,    -1,    -1,    -1,
      -1,    -1,    -1,  1240,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,  1281,    -1,   115,   116,   117,   118,    -1,   120,    -1,
      -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,  1938,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   847,    -1,
      -1,   850,   851,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1333,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1346,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   426,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2012,  2013,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   921,    -1,    -1,   924,    -1,  1397,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   954,    -1,    -1,    -1,  1429,
      -1,    -1,    -1,  1433,   963,    -1,    -1,    -1,    -1,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1437,    -1,   991,    -1,   993,    -1,    28,    -1,    -1,    -1,
      -1,    -1,    -1,  1450,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1460,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1468,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,  1489,    -1,  1491,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
    1059,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,   116,   117,   118,    -1,   120,    -1,
      -1,    -1,    -1,   125,   126,   626,   128,   129,   130,   131,
    1099,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   640,
      -1,  1110,    -1,   644,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1573,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1611,  1612,    -1,    -1,  1615,  1593,  1617,    -1,    -1,
    1620,  1621,    -1,    -1,    -1,    -1,  1626,  1627,    -1,  1629,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   698,    -1,  1639,
      -1,  1641,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   712,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   726,   727,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1214,    -1,  1216,  1688,    -1,
     751,    -1,    -1,    -1,    -1,    -1,    -1,  1697,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1238,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1704,   789,    -1,
      -1,  1260,    -1,    -1,    -1,    -1,   797,    -1,  1267,    -1,
      -1,     1,  1271,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,   817,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,   852,   853,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,  1784,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,   882,    -1,    -1,    84,    85,    86,    87,    -1,    -1,
    1807,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,
    1860,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,  1874,  1875,    -1,    -1,    -1,    -1,
      -1,    -1,  1882,    -1,    -1,    -1,  1886,    -1,  1888,    -1,
      -1,    -1,     3,    -1,    -1,    -1,    -1,  1897,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1440,    -1,    -1,  1443,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    1940,    -1,    -1,  1920,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,  1487,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,  1498,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,  1512,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1527,   110,
     111,   112,    -1,    -1,   115,    -1,    -1,  1536,    -1,  1538,
      -1,   122,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1555,    -1,    -1,    -1,
      -1,  2031,  2032,    -1,  2034,    -1,  2036,    -1,    -1,  2039,
    2040,  2041,    -1,    -1,    -1,  1106,  1107,    -1,  1109,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1117,    -1,    -1,  1120,
      -1,    -1,    -1,    -1,  1125,    -1,    -1,    -1,    -1,    -1,
      -1,  1132,  1133,    -1,    -1,    -1,    -1,    -1,    -1,  1608,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1150,
    1151,    -1,    -1,    -1,  1155,  2095,    -1,    -1,  2098,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2106,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,
      53,  2141,    -1,    -1,  1205,    -1,    -1,    -1,    -1,    -1,
    1211,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      46,    -1,    -1,    76,    77,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1234,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1710,    -1,    -1,    -1,  1714,  1715,  1716,    -1,    -1,
      -1,    77,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1730,  1731,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
    1281,  1282,    -1,    -1,    -1,    -1,    -1,  1756,  1757,   142,
    1759,  1760,    -1,    -1,    -1,  1764,  1765,  1766,  1767,   125,
     126,    -1,    -1,    -1,    -1,   158,    -1,  1776,  1777,  1778,
    1779,  1780,  1781,  1782,  1783,    -1,    -1,    -1,    -1,  1788,
      -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1333,    -1,  1335,    -1,  1805,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1346,  1347,    -1,    -1,    -1,
      -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   212,
     213,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   213,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1397,    -1,  1399,    -1,
     253,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   266,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   276,    -1,    -1,    -1,   253,  1429,    -1,
    1431,    -1,  1433,    -1,  1435,    -1,    -1,    -1,    -1,    -1,
     266,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
     276,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,  1938,
    1939,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1948,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,   380,    88,    89,
      90,  2000,    -1,   386,    -1,  2004,  2005,    -1,    98,    -1,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   380,   115,    -1,   117,   118,    -1,
     386,    -1,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,    -1,   426,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1599,    -1,
     426,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   461,    -1,
      -1,    -1,    -1,    -1,  1615,  1616,  1617,  1618,    -1,  1620,
    1621,    -1,    -1,    -1,   477,  1626,  1627,    -1,  1629,    -1,
    1631,    -1,    -1,    -1,    -1,   461,    -1,    -1,  1639,  1640,
    1641,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,   517,   518,   519,    -1,   521,    -1,
      -1,   524,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    -1,   535,   536,   537,    -1,    -1,  1688,  1689,    -1,
      -1,   517,   518,   519,    -1,   521,  1697,  1698,   524,    -1,
     553,    -1,   555,    -1,   557,    -1,    -1,    -1,    -1,   535,
     536,   537,    -1,    65,    -1,    -1,    -1,   570,    -1,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   555,
      -1,   557,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   570,    -1,    98,    -1,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,
      -1,    -1,    -1,   125,   126,   127,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   670,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   678,    -1,    -1,    -1,    -1,
      -1,   684,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   678,    -1,    -1,    -1,    -1,    -1,   684,  1860,
      -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,  1875,    -1,    -1,    -1,    -1,  1880,
      -1,  1882,  1883,    -1,  1885,  1886,    -1,  1888,    -1,  1890,
      -1,    28,    -1,    -1,    -1,  1896,  1897,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,  1940,
      -1,    -1,    79,    -1,    -1,    82,    83,    84,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,    -1,   115,   116,
     117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   868,    -1,   870,    -1,    -1,
      -1,    -1,    -1,    -1,   877,    -1,    -1,    -1,    -1,   882,
    2031,  2032,    -1,  2034,  2035,  2036,    -1,    -1,    -1,  2040,
    2041,    -1,    -1,    -1,   870,    -1,    -1,    -1,    -1,    -1,
      -1,   877,    -1,    -1,    -1,    -1,   882,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   922,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   932,
      -1,    -1,    -1,    -1,   937,    -1,    -1,    -1,    -1,    -1,
     943,    -1,    -1,    -1,  2095,  2096,   922,  2098,  2099,    -1,
     953,    -1,  2103,    -1,    -1,    -1,   932,    -1,    -1,    -1,
      -1,   937,    -1,    -1,    -1,    -1,    -1,   943,    -1,    -1,
      -1,    -1,    -1,     1,    -1,    -1,    -1,   953,    -1,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    2141,    -1,    -1,    -1,    -1,    -1,   999,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,   999,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,  1045,  1046,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,  1055,    -1,  1057,    -1,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1045,
    1046,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,  1055,
      -1,  1057,   110,   111,   112,   113,   114,   115,     3,    -1,
     118,   119,   120,   121,    -1,   123,    -1,    -1,   126,    -1,
     128,   129,   130,    -1,   132,   133,   134,   135,   136,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,  1177,    -1,  1179,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,   107,    -1,    -1,   110,   111,    -1,    -1,    -1,
      -1,  1177,    -1,  1179,     0,     1,   121,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,  1451,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1461,    -1,
      -1,    -1,    65,    66,    -1,  1468,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,  1451,    79,    -1,    -1,    -1,
      -1,    84,    85,    86,    87,  1461,  1489,    -1,  1491,    -1,
      -1,  1494,  1468,    -1,  1497,    98,    -1,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,   115,  1489,   117,  1491,    -1,    -1,  1494,    -1,
      -1,  1497,   125,   126,    -1,   128,   129,   130,   131,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,  1574,    -1,    -1,    -1,    74,    75,    -1,    -1,  1582,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
    1593,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1574,    -1,
      -1,   100,    -1,    -1,    -1,    -1,  1582,    -1,    -1,    -1,
      -1,   110,   111,    -1,    -1,     0,     1,  1593,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1792,
    1793,    66,    -1,  1796,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,  1792,  1793,    -1,    -1,
    1796,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,   116,    -1,    -1,    -1,    -1,    -1,  1850,    -1,    -1,
      -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     0,     1,  1850,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,     0,     1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,     0,     1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,     0,     1,    -1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,     0,     1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,     0,     1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,     0,
       1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,    -1,   128,   129,   130,
     131,   132,   133,   134,   135,   136,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,   116,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,   116,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,   116,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
     116,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,   116,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,   116,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,   116,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,   116,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,     0,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,     0,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,     0,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,   124,   125,   126,    -1,   128,   129,   130,   131,
       0,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,     0,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,   116,   117,
     118,    -1,   120,   121,   122,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,   120,   121,   122,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,   120,   121,   122,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,   120,   121,   122,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,   122,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,   121,
     122,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      71,    72,    73,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,
     121,   122,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
     120,   121,   122,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,   120,   121,   122,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,   120,   121,   122,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,   120,   121,   122,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,   120,   121,   122,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,   120,   121,   122,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
      -1,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    71,    72,
      73,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,    -1,   115,     1,   117,     3,     4,     5,     6,   122,
       8,     9,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    84,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,    -1,   115,   116,   117,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,    -1,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    71,    72,    73,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    84,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,    -1,   115,   116,
     117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,    85,
      86,    -1,    88,    89,    90,    -1,     1,    -1,     3,     4,
       5,     6,    98,     8,     9,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,    -1,   115,
     116,   117,   118,    28,   120,    -1,   122,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,
      -1,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    84,
      85,    86,    -1,    88,    89,    90,    -1,     1,    -1,     3,
       4,     5,     6,    98,     8,     9,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    28,    -1,    -1,   122,    -1,   124,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      84,    85,    86,    -1,    88,    89,    90,    -1,     1,    -1,
       3,     4,     5,     6,    98,     8,     9,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    28,    -1,    -1,   122,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
      -1,    -1,   125,   126,   127,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,   116,   117,   118,    -1,
     120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,
     117,   118,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,   116,   117,   118,    -1,   120,    -1,    -1,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,    -1,
      -1,   122,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,
      -1,    -1,    -1,    -1,   122,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,   120,    -1,
      -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,
      -1,    -1,    -1,   122,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
     116,   117,    -1,    -1,    -1,    -1,   122,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,
     120,    -1,    -1,    -1,   124,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,    -1,   120,    -1,    -1,    -1,
     124,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,   120,
      -1,    -1,    -1,   124,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,    -1,   120,    -1,    -1,    -1,   124,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,
      -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
     116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,   120,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,   116,   117,   118,    -1,
      -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,    -1,   120,    -1,    -1,    -1,
      -1,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,   120,
      -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,
      -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,   116,   117,    -1,    -1,   120,    -1,    -1,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,   116,   117,   118,    -1,    -1,    -1,
      -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,
      -1,   120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
      -1,   117,    -1,    -1,    -1,   121,   122,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,    -1,    -1,   120,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,
     120,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,
     117,    -1,    -1,   120,    -1,    -1,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,
      -1,   122,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,   127,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,    -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     125,   126,   127,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,
     122,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   125,   126,   127,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
      -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,   124,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,
      -1,    -1,   122,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,
     117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,
     127,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,   116,   117,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,
      -1,    -1,    -1,   124,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,    -1,    -1,    -1,   122,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,
      -1,     3,     4,     5,     6,    -1,     8,     9,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,    -1,   117,    -1,    -1,    -1,    -1,   122,    -1,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,
      72,    73,     1,    -1,     3,     4,     5,     6,    -1,     8,
       9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,
     102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
     112,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,
     122,    -1,    -1,   125,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    71,    72,    73,     1,    -1,     3,     4,     5,
       6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    28,   102,   103,   104,   105,   106,   107,   108,
     109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,
      -1,    -1,    -1,   122,    -1,    -1,   125,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      -1,    -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,
       3,     4,     5,     6,    -1,     8,     9,    -1,    84,    85,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    -1,    -1,    28,   102,   103,   104,   105,
     106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,
     116,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
      73,     1,    -1,     3,     4,     5,     6,    -1,     8,     9,
      -1,    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,
     103,   104,   105,   106,   107,   108,   109,    -1,    -1,   112,
      -1,    -1,   115,    -1,   117,    -1,    -1,    -1,    -1,   122,
      -1,    -1,   125,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    71,    72,    73,     1,    -1,     3,     4,     5,     6,
      -1,     8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,
      -1,    28,   102,   103,   104,   105,   106,   107,   108,   109,
      -1,    -1,   112,    -1,    -1,   115,   116,   117,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,
      -1,    -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,
       4,     5,     6,    -1,     8,     9,    -1,    84,    85,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    -1,    -1,    28,   102,   103,   104,   105,   106,
     107,   108,   109,    -1,    -1,   112,    -1,    -1,   115,   116,
     117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,
       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    -1,
      84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    -1,    -1,    28,   102,   103,
     104,   105,   106,   107,   108,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   125,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      71,    72,    73,     1,    -1,     3,     4,     5,     6,    -1,
       8,     9,    -1,    84,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      28,   102,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   125,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,
      -1,    -1,    -1,    71,    72,    73,     1,    -1,     3,     4,
       5,     6,    -1,     8,     9,    -1,    84,    85,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    -1,    -1,    28,   102,   103,   104,   105,   106,   107,
     108,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   125,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    -1,    -1,    -1,    -1,    -1,    71,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,
      85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    -1,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,    -1,    -1,   112,    -1,    -1,
     115,    -1,   117,     0,     1,    -1,     3,     4,     5,    -1,
     125,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,    -1,    -1,   115,   116,
     117,   118,    -1,   120,   121,    -1,    -1,    -1,   125,   126,
       0,     1,    -1,     3,     4,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,     0,
       1,   121,     3,     4,     5,   125,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,     0,     1,
     121,     3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,     0,     1,   121,
       3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,     3,
       4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,     1,   121,     3,     4,
       5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,     1,   121,     3,     4,     5,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,     1,   121,     3,     4,     5,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,     1,   121,     3,     4,     5,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,     1,   121,     3,     4,     5,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,     1,   121,     3,     4,     5,   125,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
       1,   121,     3,     4,     5,   125,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,
     121,     3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,
       3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,     3,
       4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,     1,   121,     3,     4,
       5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,     1,   121,     3,     4,     5,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,     1,   121,     3,     4,     5,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,     1,   121,     3,     4,     5,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,     1,   121,     3,     4,     5,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,     1,   121,     3,     4,     5,   125,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
       1,   121,     3,     4,     5,   125,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,
     121,     3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,
       3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,     3,
       4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,     1,   121,     3,     4,
       5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,     1,   121,     3,     4,     5,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,    -1,     1,   121,     3,     4,     5,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    88,    -1,    -1,    91,    92,    93,    94,    -1,    96,
      -1,    98,    99,   100,    -1,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
     117,   118,    -1,     1,   121,     3,     4,     5,   125,   126,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,    -1,     1,   121,     3,     4,     5,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,
      -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    88,
      -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
      -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,   118,
      -1,     1,   121,     3,     4,     5,   125,   126,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,    -1,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
       1,   121,     3,     4,     5,   125,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,
      71,    72,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    88,    -1,    -1,
      91,    92,    93,    94,    -1,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,   107,   108,    -1,   110,
     111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,
     121,     3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,
      72,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    88,    -1,    -1,    91,
      92,    93,    94,    -1,    96,    -1,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,   107,   108,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,
       3,     4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,
      -1,    74,    75,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    -1,    -1,    91,    92,
      93,    94,    -1,    96,    -1,    98,    99,   100,    -1,   102,
     103,   104,   105,   106,   107,   108,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,   117,   118,    -1,     1,   121,     3,
       4,     5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    -1,    -1,    91,    92,    93,
      94,    -1,    96,    -1,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,   117,   118,    -1,     1,   121,     3,     4,
       5,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    88,    -1,    -1,    91,    92,    93,    94,
      -1,    96,    -1,    98,    99,   100,    -1,   102,   103,   104,
     105,   106,   107,   108,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,   117,   118,    -1,     1,   121,     3,     4,     5,
     125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    68,    -1,    -1,    71,    72,    -1,    74,    75,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    88,    -1,    -1,    91,    92,    93,    94,    -1,
      96,    -1,    98,    99,   100,    -1,   102,   103,   104,   105,
     106,   107,   108,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,   117,   118,     1,    -1,     3,     4,     5,    -1,   125,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      68,    -1,    -1,    71,    72,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      88,    -1,    -1,    91,    92,    93,    94,    -1,    96,    -1,
      98,    99,   100,    -1,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,   112,    -1,    -1,   115,    -1,   117,
     118,     1,    -1,     3,     4,     5,    -1,   125,   126,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    68,    -1,
      -1,    71,    72,    -1,    74,    75,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    88,    -1,
      -1,    91,    92,    93,    94,    -1,    96,    -1,    98,    99,
     100,     0,   102,   103,   104,   105,   106,   107,   108,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,   117,   118,    -1,
      -1,    -1,    -1,    -1,    -1,   125,   126,    -1,    -1,    -1,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    -1,    -1,    -1,    66,    -1,    68,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    -1,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,     0,    -1,
      99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,   118,
      -1,    -1,   121,   122,    -1,   124,    -1,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    -1,    -1,    -1,    66,    -1,    68,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    -1,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    96,     0,    -1,    99,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
      -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,    -1,   121,
     122,    -1,   124,    -1,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    -1,    -1,
      -1,    66,    -1,    68,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      -1,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    96,     0,    -1,    99,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,
      -1,    -1,    -1,   118,    -1,    -1,   121,   122,    -1,   124,
      -1,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    -1,    -1,    -1,    66,    -1,
      68,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    -1,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    -1,    96,     0,
      -1,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   121,   122,    -1,   124,    -1,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    -1,    -1,    -1,    66,    -1,    68,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    -1,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    -1,    -1,    99,   100,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     121,   122,    -1,   124,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,
      -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,    -1,    -1,    -1,    -1,    -1,   122,
      -1,    -1,    -1,   126,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   126,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   126,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     126,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    76,    77,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,     3,    -1,    -1,    -1,   105,    -1,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    68,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    78,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,    -1,    -1,   115,    -1,   117,    -1,    -1,
      -1,    -1,    -1,    -1,   124,    -1,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,    -1,    -1,   115,    -1,    -1,   118,    -1,    -1,    -1,
      -1,    -1,   124,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,
     124,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   121,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   121,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     121,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,    -1,    -1,     0,     1,    -1,
       3,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   121,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    76,    77,    -1,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,   100,   101,    -1,
      -1,    -1,   105,    -1,    -1,    -1,    -1,   110,   111,   112,
      -1,    -1,   115,    -1,    -1,   118,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,   107,    -1,    -1,   110,   111,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,    -1,     1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,    -1,
     118,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,    -1,    -1,     1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,    -1,
      -1,   118,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,     1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,   115,
      -1,    -1,   118,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,    -1,   118,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    76,    77,    -1,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,     0,     1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,   100,   101,    -1,    -1,
      -1,   105,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,
      -1,   115,    -1,    -1,   118,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    -1,     1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,
      -1,    -1,   115,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,
      85,    86,    87,    -1,    -1,     1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,   116,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,     1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,
     116,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,
      -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,
      87,    -1,    -1,     1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,   116,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,    -1,    -1,    -1,    -1,   116,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,
      -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    -1,    -1,    -1,    -1,   116,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
       1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,    -1,    -1,    -1,    -1,   116,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,     1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,    -1,    -1,    -1,    -1,   116,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,     1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,    -1,    -1,   115,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,     1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,
      -1,   115,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,
      86,    87,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,   115,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    82,    83,    -1,    85,    86,    87,
      -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,    -1,    -1,
      -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,   112,    -1,    -1,   115,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,
      82,    83,    -1,    85,    86,    87,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,
     112,    -1,    -1,   115,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,    -1,    -1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,    -1,
      -1,   115,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,   115,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,
      -1,    79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,
      -1,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,    -1,    -1,   115,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
      -1,    -1,    82,    83,    -1,    85,    86,    87,     1,    -1,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     110,   111,    -1,    -1,    -1,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,
      83,    -1,    85,    86,    87,     1,    -1,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,
      -1,    -1,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    82,    83,    -1,    85,
      86,    87,     1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82,    83,
      -1,    85,    86,    87,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,   107,    -1,    -1,   110,   111,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    80,    81,    -1,    -1,
      -1,    85,    86,    87,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    82,    83,    -1,    85,    86,    87,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    -1,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
      -1,    85,    86,    87,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,    -1,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   110,   111,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
      75,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,
      85,    86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,   111,   112,    -1,    -1,
     115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   126,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    85,
      86,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   110,   111,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   122,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     121
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    53,    65,    66,    74,    75,
      76,    77,    79,    80,    81,    82,    83,    85,    86,    87,
     100,   101,   105,   110,   111,   112,   115,   118,   138,   139,
     140,   142,   167,   204,   205,   206,   207,   208,   209,   264,
     267,   268,   271,   272,   273,   274,   275,   276,   277,   279,
     283,   286,   287,   288,   289,   290,   291,   296,   297,   306,
     307,   308,   315,   316,   320,   323,   328,   357,   360,   361,
     379,   380,   382,   383,   384,   385,   386,   387,    77,   124,
       5,    31,   209,   381,   209,   115,   115,   115,   142,   209,
     381,   277,   278,   315,   323,    37,   140,   209,   305,   306,
     308,   310,   311,   312,   314,   315,   323,   326,   327,   332,
     113,   118,   139,   140,   209,   122,   124,   118,   122,   121,
     112,   113,   204,   209,   122,   142,   209,   122,   124,   121,
     113,   122,   124,   122,   121,   122,   140,   209,   315,     1,
      31,    37,    38,   118,   138,   140,   206,   208,   209,   264,
     274,   275,   277,   279,   308,   312,   315,   323,   326,   327,
     328,   330,   338,   339,   340,   341,    37,    38,   140,   315,
     340,   115,   126,     1,    29,    30,    31,    32,    33,    65,
     116,   138,   209,   263,   267,   269,   270,   277,   279,   283,
     284,   285,   291,   295,   303,   304,   344,   345,   346,   347,
     348,   349,   323,   115,   308,   315,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    46,    47,    66,    85,
      87,   100,   122,   142,   163,   164,   263,   268,   269,   277,
     280,   284,   286,   294,   359,   362,   363,   364,   369,   370,
     371,    31,    76,   124,   206,   208,   296,   360,   361,   379,
     380,   387,     1,   206,   273,   290,   296,   328,   357,   383,
       1,   382,   383,     0,   209,   381,   381,     5,   119,   381,
       1,     4,     6,     8,     9,    65,    71,    72,    73,    84,
      85,    98,   102,   103,   104,   105,   106,   107,   108,   109,
     112,   115,   117,   125,   126,   128,   129,   130,   131,   142,
     168,   169,   209,   210,   211,   212,   215,   216,   220,   221,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   241,   243,   244,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     381,   393,   394,   395,   396,   139,   209,   122,   142,   209,
     277,   323,   126,   115,   126,   116,   303,   304,   348,   349,
     323,   326,   327,   305,   310,   314,   315,   116,   315,   116,
     315,   315,    85,   142,   193,   194,   196,   198,   202,   203,
     209,   221,   235,   236,   244,   256,   261,   294,   118,   113,
     113,   118,     1,    68,    78,    80,    81,    85,    88,    91,
      92,    93,    94,    96,    98,    99,   115,   117,   118,   121,
     142,   143,   144,   145,   146,   147,   148,   149,   150,   165,
     166,   168,   169,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   185,   189,   190,   191,   192,   209,   216,
     241,   295,   307,   309,   315,   323,   328,   329,   358,    80,
      81,   209,   263,   267,   277,   280,   283,   291,   298,   299,
       1,   121,   191,   192,   140,   209,     1,   209,   265,   266,
       1,   121,   266,   299,    65,   193,   195,   197,   199,   200,
     201,   209,     1,   121,   191,   192,   299,     1,   121,   191,
     192,     1,   121,   191,   192,   140,   209,   120,   120,   120,
     122,   323,   308,   312,   315,     1,   119,   363,   370,   371,
     363,   370,   371,     1,   118,   120,   120,   323,   118,   127,
     139,   209,   257,   261,   262,   120,   122,   142,   209,   121,
     122,   121,   122,   315,    37,   115,   126,   128,   138,   140,
     209,   263,   269,   277,   279,   284,   305,   306,   315,   321,
     323,   324,   327,     1,   116,   120,     1,   116,   120,     1,
     120,     1,   120,   116,   116,   308,   115,   308,   115,   115,
       1,   118,     1,   121,     1,    37,    38,   118,   209,   263,
     269,   277,   280,   284,   315,   340,   341,     1,   118,     1,
     359,   362,   370,   371,   359,   362,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    86,    88,    89,
      90,   118,   124,   186,   187,   188,   209,   216,   221,   237,
     239,   244,   257,   258,   259,   320,   350,   351,   354,   355,
     356,   363,   364,   365,   366,   367,   368,   370,   371,   373,
     374,   375,   376,   377,   378,   121,    31,   209,   381,   209,
     204,   205,   207,   208,   305,   306,   312,   315,   323,   328,
     330,   363,   371,   206,   296,   119,   236,   116,     1,   115,
     169,   212,   217,   220,   222,   242,   243,   245,   115,   221,
     244,   221,   244,   115,   209,   263,   269,   277,   280,   284,
     302,   261,   115,   115,   302,   261,   115,   115,   115,   115,
     115,   115,   222,   245,   116,   237,   239,   259,   269,   277,
     279,   284,   292,   342,   381,   122,   170,   171,   213,   218,
     237,   122,     1,   121,   122,     1,     7,     8,     9,   115,
     123,   126,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,   119,   238,   171,   213,   214,   224,   246,   112,
     132,   133,   129,   130,    10,    11,   227,   249,    12,    13,
     113,   114,    14,    15,   128,   134,   135,    16,    17,   136,
     238,   116,     7,     8,     9,   115,   123,   126,   238,   112,
     132,   133,   129,   130,    10,    11,    12,    13,   113,   114,
      14,    15,   128,   134,   135,    16,    17,   136,   238,   116,
     116,   107,   209,   295,   388,   391,   392,   122,   122,   127,
     139,   261,   262,   127,   139,   261,   262,   116,   116,   116,
     116,   305,   310,   314,   116,   116,   305,   119,    11,   114,
     120,   119,   136,   136,   115,   315,   323,   324,    65,   193,
     201,   209,   201,     1,   209,   263,   277,   280,   291,   300,
     295,   328,   329,   115,   142,   209,   209,   295,     1,   115,
     300,   112,   115,   209,   295,   118,   370,   371,   370,   371,
     370,   118,   370,   371,   118,   118,     1,   121,   118,     1,
       1,   118,   120,   120,    69,    70,    91,    95,    97,   121,
      69,    70,   121,   118,     1,   189,   190,     1,   189,   190,
       1,   119,   115,   118,   124,   209,   281,   282,   305,   311,
     313,   315,   323,   330,   331,   332,     1,   295,   303,   346,
     323,   309,   315,   115,   124,   149,   150,   165,   166,   168,
     169,   178,   209,   295,   113,   142,   209,   209,   263,   277,
     280,   113,   113,   119,   120,     1,   118,   122,    28,   141,
     209,   209,   114,   120,   119,   326,   338,   338,   338,   118,
     120,   121,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   213,   214,   216,   236,   257,   294,
     335,   336,   305,   308,   310,   312,   314,   305,   312,   122,
     237,   258,   333,   334,   370,   371,   370,   371,   338,   339,
     338,   339,   127,   127,   127,    51,   344,   345,     1,   266,
     122,   122,     1,   121,   191,   192,     1,   121,   191,   192,
     122,   116,   209,   303,   304,   315,   323,   324,   348,   349,
     127,   139,   261,   262,   315,   323,   327,   323,   115,   126,
     321,     1,     1,   120,     1,    51,   209,   344,   345,   120,
       1,    51,   209,   344,   345,   120,     1,    51,   209,   344,
     345,   120,    51,   209,   344,   345,     3,    28,    44,    74,
      75,   116,   317,   318,   319,   237,   139,   209,   121,   122,
     118,   118,   124,   261,   262,   124,   115,   115,     1,   115,
      52,    53,    54,    56,    57,    58,    59,    62,    86,   209,
     259,   320,   350,   373,   377,   115,   209,   118,   118,   118,
     213,   214,   239,   259,   115,   277,   115,   115,   182,   209,
     118,   118,   118,   124,   123,   238,     1,   123,   118,   120,
     239,   259,   238,   116,   120,   239,     1,   365,   366,   365,
     366,   350,   351,   359,   362,   350,   351,   359,   362,     1,
       1,   381,   381,   140,   209,   122,   122,   323,   312,   315,
     363,   371,   363,   371,   371,   236,   118,    65,   138,   209,
     221,   244,   269,   277,   279,   284,   293,   343,     1,     1,
       7,     8,     9,   115,   123,   126,     7,     8,     9,   115,
     123,   126,   209,   294,   113,   115,   126,   209,   263,   269,
     277,   280,   284,   315,   322,   323,   325,   209,   263,   269,
     277,   280,   284,   301,   239,   342,   370,   209,   126,   325,
     301,   237,   381,   381,   381,   237,   221,   244,   343,   116,
     209,   269,   277,   279,   284,   324,   116,   123,     1,   161,
     162,     1,   121,   120,   127,     1,   161,   162,   121,     1,
     161,   162,     1,   209,   116,   214,   218,   219,   258,     1,
     209,   239,   259,   213,   237,     1,   224,   246,   224,   246,
     224,   246,   225,   247,   225,   247,   226,   248,   226,   248,
     227,   249,   227,   249,   227,   249,   213,   214,   229,   250,
     213,   214,   229,   250,   213,   214,   230,   251,   213,   214,
     231,   252,   213,   214,   232,   253,   233,   254,   234,   255,
     124,   213,   214,   239,   240,   259,   260,   213,   237,     1,
     209,   116,   218,   219,     1,   209,   239,   259,   213,   237,
     224,   246,   224,   246,   224,   246,   225,   247,   225,   247,
     226,   248,   226,   248,   227,   249,   227,   249,   227,   249,
     227,   249,   213,   214,   229,   250,   213,   214,   229,   250,
     213,   214,   230,   251,   213,   214,   231,   252,   213,   214,
     232,   253,   233,   254,   234,   255,   124,   239,   240,   259,
     260,   213,   237,   113,   114,   209,   389,   390,   209,   121,
     388,   391,   392,   392,   127,   127,   127,   127,   127,   127,
     193,   194,   196,   198,   209,   202,   194,   196,   198,   239,
     240,   259,   260,   239,   240,   259,   260,   315,   323,   114,
     119,   114,   122,   113,   122,   209,   263,   277,   280,   324,
     315,   323,   330,   331,   182,   118,   118,   118,   282,   305,
     315,   323,   122,   209,   122,   209,   324,   209,   315,   115,
     121,   172,   173,   172,   173,   370,   370,   370,   211,   370,
     370,     1,   335,   336,   116,   261,   262,   122,   118,   120,
       1,   295,   303,   346,   323,   305,   313,   315,   124,   320,
     209,   115,   309,   309,   209,   118,     1,   118,     1,   118,
     282,   203,   113,   201,   201,   261,   262,   265,   191,   192,
       1,   121,   266,   119,   124,   119,   124,   119,   200,   196,
     209,   119,   370,   371,     1,   118,   120,   118,   120,   118,
     153,   154,   157,   158,   159,   121,   151,   154,   118,   121,
     153,   154,   157,   158,   159,   119,    37,   330,   331,   332,
     333,   334,   337,     1,   121,   266,     1,   121,   266,     1,
     121,   191,   192,   315,   323,   324,   116,   116,   116,   127,
     127,   127,   323,   321,   116,   348,   349,   127,   139,   261,
     262,   344,   345,   295,   344,   344,   344,   345,   116,   115,
     116,   120,   318,   116,   116,   116,     1,   161,   162,   350,
     351,   124,   124,   350,   351,   239,   259,   239,   259,   116,
     239,   259,   124,   261,   262,   124,   115,   115,   350,   115,
     214,   259,   115,   124,    56,     1,   116,   118,   209,   239,
     259,   372,   118,   118,   118,   118,   118,   381,   115,   237,
     237,   209,   350,   351,    90,   214,   258,    88,    89,    90,
     237,   258,   214,   258,   237,   258,   113,   312,   371,   371,
     118,   138,   139,   116,   138,   269,   277,   279,   284,   324,
     116,     1,   209,   116,   218,   219,     1,   209,   239,   259,
       1,   209,   116,   218,   219,     1,   209,   239,   259,   116,
     116,   324,   203,   116,   315,   325,   348,   349,   261,   262,
     113,   323,   115,   322,   126,   113,   126,   209,   263,   269,
     277,   280,   284,   325,   116,   116,   116,   116,   261,   262,
     126,   126,   325,   120,   116,   120,   120,   120,   116,   116,
     224,   246,   381,     1,   121,   213,   237,     1,     1,   116,
     120,   116,   127,   127,     1,   120,   124,   124,   120,   124,
     124,   116,   127,   127,   124,   124,   124,   124,   209,   209,
     118,   120,   209,   381,   121,   121,   124,   124,   124,   124,
     124,   124,   124,   124,   315,   323,   196,   203,   113,   122,
     122,   209,   323,   315,   116,   118,   323,   305,   116,   122,
     122,   209,   116,     1,   161,   162,   281,   315,   209,   115,
     305,   313,   313,   261,   262,   115,   116,   118,   114,   203,
     114,   114,   118,     1,   118,   194,   209,   193,   194,   193,
     198,   122,     1,   155,   156,     1,   155,   156,   371,     1,
     335,   336,   120,   121,   333,   334,     1,   118,     1,   118,
     323,   321,   116,   116,   116,   127,   127,   127,   324,   327,
     239,   116,   318,     1,   350,   351,   350,   351,   116,   116,
     116,   116,     1,   350,   116,   239,   350,   351,   124,   124,
     259,   116,   239,   259,    56,   259,   372,   381,   115,   350,
     124,   118,     1,   118,     1,   116,   259,   372,     3,   116,
     124,   381,   116,   116,   120,   115,   115,   182,   116,   116,
       1,   116,   116,   127,   127,   116,   127,   127,   116,   114,
     315,   323,   325,   116,   116,   116,   127,   127,   203,   322,
     116,   348,   349,   261,   262,   203,   261,   262,   113,   126,
     115,   333,   127,   127,   261,   262,   261,   262,   126,   342,
     209,   209,   237,     1,   214,   258,   213,   214,   213,   214,
     236,   256,   213,   214,   236,   256,   213,   214,   213,   214,
     236,   256,   213,   214,   236,   256,   213,   214,   236,   256,
     213,   214,   236,   256,   213,   214,   236,   256,   213,   214,
     236,   256,   389,   118,   118,   114,   203,   122,   370,   305,
     119,   122,     1,   115,   124,   124,   114,   191,   192,   118,
     191,   192,   119,   119,   337,   121,   333,   334,     1,   191,
     192,   191,   192,   116,   350,   350,   350,   350,   350,   351,
     116,   115,   372,   116,   239,   259,   239,   350,     1,   116,
     239,   259,   352,   353,   381,   118,   353,     3,   116,   124,
     122,   182,   237,   237,     1,     1,   322,   116,   114,   116,
     116,   127,   127,   114,   127,   127,   203,   261,   262,   342,
     127,   127,   127,   127,   261,   262,   116,   116,   116,   116,
     114,   335,   261,   262,   261,   262,   191,   192,   194,   194,
     120,   121,     1,    64,    64,   239,   259,   116,   239,   259,
     116,   118,   116,   118,   350,   351,   116,   350,   351,   116,
     120,   124,   115,     3,   116,   124,   353,   118,   353,    73,
     182,   183,   184,   116,   116,   116,   120,   114,   127,   127,
     116,   127,   127,   118,   121,   350,   350,   116,   116,   118,
     350,   239,   350,   351,   118,   352,   353,   237,   353,   118,
     353,   116,   124,     3,   116,   124,   370,   370,   121,   183,
     122,   182,   224,   246,   333,   116,   116,   116,   116,   116,
     124,   118,   353,   353,   118,   353,   184,   116,   350,   118,
     118,   118,   353,   116,   116,   116,   124,   121,   116,   118,
     118,   118,   353,   118,   116,   118
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
      case 138: /* "guess_type" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 10836 "grammar.ec"
	break;
      case 139: /* "type" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 10845 "grammar.ec"
	break;
      case 140: /* "base_strict_type" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 10854 "grammar.ec"
	break;
      case 141: /* "base_strict_type_name" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 10863 "grammar.ec"
	break;
      case 142: /* "strict_type" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 10872 "grammar.ec"
	break;
      case 143: /* "class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10881 "grammar.ec"
	break;
      case 144: /* "constructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10890 "grammar.ec"
	break;
      case 145: /* "destructor_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10899 "grammar.ec"
	break;
      case 146: /* "virtual_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10908 "grammar.ec"
	break;
      case 147: /* "class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10917 "grammar.ec"
	break;
      case 148: /* "virtual_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10926 "grammar.ec"
	break;
      case 149: /* "class_function_definition" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10935 "grammar.ec"
	break;
      case 150: /* "class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10944 "grammar.ec"
	break;
      case 151: /* "instance_class_function_definition_start" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10953 "grammar.ec"
	break;
      case 152: /* "instance_class_function_definition_start_error" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10962 "grammar.ec"
	break;
      case 153: /* "instance_class_function_definition" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10971 "grammar.ec"
	break;
      case 154: /* "instance_class_function_definition_error" */

/* Line 1009 of yacc.c  */
#line 234 "grammar.y"
	{ FreeClassFunction((yyvaluep->classFunction)); };

/* Line 1009 of yacc.c  */
#line 10980 "grammar.ec"
	break;
      case 155: /* "data_member_initialization" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 10989 "grammar.ec"
	break;
      case 156: /* "data_member_initialization_error" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 10998 "grammar.ec"
	break;
      case 157: /* "data_member_initialization_list" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11007 "grammar.ec"
	break;
      case 158: /* "data_member_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11016 "grammar.ec"
	break;
      case 159: /* "data_member_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11025 "grammar.ec"
	break;
      case 160: /* "members_initialization_list_coloned" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11034 "grammar.ec"
	break;
      case 161: /* "members_initialization_list" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11043 "grammar.ec"
	break;
      case 162: /* "members_initialization_list_error" */

/* Line 1009 of yacc.c  */
#line 258 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMembersInit); };

/* Line 1009 of yacc.c  */
#line 11052 "grammar.ec"
	break;
      case 163: /* "instantiation_named" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11061 "grammar.ec"
	break;
      case 164: /* "instantiation_named_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11070 "grammar.ec"
	break;
      case 168: /* "instantiation_unnamed" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11079 "grammar.ec"
	break;
      case 169: /* "instantiation_unnamed_error" */

/* Line 1009 of yacc.c  */
#line 230 "grammar.y"
	{ FreeInstance((yyvaluep->instance)); };

/* Line 1009 of yacc.c  */
#line 11088 "grammar.ec"
	break;
      case 172: /* "default_property" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11097 "grammar.ec"
	break;
      case 173: /* "default_property_error" */

/* Line 1009 of yacc.c  */
#line 232 "grammar.y"
	{ FreeMemberInit((yyvaluep->memberInit)); };

/* Line 1009 of yacc.c  */
#line 11106 "grammar.ec"
	break;
      case 174: /* "default_property_list" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11115 "grammar.ec"
	break;
      case 175: /* "default_property_list_error" */

/* Line 1009 of yacc.c  */
#line 257 "grammar.y"
	{ FreeList((yyvaluep->list), FreeMemberInit); };

/* Line 1009 of yacc.c  */
#line 11124 "grammar.ec"
	break;
      case 178: /* "property" */

/* Line 1009 of yacc.c  */
#line 243 "grammar.y"
	{ FreeProperty((yyvaluep->prop)); };

/* Line 1009 of yacc.c  */
#line 11133 "grammar.ec"
	break;
      case 189: /* "struct_declaration" */

/* Line 1009 of yacc.c  */
#line 241 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 11142 "grammar.ec"
	break;
      case 190: /* "struct_declaration_error" */

/* Line 1009 of yacc.c  */
#line 241 "grammar.y"
	{ FreeClassDef((yyvaluep->classDef)); };

/* Line 1009 of yacc.c  */
#line 11151 "grammar.ec"
	break;
      case 191: /* "struct_declaration_list" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 11160 "grammar.ec"
	break;
      case 192: /* "struct_declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 256 "grammar.y"
	{ FreeList((yyvaluep->list), FreeClassDef); };

/* Line 1009 of yacc.c  */
#line 11169 "grammar.ec"
	break;
      case 193: /* "template_datatype" */

/* Line 1009 of yacc.c  */
#line 262 "grammar.y"
	{ FreeTemplateDataType((yyvaluep->templateDatatype)); };

/* Line 1009 of yacc.c  */
#line 11178 "grammar.ec"
	break;
      case 194: /* "template_type_argument" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11187 "grammar.ec"
	break;
      case 195: /* "template_type_parameter" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11196 "grammar.ec"
	break;
      case 196: /* "template_identifier_argument" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11205 "grammar.ec"
	break;
      case 197: /* "template_identifier_parameter" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11214 "grammar.ec"
	break;
      case 198: /* "template_expression_argument" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11223 "grammar.ec"
	break;
      case 199: /* "template_expression_parameter" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11232 "grammar.ec"
	break;
      case 200: /* "template_parameter" */

/* Line 1009 of yacc.c  */
#line 260 "grammar.y"
	{ FreeTemplateParameter((yyvaluep->templateParameter)); };

/* Line 1009 of yacc.c  */
#line 11241 "grammar.ec"
	break;
      case 201: /* "template_parameters_list" */

/* Line 1009 of yacc.c  */
#line 263 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateParameter); };

/* Line 1009 of yacc.c  */
#line 11250 "grammar.ec"
	break;
      case 202: /* "template_argument" */

/* Line 1009 of yacc.c  */
#line 261 "grammar.y"
	{ FreeTemplateArgument((yyvaluep->templateArgument)); };

/* Line 1009 of yacc.c  */
#line 11259 "grammar.ec"
	break;
      case 203: /* "template_arguments_list" */

/* Line 1009 of yacc.c  */
#line 264 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTemplateArgument); };

/* Line 1009 of yacc.c  */
#line 11268 "grammar.ec"
	break;
      case 204: /* "class_entry" */

/* Line 1009 of yacc.c  */
#line 238 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 11277 "grammar.ec"
	break;
      case 205: /* "class_decl" */

/* Line 1009 of yacc.c  */
#line 239 "grammar.y"
	{ Context ctx = curContext; PopContext(ctx); FreeContext(ctx); delete ctx; };

/* Line 1009 of yacc.c  */
#line 11286 "grammar.ec"
	break;
      case 206: /* "class" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11295 "grammar.ec"
	break;
      case 207: /* "class_head" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11304 "grammar.ec"
	break;
      case 208: /* "class_error" */

/* Line 1009 of yacc.c  */
#line 240 "grammar.y"
	{ FreeClass((yyvaluep->_class)); };

/* Line 1009 of yacc.c  */
#line 11313 "grammar.ec"
	break;
      case 209: /* "identifier" */

/* Line 1009 of yacc.c  */
#line 195 "grammar.y"
	{ FreeIdentifier((yyvaluep->id)); };

/* Line 1009 of yacc.c  */
#line 11322 "grammar.ec"
	break;
      case 210: /* "primary_expression" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11331 "grammar.ec"
	break;
      case 211: /* "i18n_string" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11340 "grammar.ec"
	break;
      case 215: /* "primary_expression_error" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11349 "grammar.ec"
	break;
      case 216: /* "postfix_expression" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11358 "grammar.ec"
	break;
      case 218: /* "argument_expression_list" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11367 "grammar.ec"
	break;
      case 219: /* "argument_expression_list_error" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11376 "grammar.ec"
	break;
      case 221: /* "unary_expression" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11385 "grammar.ec"
	break;
      case 224: /* "cast_expression" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11394 "grammar.ec"
	break;
      case 225: /* "multiplicative_expression" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11403 "grammar.ec"
	break;
      case 226: /* "additive_expression" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11412 "grammar.ec"
	break;
      case 227: /* "shift_expression" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11421 "grammar.ec"
	break;
      case 229: /* "relational_expression" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11430 "grammar.ec"
	break;
      case 230: /* "equality_expression" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11439 "grammar.ec"
	break;
      case 231: /* "and_expression" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11448 "grammar.ec"
	break;
      case 232: /* "exclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11457 "grammar.ec"
	break;
      case 233: /* "inclusive_or_expression" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11466 "grammar.ec"
	break;
      case 234: /* "logical_and_expression" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11475 "grammar.ec"
	break;
      case 235: /* "logical_or_expression" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11484 "grammar.ec"
	break;
      case 236: /* "conditional_expression" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11493 "grammar.ec"
	break;
      case 237: /* "assignment_expression" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11502 "grammar.ec"
	break;
      case 239: /* "expression" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11511 "grammar.ec"
	break;
      case 241: /* "postfix_expression_error" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11520 "grammar.ec"
	break;
      case 244: /* "unary_expression_error" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11529 "grammar.ec"
	break;
      case 246: /* "cast_expression_error" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11538 "grammar.ec"
	break;
      case 247: /* "multiplicative_expression_error" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11547 "grammar.ec"
	break;
      case 248: /* "additive_expression_error" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11556 "grammar.ec"
	break;
      case 249: /* "shift_expression_error" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11565 "grammar.ec"
	break;
      case 250: /* "relational_expression_error" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11574 "grammar.ec"
	break;
      case 251: /* "equality_expression_error" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11583 "grammar.ec"
	break;
      case 252: /* "and_expression_error" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11592 "grammar.ec"
	break;
      case 253: /* "exclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11601 "grammar.ec"
	break;
      case 254: /* "inclusive_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11610 "grammar.ec"
	break;
      case 255: /* "logical_and_expression_error" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11619 "grammar.ec"
	break;
      case 256: /* "logical_or_expression_error" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11628 "grammar.ec"
	break;
      case 257: /* "conditional_expression_error" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11637 "grammar.ec"
	break;
      case 258: /* "assignment_expression_error" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11646 "grammar.ec"
	break;
      case 259: /* "expression_error" */

/* Line 1009 of yacc.c  */
#line 245 "grammar.y"
	{ FreeList((yyvaluep->list), FreeExpression); };

/* Line 1009 of yacc.c  */
#line 11655 "grammar.ec"
	break;
      case 261: /* "constant_expression" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11664 "grammar.ec"
	break;
      case 262: /* "constant_expression_error" */

/* Line 1009 of yacc.c  */
#line 197 "grammar.y"
	{ FreeExpression((yyvaluep->exp)); };

/* Line 1009 of yacc.c  */
#line 11673 "grammar.ec"
	break;
      case 263: /* "storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11682 "grammar.ec"
	break;
      case 264: /* "external_storage_class_specifier" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11691 "grammar.ec"
	break;
      case 265: /* "enumerator" */

/* Line 1009 of yacc.c  */
#line 213 "grammar.y"
	{ FreeEnumerator((yyvaluep->enumerator)); };

/* Line 1009 of yacc.c  */
#line 11700 "grammar.ec"
	break;
      case 266: /* "enumerator_list" */

/* Line 1009 of yacc.c  */
#line 246 "grammar.y"
	{ FreeList((yyvaluep->list), FreeEnumerator); };

/* Line 1009 of yacc.c  */
#line 11709 "grammar.ec"
	break;
      case 268: /* "enum_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11718 "grammar.ec"
	break;
      case 269: /* "enum_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11727 "grammar.ec"
	break;
      case 270: /* "enum_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11736 "grammar.ec"
	break;
      case 272: /* "enum_class" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11745 "grammar.ec"
	break;
      case 273: /* "enum_class_error" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11754 "grammar.ec"
	break;
      case 274: /* "class_specifier" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11763 "grammar.ec"
	break;
      case 275: /* "class_specifier_error" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11772 "grammar.ec"
	break;
      case 276: /* "ext_storage" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11781 "grammar.ec"
	break;
      case 277: /* "type_qualifier" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11790 "grammar.ec"
	break;
      case 278: /* "type_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11799 "grammar.ec"
	break;
      case 279: /* "type_specifier" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11808 "grammar.ec"
	break;
      case 280: /* "strict_type_specifier" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11817 "grammar.ec"
	break;
      case 281: /* "struct_declarator" */

/* Line 1009 of yacc.c  */
#line 214 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 11826 "grammar.ec"
	break;
      case 282: /* "struct_declarator_list" */

/* Line 1009 of yacc.c  */
#line 249 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclarator); };

/* Line 1009 of yacc.c  */
#line 11835 "grammar.ec"
	break;
      case 283: /* "struct_entry" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11844 "grammar.ec"
	break;
      case 284: /* "struct_or_union_specifier_compound" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11853 "grammar.ec"
	break;
      case 285: /* "struct_or_union_specifier_compound_error" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11862 "grammar.ec"
	break;
      case 286: /* "struct_or_union_specifier_nocompound" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11871 "grammar.ec"
	break;
      case 287: /* "struct_decl" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11880 "grammar.ec"
	break;
      case 288: /* "struct_head" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11889 "grammar.ec"
	break;
      case 289: /* "struct_class" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11898 "grammar.ec"
	break;
      case 290: /* "struct_class_error" */

/* Line 1009 of yacc.c  */
#line 208 "grammar.y"
	{ FreeSpecifier((yyvaluep->specifier)); };

/* Line 1009 of yacc.c  */
#line 11907 "grammar.ec"
	break;
      case 292: /* "specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11916 "grammar.ec"
	break;
      case 293: /* "guess_specifier_qualifier_list" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11925 "grammar.ec"
	break;
      case 294: /* "declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11934 "grammar.ec"
	break;
      case 295: /* "guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11943 "grammar.ec"
	break;
      case 296: /* "external_guess_declaration_specifiers" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11952 "grammar.ec"
	break;
      case 297: /* "external_guess_declaration_specifiers_error" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11961 "grammar.ec"
	break;
      case 298: /* "_inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11970 "grammar.ec"
	break;
      case 299: /* "inheritance_specifiers" */

/* Line 1009 of yacc.c  */
#line 247 "grammar.y"
	{ FreeList((yyvaluep->list), FreeSpecifier); };

/* Line 1009 of yacc.c  */
#line 11979 "grammar.ec"
	break;
      case 303: /* "identifier_list_error" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 11988 "grammar.ec"
	break;
      case 304: /* "identifier_list" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 11997 "grammar.ec"
	break;
      case 306: /* "direct_declarator_nofunction" */

/* Line 1009 of yacc.c  */
#line 214 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12006 "grammar.ec"
	break;
      case 307: /* "direct_declarator_function_start" */

/* Line 1009 of yacc.c  */
#line 214 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12015 "grammar.ec"
	break;
      case 308: /* "direct_declarator_function" */

/* Line 1009 of yacc.c  */
#line 214 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12024 "grammar.ec"
	break;
      case 309: /* "direct_declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 214 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12033 "grammar.ec"
	break;
      case 310: /* "direct_declarator" */

/* Line 1009 of yacc.c  */
#line 214 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12042 "grammar.ec"
	break;
      case 315: /* "ext_decl" */

/* Line 1009 of yacc.c  */
#line 267 "grammar.y"
	{ FreeExtDecl((yyvaluep->extDecl)); };

/* Line 1009 of yacc.c  */
#line 12051 "grammar.ec"
	break;
      case 317: /* "attribute_word" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 12060 "grammar.ec"
	break;
      case 318: /* "attribute" */

/* Line 1009 of yacc.c  */
#line 268 "grammar.y"
	{ FreeAttribute((yyvaluep->attribute)); };

/* Line 1009 of yacc.c  */
#line 12069 "grammar.ec"
	break;
      case 319: /* "attribs_list" */

/* Line 1009 of yacc.c  */
#line 269 "grammar.y"
	{ FreeList((yyvaluep->list), FreeAttribute); };

/* Line 1009 of yacc.c  */
#line 12078 "grammar.ec"
	break;
      case 320: /* "attrib" */

/* Line 1009 of yacc.c  */
#line 266 "grammar.y"
	{ FreeAttrib((yyvaluep->attrib)); };

/* Line 1009 of yacc.c  */
#line 12087 "grammar.ec"
	break;
      case 321: /* "direct_abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 214 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12096 "grammar.ec"
	break;
      case 322: /* "direct_abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 214 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12105 "grammar.ec"
	break;
      case 323: /* "pointer" */

/* Line 1009 of yacc.c  */
#line 196 "grammar.y"
	{ FreePointer((yyvaluep->pointer)); };

/* Line 1009 of yacc.c  */
#line 12114 "grammar.ec"
	break;
      case 324: /* "abstract_declarator" */

/* Line 1009 of yacc.c  */
#line 214 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12123 "grammar.ec"
	break;
      case 325: /* "abstract_declarator_noarray" */

/* Line 1009 of yacc.c  */
#line 214 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12132 "grammar.ec"
	break;
      case 326: /* "declarator" */

/* Line 1009 of yacc.c  */
#line 214 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12141 "grammar.ec"
	break;
      case 328: /* "declarator_function" */

/* Line 1009 of yacc.c  */
#line 214 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12150 "grammar.ec"
	break;
      case 329: /* "declarator_function_error" */

/* Line 1009 of yacc.c  */
#line 214 "grammar.y"
	{ FreeDeclarator((yyvaluep->declarator)); };

/* Line 1009 of yacc.c  */
#line 12159 "grammar.ec"
	break;
      case 333: /* "initializer" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12168 "grammar.ec"
	break;
      case 334: /* "initializer_error" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12177 "grammar.ec"
	break;
      case 335: /* "initializer_condition" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12186 "grammar.ec"
	break;
      case 336: /* "initializer_condition_error" */

/* Line 1009 of yacc.c  */
#line 219 "grammar.y"
	{ FreeInitializer((yyvaluep->initializer)); };

/* Line 1009 of yacc.c  */
#line 12195 "grammar.ec"
	break;
      case 337: /* "initializer_list" */

/* Line 1009 of yacc.c  */
#line 251 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitializer); };

/* Line 1009 of yacc.c  */
#line 12204 "grammar.ec"
	break;
      case 338: /* "init_declarator" */

/* Line 1009 of yacc.c  */
#line 220 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 12213 "grammar.ec"
	break;
      case 339: /* "init_declarator_error" */

/* Line 1009 of yacc.c  */
#line 220 "grammar.y"
	{ FreeInitDeclarator((yyvaluep->initDeclarator)); };

/* Line 1009 of yacc.c  */
#line 12222 "grammar.ec"
	break;
      case 340: /* "init_declarator_list" */

/* Line 1009 of yacc.c  */
#line 252 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 12231 "grammar.ec"
	break;
      case 341: /* "init_declarator_list_error" */

/* Line 1009 of yacc.c  */
#line 252 "grammar.y"
	{ FreeList((yyvaluep->list), FreeInitDeclarator); };

/* Line 1009 of yacc.c  */
#line 12240 "grammar.ec"
	break;
      case 342: /* "type_name" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12249 "grammar.ec"
	break;
      case 343: /* "guess_type_name" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12258 "grammar.ec"
	break;
      case 344: /* "parameter_declaration" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12267 "grammar.ec"
	break;
      case 345: /* "parameter_declaration_error" */

/* Line 1009 of yacc.c  */
#line 221 "grammar.y"
	{ FreeTypeName((yyvaluep->typeName)); };

/* Line 1009 of yacc.c  */
#line 12276 "grammar.ec"
	break;
      case 346: /* "parameter_list" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12285 "grammar.ec"
	break;
      case 347: /* "parameter_list_error" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12294 "grammar.ec"
	break;
      case 348: /* "parameter_type_list" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12303 "grammar.ec"
	break;
      case 349: /* "parameter_type_list_error" */

/* Line 1009 of yacc.c  */
#line 253 "grammar.y"
	{ FreeList((yyvaluep->list), FreeTypeName); };

/* Line 1009 of yacc.c  */
#line 12312 "grammar.ec"
	break;
      case 350: /* "statement" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12321 "grammar.ec"
	break;
      case 351: /* "statement_error" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12330 "grammar.ec"
	break;
      case 355: /* "labeled_statement" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12339 "grammar.ec"
	break;
      case 356: /* "labeled_statement_error" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12348 "grammar.ec"
	break;
      case 357: /* "declaration_mode" */

/* Line 1009 of yacc.c  */
#line 265 "grammar.y"
	{ };

/* Line 1009 of yacc.c  */
#line 12357 "grammar.ec"
	break;
      case 359: /* "declaration" */

/* Line 1009 of yacc.c  */
#line 226 "grammar.y"
	{ FreeDeclaration((yyvaluep->declaration)); };

/* Line 1009 of yacc.c  */
#line 12366 "grammar.ec"
	break;
      case 363: /* "declaration_list" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 12375 "grammar.ec"
	break;
      case 364: /* "declaration_list_error" */

/* Line 1009 of yacc.c  */
#line 250 "grammar.y"
	{ FreeList((yyvaluep->list), FreeDeclaration); };

/* Line 1009 of yacc.c  */
#line 12384 "grammar.ec"
	break;
      case 365: /* "statement_list" */

/* Line 1009 of yacc.c  */
#line 254 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 12393 "grammar.ec"
	break;
      case 366: /* "statement_list_error" */

/* Line 1009 of yacc.c  */
#line 254 "grammar.y"
	{ FreeList((yyvaluep->list), FreeStatement); };

/* Line 1009 of yacc.c  */
#line 12402 "grammar.ec"
	break;
      case 367: /* "compound_inside" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12411 "grammar.ec"
	break;
      case 368: /* "compound_inside_error" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12420 "grammar.ec"
	break;
      case 369: /* "compound_start" */

/* Line 1009 of yacc.c  */
#line 259 "grammar.y"
	{ PopContext((yyvaluep->context)); FreeContext((yyvaluep->context)); delete (yyvaluep->context); };

/* Line 1009 of yacc.c  */
#line 12429 "grammar.ec"
	break;
      case 370: /* "compound_statement" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12438 "grammar.ec"
	break;
      case 371: /* "compound_statement_error" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12447 "grammar.ec"
	break;
      case 372: /* "expression_statement" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12456 "grammar.ec"
	break;
      case 373: /* "selection_statement" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12465 "grammar.ec"
	break;
      case 374: /* "selection_statement_error" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12474 "grammar.ec"
	break;
      case 375: /* "iteration_statement" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12483 "grammar.ec"
	break;
      case 376: /* "iteration_statement_error" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12492 "grammar.ec"
	break;
      case 377: /* "jump_statement" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12501 "grammar.ec"
	break;
      case 378: /* "jump_statement_error" */

/* Line 1009 of yacc.c  */
#line 222 "grammar.y"
	{ FreeStatement((yyvaluep->stmt)); };

/* Line 1009 of yacc.c  */
#line 12510 "grammar.ec"
	break;
      case 379: /* "function_definition" */

/* Line 1009 of yacc.c  */
#line 227 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 12519 "grammar.ec"
	break;
      case 380: /* "function_definition_error" */

/* Line 1009 of yacc.c  */
#line 227 "grammar.y"
	{ FreeFunction((yyvaluep->function)); };

/* Line 1009 of yacc.c  */
#line 12528 "grammar.ec"
	break;
      case 381: /* "string_literal" */

/* Line 1009 of yacc.c  */
#line 242 "grammar.y"
	{ delete (yyvaluep->string); };

/* Line 1009 of yacc.c  */
#line 12537 "grammar.ec"
	break;
      case 382: /* "external_declaration" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 12546 "grammar.ec"
	break;
      case 383: /* "external_declaration_error" */

/* Line 1009 of yacc.c  */
#line 228 "grammar.y"
	{ FreeExternal((yyvaluep->external)); };

/* Line 1009 of yacc.c  */
#line 12555 "grammar.ec"
	break;
      case 384: /* "translation_unit_error" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 12564 "grammar.ec"
	break;
      case 385: /* "translation_unit" */

/* Line 1009 of yacc.c  */
#line 255 "grammar.y"
	{ if((yyvaluep->list) != ast) FreeList((yyvaluep->list), FreeExternal); };

/* Line 1009 of yacc.c  */
#line 12573 "grammar.ec"
	break;

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */


/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Location data for the lookahead symbol.  */
YYLTYPE yylloc;

/* Number of syntax errors so far.  */
int yynerrs;



/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{


    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.
       `yyls': related to locations.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[2];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;
  yylsp = yyls;

#if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  /* Initialize the default location before parsing starts.  */
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 1;
#endif

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);

	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
	YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1464 of yacc.c  */
#line 277 "grammar.y"
    {
      (yyval.specifier) = null;
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start); 
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   ;}
    break;

  case 3:

/* Line 1464 of yacc.c  */
#line 306 "grammar.y"
    {
      (yyval.specifier) = null;
   #ifdef PRECOMPILER
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);

      FreeIdentifier((yyvsp[(1) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start); 
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #endif
   ;}
    break;

  case 4:

/* Line 1464 of yacc.c  */
#line 364 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 5:

/* Line 1464 of yacc.c  */
#line 366 "grammar.y"
    {
   #ifdef PRECOMPILER
      // if($1._class && !$1._class.name)
      if((yyvsp[(1) - (2)].id)._class)
      {
         char name[1024];
         strcpy(name,  (yyvsp[(1) - (2)].id)._class.name ? (yyvsp[(1) - (2)].id)._class.name : "");
         strcat(name, "::");
         strcat(name, (yyvsp[(1) - (2)].id).string);
         _DeclClass(0, name);
      }
      else
         _DeclClass(0, (yyvsp[(1) - (2)].id).string);
      FreeIdentifier((yyvsp[(1) - (2)].id));
      FreeIdentifier((yyvsp[(2) - (2)].id));

      fileInput.Seek((yylsp[(1) - (2)]).start.pos, start); 
      resetScannerPos(&(yylsp[(1) - (2)]).start);
      yyclearin;

      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      YYPOPSTACK(1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
      goto yysetstate;
   #else
      Location tmpLoc = yylloc; (yyval.specifier) = (yyvsp[(2) - (2)].id); yylloc = (yylsp[(1) - (2)]); 
      Compiler_Error($"Not a type: %s\n", (yyvsp[(1) - (2)].id).string);      
      yylloc = tmpLoc; (yyvsp[(2) - (2)].id).badID = (yyvsp[(1) - (2)].id);
   #endif
   ;}
    break;

  case 6:

/* Line 1464 of yacc.c  */
#line 465 "grammar.y"
    { (yyval.specifier) = MkSpecifierName(yytext); ;}
    break;

  case 7:

/* Line 1464 of yacc.c  */
#line 469 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 9:

/* Line 1464 of yacc.c  */
#line 473 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (4)].specifier); SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 10:

/* Line 1464 of yacc.c  */
#line 475 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      SetClassTemplateArgs((yyval.specifier), (yyvsp[(3) - (4)].list));
      (yyval.specifier).loc = (yyloc);

      (yylsp[(4) - (4)]).end.pos--;
      fileInput.Seek((yylsp[(4) - (4)]).end.pos, start); 
      resetScannerPos(&(yylsp[(4) - (4)]).end);
      yyclearin;
    ;}
    break;

  case 11:

/* Line 1464 of yacc.c  */
#line 524 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 12:

/* Line 1464 of yacc.c  */
#line 526 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 13:

/* Line 1464 of yacc.c  */
#line 531 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, null, null); (yyval.classFunction).isConstructor = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; FreeList((yyvsp[(1) - (3)].list), FreeSpecifier); ;}
    break;

  case 14:

/* Line 1464 of yacc.c  */
#line 536 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, null, null); (yyval.classFunction).isDestructor = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; FreeList((yyvsp[(2) - (4)].list), FreeSpecifier) ;}
    break;

  case 15:

/* Line 1464 of yacc.c  */
#line 541 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 16:

/* Line 1464 of yacc.c  */
#line 543 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 17:

/* Line 1464 of yacc.c  */
#line 548 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 18:

/* Line 1464 of yacc.c  */
#line 550 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(1) - (1)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 19:

/* Line 1464 of yacc.c  */
#line 555 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(2) - (3)].list), null, (yyvsp[(3) - (3)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 20:

/* Line 1464 of yacc.c  */
#line 557 "grammar.y"
    { (yyval.classFunction) = MkClassFunction(null, null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).isVirtual = true; (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 21:

/* Line 1464 of yacc.c  */
#line 562 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 22:

/* Line 1464 of yacc.c  */
#line 564 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 23:

/* Line 1464 of yacc.c  */
#line 566 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 24:

/* Line 1464 of yacc.c  */
#line 568 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 25:

/* Line 1464 of yacc.c  */
#line 570 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 26:

/* Line 1464 of yacc.c  */
#line 574 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 27:

/* Line 1464 of yacc.c  */
#line 579 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 28:

/* Line 1464 of yacc.c  */
#line 581 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 29:

/* Line 1464 of yacc.c  */
#line 583 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 30:

/* Line 1464 of yacc.c  */
#line 585 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 31:

/* Line 1464 of yacc.c  */
#line 587 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 32:

/* Line 1464 of yacc.c  */
#line 593 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 33:

/* Line 1464 of yacc.c  */
#line 595 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, MkDeclaratorFunction((yyvsp[(2) - (2)].declarator), null), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 34:

/* Line 1464 of yacc.c  */
#line 600 "grammar.y"
    { (yyval.classFunction) = MkClassFunction((yyvsp[(1) - (2)].list), null, (yyvsp[(2) - (2)].declarator), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).id = ++globalContext.nextID; ;}
    break;

  case 35:

/* Line 1464 of yacc.c  */
#line 605 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); ;}
    break;

  case 36:

/* Line 1464 of yacc.c  */
#line 610 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (2)].classFunction), (yyvsp[(2) - (2)].stmt)); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 37:

/* Line 1464 of yacc.c  */
#line 612 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 38:

/* Line 1464 of yacc.c  */
#line 614 "grammar.y"
    { ProcessClassFunctionBody((yyvsp[(1) - (1)].classFunction), null); (yyval.classFunction).loc = (yyloc); (yyval.classFunction).loc.end.charPos++; (yyval.classFunction).loc.end.pos++;;}
    break;

  case 39:

/* Line 1464 of yacc.c  */
#line 618 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 40:

/* Line 1464 of yacc.c  */
#line 619 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 41:

/* Line 1464 of yacc.c  */
#line 623 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end;;}
    break;

  case 42:

/* Line 1464 of yacc.c  */
#line 625 "grammar.y"
    { 
         (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy()));
         (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end; 

         fileInput.Seek((yylsp[(2) - (3)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(2) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(2) - (3)]).end;
      ;}
    break;

  case 43:

/* Line 1464 of yacc.c  */
#line 635 "grammar.y"
    { (yyval.memberInit) = MkMemberInit(null, (yyvsp[(1) - (1)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc);;}
    break;

  case 44:

/* Line 1464 of yacc.c  */
#line 639 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 45:

/* Line 1464 of yacc.c  */
#line 641 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 46:

/* Line 1464 of yacc.c  */
#line 643 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 47:

/* Line 1464 of yacc.c  */
#line 647 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ;}
    break;

  case 48:

/* Line 1464 of yacc.c  */
#line 649 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 49:

/* Line 1464 of yacc.c  */
#line 651 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 50:

/* Line 1464 of yacc.c  */
#line 654 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end; 
         { 
            Initializer dummy = MkInitializerAssignment(MkExpDummy()); 
            MemberInit memberInit = MkMemberInit(null, dummy); 
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end; 
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end; 
            ListAdd((yyvsp[(1) - (3)].list), memberInit); 
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 51:

/* Line 1464 of yacc.c  */
#line 666 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(2) - (3)]).end; 
         { 
            Initializer dummy = MkInitializerAssignment(MkExpDummy()); 
            MemberInit memberInit = MkMemberInit(null, dummy); 
            memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(2) - (3)]).end; 
            memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(2) - (3)]).end; 
            ListAdd((yyvsp[(1) - (3)].list), memberInit); 
          }
          (yyval.list) = (yyvsp[(1) - (3)].list);
       ;}
    break;

  case 52:

/* Line 1464 of yacc.c  */
#line 677 "grammar.y"
    {
         Initializer dummy = MkInitializerAssignment(MkExpDummy());
         MemberInit memberInit = MkMemberInit(null, dummy); 
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).start; 
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).start; 

         (yyval.list) = MkList();
         ListAdd((yyval.list), memberInit); 

         dummy = MkInitializerAssignment(MkExpDummy()); 
         memberInit = MkMemberInit(null, dummy); 
         memberInit.realLoc.start = memberInit.loc.start = dummy.loc.start = (yylsp[(1) - (1)]).end; 
         memberInit.realLoc.end = memberInit.loc.end = dummy.loc.end = (yylsp[(1) - (1)]).end; 
         ListAdd((yyval.list), memberInit); 
      ;}
    break;

  case 53:

/* Line 1464 of yacc.c  */
#line 696 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 54:

/* Line 1464 of yacc.c  */
#line 698 "grammar.y"
    { if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 55:

/* Line 1464 of yacc.c  */
#line 702 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(1) - (1)].list)); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]); ;}
    break;

  case 56:

/* Line 1464 of yacc.c  */
#line 703 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 57:

/* Line 1464 of yacc.c  */
#line 704 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members);  members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 58:

/* Line 1464 of yacc.c  */
#line 705 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 59:

/* Line 1464 of yacc.c  */
#line 706 "grammar.y"
    { MembersInit members = MkMembersInitList((yyvsp[(2) - (2)].list)); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 60:

/* Line 1464 of yacc.c  */
#line 707 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 61:

/* Line 1464 of yacc.c  */
#line 708 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); (yyval.list) = MkList(); ListAdd((yyval.list), members); members.loc = (yylsp[(1) - (1)]);  ;}
    break;

  case 63:

/* Line 1464 of yacc.c  */
#line 710 "grammar.y"
    { MembersInit members = MkMembersInitList(MkList()); ListAdd((yyval.list), members); members.loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 65:

/* Line 1464 of yacc.c  */
#line 715 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 66:

/* Line 1464 of yacc.c  */
#line 716 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 67:

/* Line 1464 of yacc.c  */
#line 717 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), MkMembersInitList((yyvsp[(2) - (2)].list)));   ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 68:

/* Line 1464 of yacc.c  */
#line 721 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(1) - (1)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 69:

/* Line 1464 of yacc.c  */
#line 722 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 70:

/* Line 1464 of yacc.c  */
#line 723 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 71:

/* Line 1464 of yacc.c  */
#line 724 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitMethod((yyvsp[(2) - (2)].classFunction))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 72:

/* Line 1464 of yacc.c  */
#line 725 "grammar.y"
    { ListAdd((yyval.list), MkMembersInitList((yyvsp[(2) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 73:

/* Line 1464 of yacc.c  */
#line 726 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (1)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 74:

/* Line 1464 of yacc.c  */
#line 727 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkMembersInitList((yyvsp[(1) - (2)].list))); ((MembersInit)(yyval.list)->last).loc = (yylsp[(2) - (2)]); ;}
    break;

  case 75:

/* Line 1464 of yacc.c  */
#line 732 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 76:

/* Line 1464 of yacc.c  */
#line 734 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 77:

/* Line 1464 of yacc.c  */
#line 739 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 78:

/* Line 1464 of yacc.c  */
#line 741 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 79:

/* Line 1464 of yacc.c  */
#line 743 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 80:

/* Line 1464 of yacc.c  */
#line 745 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null); (yyval.instance).exp.loc = (yylsp[(2) - (3)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 81:

/* Line 1464 of yacc.c  */
#line 747 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 82:

/* Line 1464 of yacc.c  */
#line 777 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 83:

/* Line 1464 of yacc.c  */
#line 779 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 84:

/* Line 1464 of yacc.c  */
#line 784 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 85:

/* Line 1464 of yacc.c  */
#line 786 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (5)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 86:

/* Line 1464 of yacc.c  */
#line 788 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), (yyvsp[(4) - (4)].list));(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 87:

/* Line 1464 of yacc.c  */
#line 790 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (3)].list), MkExpIdentifier((yyvsp[(2) - (3)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (3)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (3)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 88:

/* Line 1464 of yacc.c  */
#line 792 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), null);(yyval.instance).exp.loc = (yylsp[(2) - (4)]);  (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 89:

/* Line 1464 of yacc.c  */
#line 821 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 90:

/* Line 1464 of yacc.c  */
#line 823 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (5)].list), MkExpIdentifier((yyvsp[(2) - (5)].id)), (yyvsp[(4) - (5)].list)); (yyval.instance).exp.loc = (yylsp[(2) - (5)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (5)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (5)]).end; (yyval.instance).insideLoc.end = (yylsp[(5) - (5)]).start;;}
    break;

  case 91:

/* Line 1464 of yacc.c  */
#line 825 "grammar.y"
    { (yyval.instance) = MkInstantiationNamed((yyvsp[(1) - (4)].list), MkExpIdentifier((yyvsp[(2) - (4)].id)), MkList());  (yyval.instance).exp.loc = (yylsp[(2) - (4)]); (yyval.instance).loc = (yyloc); (yyval.instance).nameLoc = (yylsp[(2) - (4)]); (yyval.instance).insideLoc.start = (yylsp[(3) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(4) - (4)]).start;;}
    break;

  case 92:

/* Line 1464 of yacc.c  */
#line 830 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; (yyval.instance) = (yyvsp[(1) - (2)].instance); ;}
    break;

  case 93:

/* Line 1464 of yacc.c  */
#line 832 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; (yyval.instance) = (yyvsp[(1) - (3)].instance); ;}
    break;

  case 94:

/* Line 1464 of yacc.c  */
#line 837 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 95:

/* Line 1464 of yacc.c  */
#line 839 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]); 
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 96:

/* Line 1464 of yacc.c  */
#line 843 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 97:

/* Line 1464 of yacc.c  */
#line 845 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (2)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 98:

/* Line 1464 of yacc.c  */
#line 847 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (4)].specifier), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 99:

/* Line 1464 of yacc.c  */
#line 849 "grammar.y"
    { (yyval.instance) = MkInstantiation((yyvsp[(1) - (3)].specifier), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 100:

/* Line 1464 of yacc.c  */
#line 854 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]); 
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, (yyvsp[(3) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 101:

/* Line 1464 of yacc.c  */
#line 857 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (2)]); 
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (2)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (2)].id)); ;}
    break;

  case 102:

/* Line 1464 of yacc.c  */
#line 860 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (4)]); 
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (4)].id).string), null, (yyvsp[(3) - (4)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (4)]).end; (yyval.instance).insideLoc.end = (yylsp[(3) - (4)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (4)].id)); ;}
    break;

  case 103:

/* Line 1464 of yacc.c  */
#line 863 "grammar.y"
    { Location tmpLoc = yylloc; yylloc = (yylsp[(1) - (3)]); 
      yylloc = tmpLoc;  (yyval.instance) = MkInstantiation(MkSpecifierName((yyvsp[(1) - (3)].id).string), null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(2) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; FreeIdentifier((yyvsp[(1) - (3)].id)); ;}
    break;

  case 104:

/* Line 1464 of yacc.c  */
#line 928 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).start; ;}
    break;

  case 105:

/* Line 1464 of yacc.c  */
#line 930 "grammar.y"
    { (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).start; ;}
    break;

  case 106:

/* Line 1464 of yacc.c  */
#line 935 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 107:

/* Line 1464 of yacc.c  */
#line 937 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (3)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (3)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (3)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 108:

/* Line 1464 of yacc.c  */
#line 939 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++;  ;}
    break;

  case 109:

/* Line 1464 of yacc.c  */
#line 941 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, null);  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (1)]).end; (yyval.instance).insideLoc.end = (yylsp[(1) - (1)]).end;  (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 110:

/* Line 1464 of yacc.c  */
#line 943 "grammar.y"
    { (yyval.instance) = MkInstantiation(null, null, (yyvsp[(2) - (2)].list));  (yyval.instance).loc = (yyloc); (yyval.instance).insideLoc.start = (yylsp[(1) - (2)]).end; (yyval.instance).insideLoc.end = (yylsp[(2) - (2)]).end; (yyval.instance).loc.end.charPos++; (yyval.instance).loc.end.pos++; ;}
    break;

  case 111:

/* Line 1464 of yacc.c  */
#line 973 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 112:

/* Line 1464 of yacc.c  */
#line 977 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].initializer)); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 113:

/* Line 1464 of yacc.c  */
#line 978 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (3)].exp), MkInitializerAssignment(MkExpDummy())); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); (yyval.memberInit).initializer.loc.start = (yylsp[(2) - (3)]).end; (yyval.memberInit).initializer.loc.end = (yylsp[(2) - (3)]).end; ;}
    break;

  case 114:

/* Line 1464 of yacc.c  */
#line 979 "grammar.y"
    { (yyval.memberInit) = MkMemberInitExp((yyvsp[(1) - (2)].exp), null); (yyval.memberInit).loc = (yyloc); (yyval.memberInit).realLoc = (yyloc); ;}
    break;

  case 115:

/* Line 1464 of yacc.c  */
#line 983 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 116:

/* Line 1464 of yacc.c  */
#line 984 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 117:

/* Line 1464 of yacc.c  */
#line 985 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 118:

/* Line 1464 of yacc.c  */
#line 989 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].memberInit)); ((MemberInit)(yyval.list)->last).loc = (yyloc); ;}
    break;

  case 119:

/* Line 1464 of yacc.c  */
#line 990 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 120:

/* Line 1464 of yacc.c  */
#line 991 "grammar.y"
    { ((MemberInit)(yyvsp[(1) - (3)].list)->last).loc.end = (yylsp[(3) - (3)]).start; ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].memberInit)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 122:

/* Line 1464 of yacc.c  */
#line 997 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 123:

/* Line 1464 of yacc.c  */
#line 1000 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 124:

/* Line 1464 of yacc.c  */
#line 1003 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 125:

/* Line 1464 of yacc.c  */
#line 1006 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 126:

/* Line 1464 of yacc.c  */
#line 1009 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 128:

/* Line 1464 of yacc.c  */
#line 1015 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 129:

/* Line 1464 of yacc.c  */
#line 1017 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 130:

/* Line 1464 of yacc.c  */
#line 1019 "grammar.y"
    { (yyvsp[(1) - (3)].prop).issetStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 131:

/* Line 1464 of yacc.c  */
#line 1021 "grammar.y"
    { (yyvsp[(1) - (2)].prop).isWatchable = true; ;}
    break;

  case 132:

/* Line 1464 of yacc.c  */
#line 1023 "grammar.y"
    { (yyvsp[(1) - (3)].prop).category = (yyvsp[(3) - (3)].exp); ;}
    break;

  case 133:

/* Line 1464 of yacc.c  */
#line 1027 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; (yyval.prop) = (yyvsp[(1) - (2)].prop); ;}
    break;

  case 134:

/* Line 1464 of yacc.c  */
#line 1032 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), null, (yyvsp[(3) - (4)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 135:

/* Line 1464 of yacc.c  */
#line 1035 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (5)].list), (yyvsp[(3) - (5)].declarator), (yyvsp[(4) - (5)].id), null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 136:

/* Line 1464 of yacc.c  */
#line 1038 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (3)].list), null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 137:

/* Line 1464 of yacc.c  */
#line 1041 "grammar.y"
    { (yyval.prop) = MkProperty((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].declarator), null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 138:

/* Line 1464 of yacc.c  */
#line 1044 "grammar.y"
    { (yyval.prop) = MkProperty(null, null, null, null, null); (yyval.prop).loc = (yyloc); ;}
    break;

  case 140:

/* Line 1464 of yacc.c  */
#line 1050 "grammar.y"
    { (yyvsp[(1) - (3)].prop).setStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 141:

/* Line 1464 of yacc.c  */
#line 1052 "grammar.y"
    { (yyvsp[(1) - (3)].prop).getStmt = (yyvsp[(3) - (3)].stmt); ;}
    break;

  case 142:

/* Line 1464 of yacc.c  */
#line 1056 "grammar.y"
    { (yyvsp[(1) - (2)].prop).loc.end = (yylsp[(2) - (2)]).end; ;}
    break;

  case 143:

/* Line 1464 of yacc.c  */
#line 1061 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].id)); ;}
    break;

  case 144:

/* Line 1464 of yacc.c  */
#line 1063 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].id)); ;}
    break;

  case 145:

/* Line 1464 of yacc.c  */
#line 1068 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 146:

/* Line 1464 of yacc.c  */
#line 1070 "grammar.y"
    { (yyval.propertyWatch) = MkDeleteWatch((yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 147:

/* Line 1464 of yacc.c  */
#line 1075 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].propertyWatch)); ;}
    break;

  case 148:

/* Line 1464 of yacc.c  */
#line 1077 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].propertyWatch)); ;}
    break;

  case 149:

/* Line 1464 of yacc.c  */
#line 1082 "grammar.y"
    { (yyval.propertyWatch) = MkPropertyWatch((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); ;}
    break;

  case 150:

/* Line 1464 of yacc.c  */
#line 1087 "grammar.y"
    { (yyval.stmt) = MkWatchStmt(null, (yyvsp[(3) - (7)].exp), (yyvsp[(6) - (7)].list)); ;}
    break;

  case 151:

/* Line 1464 of yacc.c  */
#line 1089 "grammar.y"
    { (yyval.stmt) = MkWatchStmt((yyvsp[(1) - (9)].exp), (yyvsp[(5) - (9)].exp), (yyvsp[(8) - (9)].list)); ;}
    break;

  case 152:

/* Line 1464 of yacc.c  */
#line 1094 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].list)); ;}
    break;

  case 153:

/* Line 1464 of yacc.c  */
#line 1096 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (8)].exp), (yyvsp[(5) - (8)].exp), (yyvsp[(7) - (8)].list)); ;}
    break;

  case 154:

/* Line 1464 of yacc.c  */
#line 1098 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt(null, (yyvsp[(3) - (4)].exp), null); ;}
    break;

  case 155:

/* Line 1464 of yacc.c  */
#line 1100 "grammar.y"
    { (yyval.stmt) = MkStopWatchingStmt((yyvsp[(1) - (6)].exp), (yyvsp[(5) - (6)].exp), null); ;}
    break;

  case 156:

/* Line 1464 of yacc.c  */
#line 1105 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, null); ;}
    break;

  case 157:

/* Line 1464 of yacc.c  */
#line 1107 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt(null, (yyvsp[(2) - (2)].list)); ;}
    break;

  case 158:

/* Line 1464 of yacc.c  */
#line 1109 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (3)].exp), null); ;}
    break;

  case 159:

/* Line 1464 of yacc.c  */
#line 1111 "grammar.y"
    { (yyval.stmt) = MkFireWatchersStmt((yyvsp[(1) - (4)].exp), (yyvsp[(4) - (4)].list)); ;}
    break;

  case 160:

/* Line 1464 of yacc.c  */
#line 1115 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 161:

/* Line 1464 of yacc.c  */
#line 1116 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(1) - (2)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 162:

/* Line 1464 of yacc.c  */
#line 1117 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 163:

/* Line 1464 of yacc.c  */
#line 1118 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 164:

/* Line 1464 of yacc.c  */
#line 1119 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 165:

/* Line 1464 of yacc.c  */
#line 1120 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 166:

/* Line 1464 of yacc.c  */
#line 1122 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (4)].declMode); ;}
    break;

  case 167:

/* Line 1464 of yacc.c  */
#line 1123 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkStructDeclaration((yyvsp[(2) - (3)].list), null, null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 168:

/* Line 1464 of yacc.c  */
#line 1124 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 169:

/* Line 1464 of yacc.c  */
#line 1125 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 170:

/* Line 1464 of yacc.c  */
#line 1126 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 171:

/* Line 1464 of yacc.c  */
#line 1127 "grammar.y"
    { (yyval.classDef) = MkClassDefProperty((yyvsp[(2) - (2)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 172:

/* Line 1464 of yacc.c  */
#line 1129 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (2)].list)); if((yyvsp[(1) - (2)].list)->last) ((MemberInit)(yyvsp[(1) - (2)].list)->last).loc.end = (yylsp[(2) - (2)]).start; (yyval.classDef).loc = (yyloc); ;}
    break;

  case 173:

/* Line 1464 of yacc.c  */
#line 1130 "grammar.y"
    { (yyval.classDef) = MkClassDefClassData(MkStructDeclaration((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].list), null)); (yyval.classDef).decl.loc = (yyloc); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 174:

/* Line 1464 of yacc.c  */
#line 1131 "grammar.y"
    { (yyval.classDef) = MkClassDefClassProperty((yyvsp[(1) - (1)].prop)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; ;}
    break;

  case 175:

/* Line 1464 of yacc.c  */
#line 1132 "grammar.y"
    { (yyval.classDef) = MkClassDefPropertyWatch((yyvsp[(1) - (2)].propertyWatch)); (yyval.classDef).loc = (yyloc); globalContext.nextID++; ;}
    break;

  case 176:

/* Line 1464 of yacc.c  */
#line 1133 "grammar.y"
    { (yyval.classDef) = null; deleteWatchable = true; ;}
    break;

  case 177:

/* Line 1464 of yacc.c  */
#line 1134 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (3)].id).string); FreeIdentifier((yyvsp[(2) - (3)].id)); ;}
    break;

  case 178:

/* Line 1464 of yacc.c  */
#line 1135 "grammar.y"
    { (yyval.classDef) = MkClassDefDesigner((yyvsp[(2) - (3)].specifier).name); FreeSpecifier((yyvsp[(2) - (3)].specifier)); ;}
    break;

  case 179:

/* Line 1464 of yacc.c  */
#line 1136 "grammar.y"
    { (yyval.classDef) = MkClassDefNoExpansion(); ;}
    break;

  case 180:

/* Line 1464 of yacc.c  */
#line 1137 "grammar.y"
    { (yyval.classDef) = MkClassDefFixed(); ;}
    break;

  case 181:

/* Line 1464 of yacc.c  */
#line 1138 "grammar.y"
    { (yyval.classDef) = MkClassDefDesignerDefaultProperty((yyvsp[(2) - (3)].id)); ;}
    break;

  case 182:

/* Line 1464 of yacc.c  */
#line 1139 "grammar.y"
    { (yyval.classDef) = MkClassDefClassPropertyValue((yyvsp[(3) - (7)].id), (yyvsp[(6) - (7)].initializer)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 183:

/* Line 1464 of yacc.c  */
#line 1141 "grammar.y"
    { (yyval.classDef) = null; ;}
    break;

  case 184:

/* Line 1464 of yacc.c  */
#line 1142 "grammar.y"
    { memberAccessStack[defaultMemberAccess] = (yyvsp[(1) - (2)].declMode); if(defaultMemberAccess == 0) { (yyval.classDef) = MkClassDefMemberAccess(); (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); (yyval.classDef).loc = (yyloc); } else (yyval.classDef) = null; ;}
    break;

  case 185:

/* Line 1464 of yacc.c  */
#line 1144 "grammar.y"
    { (yyval.classDef) = MkClassDefAccessOverride((yyvsp[(1) - (4)].declMode), (yyvsp[(3) - (4)].id)); (yyval.classDef).loc = (yyloc); ;}
    break;

  case 186:

/* Line 1464 of yacc.c  */
#line 1148 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(1) - (1)].classFunction)); (yyval.classDef).loc = (yyvsp[(1) - (1)].classFunction).loc;  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 187:

/* Line 1464 of yacc.c  */
#line 1149 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 188:

/* Line 1464 of yacc.c  */
#line 1150 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (2)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (2)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 189:

/* Line 1464 of yacc.c  */
#line 1151 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (1)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 190:

/* Line 1464 of yacc.c  */
#line 1152 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(1) - (1)].instance))); (yyval.classDef).loc = (yyvsp[(1) - (1)].instance).loc; (yyval.classDef).decl.loc = (yyval.classDef).loc;  (yyval.classDef).memberAccess = memberAccessStack[defaultMemberAccess]; ;}
    break;

  case 191:

/* Line 1464 of yacc.c  */
#line 1154 "grammar.y"
    { (yyval.classDef) = MkClassDefFunction((yyvsp[(2) - (2)].classFunction)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 192:

/* Line 1464 of yacc.c  */
#line 1155 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 193:

/* Line 1464 of yacc.c  */
#line 1156 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (3)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (3)].declMode); ;}
    break;

  case 194:

/* Line 1464 of yacc.c  */
#line 1157 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 195:

/* Line 1464 of yacc.c  */
#line 1158 "grammar.y"
    { (yyval.classDef) = MkClassDefDeclaration(MkDeclarationClassInst((yyvsp[(2) - (2)].instance))); (yyval.classDef).loc = (yyloc); (yyval.classDef).decl.loc = (yyval.classDef).loc; (yyval.classDef).memberAccess = (yyvsp[(1) - (2)].declMode); ;}
    break;

  case 196:

/* Line 1464 of yacc.c  */
#line 1160 "grammar.y"
    { (yyval.classDef) = MkClassDefDefaultProperty((yyvsp[(1) - (1)].list)); (yyval.classDef).loc = (yyloc);  (yyval.classDef).loc.end.charPos++; (yyval.classDef).loc.end.pos++; ;}
    break;

  case 197:

/* Line 1464 of yacc.c  */
#line 1164 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 198:

/* Line 1464 of yacc.c  */
#line 1165 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 199:

/* Line 1464 of yacc.c  */
#line 1166 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 200:

/* Line 1464 of yacc.c  */
#line 1170 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].classDef)); ;}
    break;

  case 203:

/* Line 1464 of yacc.c  */
#line 1173 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 204:

/* Line 1464 of yacc.c  */
#line 1174 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyval.list), (yyvsp[(2) - (2)].classDef)); ;}
    break;

  case 205:

/* Line 1464 of yacc.c  */
#line 1178 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 206:

/* Line 1464 of yacc.c  */
#line 1179 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 207:

/* Line 1464 of yacc.c  */
#line 1180 "grammar.y"
    { (yyval.templateDatatype) = MkTemplateDatatype(MkListOne(MkSpecifierName((yyvsp[(1) - (1)].id).string)), null); FreeIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 208:

/* Line 1464 of yacc.c  */
#line 1184 "grammar.y"
    { (yyval.templateArgument) = MkTemplateTypeArgument((yyvsp[(1) - (1)].templateDatatype)); ;}
    break;

  case 209:

/* Line 1464 of yacc.c  */
#line 1188 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (2)].id), null, null); ;}
    break;

  case 210:

/* Line 1464 of yacc.c  */
#line 1189 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 211:

/* Line 1464 of yacc.c  */
#line 1190 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 212:

/* Line 1464 of yacc.c  */
#line 1191 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 213:

/* Line 1464 of yacc.c  */
#line 1192 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (2)].string)), null, null); delete (yyvsp[(2) - (2)].string); ;}
    break;

  case 214:

/* Line 1464 of yacc.c  */
#line 1193 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), null, (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 215:

/* Line 1464 of yacc.c  */
#line 1194 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (4)].string)), (yyvsp[(4) - (4)].templateDatatype), null); ;}
    break;

  case 216:

/* Line 1464 of yacc.c  */
#line 1195 "grammar.y"
    { (yyval.templateParameter) = MkTypeTemplateParameter(MkIdentifier((yyvsp[(2) - (6)].string)), (yyvsp[(4) - (6)].templateDatatype), (yyvsp[(6) - (6)].templateArgument)); ;}
    break;

  case 217:

/* Line 1464 of yacc.c  */
#line 1199 "grammar.y"
    { (yyval.templateArgument) = MkTemplateIdentifierArgument((yyvsp[(1) - (1)].id)); ;}
    break;

  case 218:

/* Line 1464 of yacc.c  */
#line 1203 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (1)].id), dataMember, null); ;}
    break;

  case 219:

/* Line 1464 of yacc.c  */
#line 1204 "grammar.y"
    { (yyval.templateParameter) = MkIdentifierTemplateParameter((yyvsp[(1) - (3)].id), dataMember, (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 220:

/* Line 1464 of yacc.c  */
#line 1208 "grammar.y"
    { (yyval.templateArgument) = MkTemplateExpressionArgument((yyvsp[(1) - (1)].exp)); ;}
    break;

  case 221:

/* Line 1464 of yacc.c  */
#line 1212 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(2) - (2)].id), (yyvsp[(1) - (2)].templateDatatype), null); ;}
    break;

  case 222:

/* Line 1464 of yacc.c  */
#line 1213 "grammar.y"
    { (yyval.templateParameter) = MkExpressionTemplateParameter((yyvsp[(2) - (4)].id), (yyvsp[(1) - (4)].templateDatatype), (yyvsp[(4) - (4)].templateArgument)); ;}
    break;

  case 226:

/* Line 1464 of yacc.c  */
#line 1223 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateParameter)); ;}
    break;

  case 227:

/* Line 1464 of yacc.c  */
#line 1224 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateParameter)); ;}
    break;

  case 231:

/* Line 1464 of yacc.c  */
#line 1231 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 232:

/* Line 1464 of yacc.c  */
#line 1232 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 233:

/* Line 1464 of yacc.c  */
#line 1233 "grammar.y"
    { (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); (yyval.templateArgument).name = (yyvsp[(1) - (3)].id); (yyval.templateArgument).loc = (yyloc); ;}
    break;

  case 234:

/* Line 1464 of yacc.c  */
#line 1235 "grammar.y"
    {
      (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); 
      if((yyvsp[(1) - (3)].templateDatatype).specifiers && (yyvsp[(1) - (3)].templateDatatype).specifiers->first)
      {
         Specifier spec = (yyvsp[(1) - (3)].templateDatatype).specifiers->first;
         if(spec.type == nameSpecifier)
            (yyval.templateArgument).name = MkIdentifier(spec.name);
      }
      FreeTemplateDataType((yyvsp[(1) - (3)].templateDatatype));
      (yyval.templateArgument).loc = (yyloc);
   ;}
    break;

  case 235:

/* Line 1464 of yacc.c  */
#line 1247 "grammar.y"
    {
      (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); 
      if((yyvsp[(1) - (3)].templateDatatype).specifiers && (yyvsp[(1) - (3)].templateDatatype).specifiers->first)
      {
         Specifier spec = (yyvsp[(1) - (3)].templateDatatype).specifiers->first;
         if(spec.type == nameSpecifier)
            (yyval.templateArgument).name = MkIdentifier(spec.name);
      }
      FreeTemplateDataType((yyvsp[(1) - (3)].templateDatatype));
      (yyval.templateArgument).loc = (yyloc);
   ;}
    break;

  case 236:

/* Line 1464 of yacc.c  */
#line 1259 "grammar.y"
    {
      (yyval.templateArgument) = (yyvsp[(3) - (3)].templateArgument); 
      if((yyvsp[(1) - (3)].templateDatatype).specifiers && (yyvsp[(1) - (3)].templateDatatype).specifiers->first)
      {
         Specifier spec = (yyvsp[(1) - (3)].templateDatatype).specifiers->first;
         if(spec.type == nameSpecifier)
            (yyval.templateArgument).name = MkIdentifier(spec.name);
      }
      FreeTemplateDataType((yyvsp[(1) - (3)].templateDatatype));
      (yyval.templateArgument).loc = (yyloc);
   ;}
    break;

  case 237:

/* Line 1464 of yacc.c  */
#line 1273 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].templateArgument)); ;}
    break;

  case 238:

/* Line 1464 of yacc.c  */
#line 1274 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].templateArgument)); ;}
    break;

  case 239:

/* Line 1464 of yacc.c  */
#line 1279 "grammar.y"
    {
      if(curContext != globalContext)
         PopContext(curContext);
      (yyval.context) = PushContext();
   ;}
    break;

  case 240:

/* Line 1464 of yacc.c  */
#line 1286 "grammar.y"
    { (yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (2)].id).string); FreeIdentifier((yyvsp[(2) - (2)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (2)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 241:

/* Line 1464 of yacc.c  */
#line 1288 "grammar.y"
    { 
      (yyvsp[(1) - (2)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(2) - (2)].specifier).name); 
      (yyval.symbol).nameLoc = (yylsp[(2) - (2)]); 
      FreeSpecifier((yyvsp[(2) - (2)].specifier)); 
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 242:

/* Line 1464 of yacc.c  */
#line 1295 "grammar.y"
    { (yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (3)].id).string); FreeIdentifier((yyvsp[(1) - (3)].id)); FreeIdentifier((yyvsp[(3) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 243:

/* Line 1464 of yacc.c  */
#line 1296 "grammar.y"
    { (yyvsp[(2) - (3)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(3) - (3)].specifier).name); FreeIdentifier((yyvsp[(1) - (3)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (3)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (3)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 244:

/* Line 1464 of yacc.c  */
#line 1298 "grammar.y"
    { (yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (5)].id).string); (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list); FreeIdentifier((yyvsp[(2) - (5)].id)); (yyval.symbol).nameLoc = (yylsp[(2) - (5)]); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 245:

/* Line 1464 of yacc.c  */
#line 1300 "grammar.y"
    { 
      (yyvsp[(1) - (5)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(2) - (5)].specifier).name);
      (yyval.symbol).templateParams = (yyvsp[(4) - (5)].list); 
      (yyval.symbol).nameLoc = (yylsp[(2) - (5)]); 
      FreeSpecifier((yyvsp[(2) - (5)].specifier)); 
      ++defaultMemberAccess;
      memberAccessStack[defaultMemberAccess] = privateAccess;
   ;}
    break;

  case 246:

/* Line 1464 of yacc.c  */
#line 1308 "grammar.y"
    { (yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (6)].id).string); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 247:

/* Line 1464 of yacc.c  */
#line 1309 "grammar.y"
    { (yyvsp[(2) - (6)].context); (yyval.symbol) = DeclClass(globalContext.nextID++, (yyvsp[(3) - (6)].specifier).name); (yyval.symbol).templateParams = (yyvsp[(5) - (6)].list); FreeIdentifier((yyvsp[(1) - (6)].id)); (yyval.symbol).nameLoc = (yylsp[(3) - (6)]); (yyval.symbol).isRemote = true; FreeSpecifier((yyvsp[(3) - (6)].specifier)); memberAccessStack[++defaultMemberAccess] = privateAccess; ;}
    break;

  case 248:

/* Line 1464 of yacc.c  */
#line 1314 "grammar.y"
    {
         (yyval._class).loc = (yyloc);
         (yyval._class) = (yyvsp[(1) - (2)]._class); 
      ;}
    break;

  case 249:

/* Line 1464 of yacc.c  */
#line 1321 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (2)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (2)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 250:

/* Line 1464 of yacc.c  */
#line 1328 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 251:

/* Line 1464 of yacc.c  */
#line 1334 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 252:

/* Line 1464 of yacc.c  */
#line 1341 "grammar.y"
    {
         (yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClassAddNameSpace(0, (yyvsp[(2) - (3)].id).string), null, null); FreeIdentifier((yyvsp[(2) - (3)].id));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 253:

/* Line 1464 of yacc.c  */
#line 1347 "grammar.y"
    {
         (yyvsp[(1) - (3)].context); (yyval._class) = MkClass(DeclClass(0, (yyvsp[(2) - (3)].specifier).name), null, null); FreeSpecifier((yyvsp[(2) - (3)].specifier));
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 254:

/* Line 1464 of yacc.c  */
#line 1356 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), (yyvsp[(3) - (3)].list), null);
      ;}
    break;

  case 255:

/* Line 1464 of yacc.c  */
#line 1363 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 256:

/* Line 1464 of yacc.c  */
#line 1369 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 257:

/* Line 1464 of yacc.c  */
#line 1375 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, (yyvsp[(3) - (3)].list)); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]); (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 258:

/* Line 1464 of yacc.c  */
#line 1381 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = (yyvsp[(3) - (3)].list); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 259:

/* Line 1464 of yacc.c  */
#line 1387 "grammar.y"
    {
         (yyval._class) = MkClass((yyvsp[(1) - (3)].symbol), null, MkList()); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 260:

/* Line 1464 of yacc.c  */
#line 1393 "grammar.y"
    {
         (yyval._class) = (yyvsp[(1) - (3)]._class); (yyval._class).definitions = MkList(); (yyval._class).deleteWatchable = deleteWatchable; deleteWatchable = false; (yyval._class).blockStart = (yylsp[(2) - (3)]);  (yyval._class).loc = (yyloc); (yyval._class).loc.end.charPos++; (yyval._class).loc.end.pos++; (yyval._class).endid = globalContext.nextID++;
         POP_DEFAULT_ACCESS
         PopContext(curContext);
      ;}
    break;

  case 261:

/* Line 1464 of yacc.c  */
#line 1404 "grammar.y"
    { (yyval.id) = MkIdentifier(yytext); (yyval.id).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 263:

/* Line 1464 of yacc.c  */
#line 1410 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 264:

/* Line 1464 of yacc.c  */
#line 1414 "grammar.y"
    { (yyval.exp) = MkExpString((yyvsp[(1) - (1)].string)); delete (yyvsp[(1) - (1)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 265:

/* Line 1464 of yacc.c  */
#line 1415 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(2) - (2)].string), null); delete (yyvsp[(2) - (2)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 266:

/* Line 1464 of yacc.c  */
#line 1416 "grammar.y"
    { (yyval.exp) = MkExpIntlString((yyvsp[(4) - (4)].string), (yyvsp[(2) - (4)].string)); delete (yyvsp[(2) - (4)].string); delete (yyvsp[(4) - (4)].string); (yyval.exp).loc = (yyloc); ;}
    break;

  case 267:

/* Line 1464 of yacc.c  */
#line 1420 "grammar.y"
    { (yyval.exp) = MkExpIdentifier((yyvsp[(1) - (1)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 268:

/* Line 1464 of yacc.c  */
#line 1421 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 269:

/* Line 1464 of yacc.c  */
#line 1422 "grammar.y"
    { (yyval.exp) = MkExpExtensionCompound((yyvsp[(3) - (4)].stmt)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 270:

/* Line 1464 of yacc.c  */
#line 1423 "grammar.y"
    { (yyval.exp) = MkExpExtensionExpression((yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 271:

/* Line 1464 of yacc.c  */
#line 1424 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (5)].typeName), (yyvsp[(5) - (5)].initializer)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 272:

/* Line 1464 of yacc.c  */
#line 1425 "grammar.y"
    { (yyval.exp) = MkExpExtensionInitializer((yyvsp[(3) - (8)].typeName), MkInitializerAssignment(MkExpExtensionInitializer((yyvsp[(6) - (8)].typeName), (yyvsp[(8) - (8)].initializer)))); (yyval.exp).loc = (yyloc); ;}
    break;

  case 273:

/* Line 1464 of yacc.c  */
#line 1426 "grammar.y"
    { (yyval.exp) = MkExpConstant(yytext); (yyval.exp).loc = (yyloc); ;}
    break;

  case 275:

/* Line 1464 of yacc.c  */
#line 1428 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(1) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).start; (yyval.exp) = MkExpBrackets(MkListOne(exp)); (yyval.exp).loc = (yyloc); yyerror(); ;}
    break;

  case 276:

/* Line 1464 of yacc.c  */
#line 1429 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 277:

/* Line 1464 of yacc.c  */
#line 1430 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 278:

/* Line 1464 of yacc.c  */
#line 1431 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 279:

/* Line 1464 of yacc.c  */
#line 1432 "grammar.y"
    { (yyval.exp) = MkExpNew(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 280:

/* Line 1464 of yacc.c  */
#line 1433 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 281:

/* Line 1464 of yacc.c  */
#line 1434 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (6)].list),(yyvsp[(3) - (6)].declarator)), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 282:

/* Line 1464 of yacc.c  */
#line 1435 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 283:

/* Line 1464 of yacc.c  */
#line 1436 "grammar.y"
    { (yyval.exp) = MkExpNew0(MkTypeName((yyvsp[(2) - (5)].list),null), (yyvsp[(4) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 284:

/* Line 1464 of yacc.c  */
#line 1437 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 285:

/* Line 1464 of yacc.c  */
#line 1438 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 286:

/* Line 1464 of yacc.c  */
#line 1439 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 287:

/* Line 1464 of yacc.c  */
#line 1440 "grammar.y"
    { (yyval.exp) = MkExpRenew((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 288:

/* Line 1464 of yacc.c  */
#line 1441 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 289:

/* Line 1464 of yacc.c  */
#line 1442 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (7)].exp), MkTypeName((yyvsp[(3) - (7)].list),(yyvsp[(4) - (7)].declarator)), (yyvsp[(6) - (7)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 290:

/* Line 1464 of yacc.c  */
#line 1443 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 291:

/* Line 1464 of yacc.c  */
#line 1444 "grammar.y"
    { (yyval.exp) = MkExpRenew0((yyvsp[(2) - (6)].exp), MkTypeName((yyvsp[(3) - (6)].list),null), (yyvsp[(5) - (6)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 292:

/* Line 1464 of yacc.c  */
#line 1445 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (4)].list), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 293:

/* Line 1464 of yacc.c  */
#line 1446 "grammar.y"
    { (yyval.exp) = MkExpClass((yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].declarator)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 294:

/* Line 1464 of yacc.c  */
#line 1447 "grammar.y"
    { (yyval.exp) = MkExpClass(MkListOne(MkSpecifierName((yyvsp[(3) - (4)].id).string)), null); FreeIdentifier((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 295:

/* Line 1464 of yacc.c  */
#line 1448 "grammar.y"
    { (yyval.exp) = MkExpVaArg((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 296:

/* Line 1464 of yacc.c  */
#line 1450 "grammar.y"
    { (yyval.exp) = MkExpClassData((yyvsp[(3) - (4)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 301:

/* Line 1464 of yacc.c  */
#line 1456 "grammar.y"
    { (yyval.exp) = MkExpArray((yyvsp[(2) - (3)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 302:

/* Line 1464 of yacc.c  */
#line 1460 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (1)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 303:

/* Line 1464 of yacc.c  */
#line 1464 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 304:

/* Line 1464 of yacc.c  */
#line 1468 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 305:

/* Line 1464 of yacc.c  */
#line 1469 "grammar.y"
    { (yyval.exp) = MkExpBrackets((yyvsp[(2) - (2)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 307:

/* Line 1464 of yacc.c  */
#line 1475 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 308:

/* Line 1464 of yacc.c  */
#line 1476 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 309:

/* Line 1464 of yacc.c  */
#line 1477 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 310:

/* Line 1464 of yacc.c  */
#line 1478 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 311:

/* Line 1464 of yacc.c  */
#line 1479 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; ;}
    break;

  case 312:

/* Line 1464 of yacc.c  */
#line 1480 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 313:

/* Line 1464 of yacc.c  */
#line 1481 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 314:

/* Line 1464 of yacc.c  */
#line 1482 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 315:

/* Line 1464 of yacc.c  */
#line 1483 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 316:

/* Line 1464 of yacc.c  */
#line 1485 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 317:

/* Line 1464 of yacc.c  */
#line 1486 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 318:

/* Line 1464 of yacc.c  */
#line 1487 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 319:

/* Line 1464 of yacc.c  */
#line 1488 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); ;}
    break;

  case 320:

/* Line 1464 of yacc.c  */
#line 1489 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 321:

/* Line 1464 of yacc.c  */
#line 1490 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 322:

/* Line 1464 of yacc.c  */
#line 1491 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 323:

/* Line 1464 of yacc.c  */
#line 1492 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 325:

/* Line 1464 of yacc.c  */
#line 1498 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 326:

/* Line 1464 of yacc.c  */
#line 1499 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 327:

/* Line 1464 of yacc.c  */
#line 1500 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 328:

/* Line 1464 of yacc.c  */
#line 1501 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 329:

/* Line 1464 of yacc.c  */
#line 1502 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end; (yyval.exp).loc = (yyloc); if((yyvsp[(3) - (4)].list)->last) ((Expression)(yyvsp[(3) - (4)].list)->last).loc.end = (yylsp[(4) - (4)]).start; ;}
    break;

  case 330:

/* Line 1464 of yacc.c  */
#line 1503 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 331:

/* Line 1464 of yacc.c  */
#line 1504 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 332:

/* Line 1464 of yacc.c  */
#line 1505 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 333:

/* Line 1464 of yacc.c  */
#line 1506 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 334:

/* Line 1464 of yacc.c  */
#line 1508 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 335:

/* Line 1464 of yacc.c  */
#line 1509 "grammar.y"
    { (yyval.exp) = MkExpIndex((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 336:

/* Line 1464 of yacc.c  */
#line 1510 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), MkList()); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); ;}
    break;

  case 337:

/* Line 1464 of yacc.c  */
#line 1511 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (4)]).start; (yyval.exp).call.argLoc.end = (yylsp[(4) - (4)]).end;(yyval.exp).loc = (yyloc); ;}
    break;

  case 338:

/* Line 1464 of yacc.c  */
#line 1512 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 339:

/* Line 1464 of yacc.c  */
#line 1513 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].id)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 340:

/* Line 1464 of yacc.c  */
#line 1514 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), INC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 341:

/* Line 1464 of yacc.c  */
#line 1515 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), DEC_OP, null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 342:

/* Line 1464 of yacc.c  */
#line 1519 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 343:

/* Line 1464 of yacc.c  */
#line 1520 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 344:

/* Line 1464 of yacc.c  */
#line 1521 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 345:

/* Line 1464 of yacc.c  */
#line 1522 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 346:

/* Line 1464 of yacc.c  */
#line 1526 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 347:

/* Line 1464 of yacc.c  */
#line 1527 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 348:

/* Line 1464 of yacc.c  */
#line 1528 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 349:

/* Line 1464 of yacc.c  */
#line 1529 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp));  ;}
    break;

  case 350:

/* Line 1464 of yacc.c  */
#line 1530 "grammar.y"
    { Expression exp = MkExpDummy(); exp.loc.start = (yylsp[(2) - (2)]).end; exp.loc.end = (yylsp[(2) - (2)]).end; (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), exp); ;}
    break;

  case 351:

/* Line 1464 of yacc.c  */
#line 1534 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 352:

/* Line 1464 of yacc.c  */
#line 1535 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 353:

/* Line 1464 of yacc.c  */
#line 1536 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 354:

/* Line 1464 of yacc.c  */
#line 1537 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 355:

/* Line 1464 of yacc.c  */
#line 1538 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(3) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 356:

/* Line 1464 of yacc.c  */
#line 1539 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 357:

/* Line 1464 of yacc.c  */
#line 1540 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 358:

/* Line 1464 of yacc.c  */
#line 1541 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 359:

/* Line 1464 of yacc.c  */
#line 1542 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (5)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 360:

/* Line 1464 of yacc.c  */
#line 1544 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(3) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 361:

/* Line 1464 of yacc.c  */
#line 1545 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 362:

/* Line 1464 of yacc.c  */
#line 1546 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (4)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 367:

/* Line 1464 of yacc.c  */
#line 1560 "grammar.y"
    { (yyval.i) = '&'; ;}
    break;

  case 368:

/* Line 1464 of yacc.c  */
#line 1561 "grammar.y"
    { (yyval.i) = '*'; ;}
    break;

  case 369:

/* Line 1464 of yacc.c  */
#line 1562 "grammar.y"
    { (yyval.i) = '+'; ;}
    break;

  case 370:

/* Line 1464 of yacc.c  */
#line 1563 "grammar.y"
    { (yyval.i) = '-'; ;}
    break;

  case 371:

/* Line 1464 of yacc.c  */
#line 1564 "grammar.y"
    { (yyval.i) = '~'; ;}
    break;

  case 372:

/* Line 1464 of yacc.c  */
#line 1565 "grammar.y"
    { (yyval.i) = '!'; ;}
    break;

  case 373:

/* Line 1464 of yacc.c  */
#line 1566 "grammar.y"
    { (yyval.i) = DELETE; ;}
    break;

  case 374:

/* Line 1464 of yacc.c  */
#line 1567 "grammar.y"
    { (yyval.i) = _INCREF; ;}
    break;

  case 376:

/* Line 1464 of yacc.c  */
#line 1572 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 378:

/* Line 1464 of yacc.c  */
#line 1577 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 379:

/* Line 1464 of yacc.c  */
#line 1578 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 380:

/* Line 1464 of yacc.c  */
#line 1579 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 381:

/* Line 1464 of yacc.c  */
#line 1580 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 382:

/* Line 1464 of yacc.c  */
#line 1581 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 383:

/* Line 1464 of yacc.c  */
#line 1582 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 385:

/* Line 1464 of yacc.c  */
#line 1587 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 386:

/* Line 1464 of yacc.c  */
#line 1588 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 387:

/* Line 1464 of yacc.c  */
#line 1589 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 388:

/* Line 1464 of yacc.c  */
#line 1590 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 390:

/* Line 1464 of yacc.c  */
#line 1595 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 391:

/* Line 1464 of yacc.c  */
#line 1596 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 392:

/* Line 1464 of yacc.c  */
#line 1597 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 393:

/* Line 1464 of yacc.c  */
#line 1598 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 394:

/* Line 1464 of yacc.c  */
#line 1603 "grammar.y"
    {
      (yyval.exp) = (yyvsp[(1) - (2)].exp);
      skipErrors = true;
   ;}
    break;

  case 396:

/* Line 1464 of yacc.c  */
#line 1611 "grammar.y"
    { skipErrors = false; (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp)/*$3*/); (yyval.exp).loc = (yyloc); ;}
    break;

  case 397:

/* Line 1464 of yacc.c  */
#line 1612 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 398:

/* Line 1464 of yacc.c  */
#line 1613 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 399:

/* Line 1464 of yacc.c  */
#line 1614 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 400:

/* Line 1464 of yacc.c  */
#line 1615 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 401:

/* Line 1464 of yacc.c  */
#line 1616 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 402:

/* Line 1464 of yacc.c  */
#line 1617 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 403:

/* Line 1464 of yacc.c  */
#line 1618 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 405:

/* Line 1464 of yacc.c  */
#line 1623 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 406:

/* Line 1464 of yacc.c  */
#line 1624 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 407:

/* Line 1464 of yacc.c  */
#line 1625 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 408:

/* Line 1464 of yacc.c  */
#line 1626 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 409:

/* Line 1464 of yacc.c  */
#line 1628 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 410:

/* Line 1464 of yacc.c  */
#line 1629 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 411:

/* Line 1464 of yacc.c  */
#line 1630 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 412:

/* Line 1464 of yacc.c  */
#line 1631 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 414:

/* Line 1464 of yacc.c  */
#line 1636 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 415:

/* Line 1464 of yacc.c  */
#line 1637 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 416:

/* Line 1464 of yacc.c  */
#line 1639 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 417:

/* Line 1464 of yacc.c  */
#line 1640 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 419:

/* Line 1464 of yacc.c  */
#line 1645 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 420:

/* Line 1464 of yacc.c  */
#line 1646 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 421:

/* Line 1464 of yacc.c  */
#line 1648 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 422:

/* Line 1464 of yacc.c  */
#line 1649 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 424:

/* Line 1464 of yacc.c  */
#line 1654 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 425:

/* Line 1464 of yacc.c  */
#line 1655 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 426:

/* Line 1464 of yacc.c  */
#line 1657 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 427:

/* Line 1464 of yacc.c  */
#line 1658 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 429:

/* Line 1464 of yacc.c  */
#line 1663 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 430:

/* Line 1464 of yacc.c  */
#line 1664 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 432:

/* Line 1464 of yacc.c  */
#line 1669 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 433:

/* Line 1464 of yacc.c  */
#line 1670 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 435:

/* Line 1464 of yacc.c  */
#line 1675 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 436:

/* Line 1464 of yacc.c  */
#line 1676 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 437:

/* Line 1464 of yacc.c  */
#line 1677 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 438:

/* Line 1464 of yacc.c  */
#line 1678 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 439:

/* Line 1464 of yacc.c  */
#line 1680 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 440:

/* Line 1464 of yacc.c  */
#line 1681 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 441:

/* Line 1464 of yacc.c  */
#line 1682 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 442:

/* Line 1464 of yacc.c  */
#line 1683 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 443:

/* Line 1464 of yacc.c  */
#line 1685 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 444:

/* Line 1464 of yacc.c  */
#line 1686 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 445:

/* Line 1464 of yacc.c  */
#line 1687 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 446:

/* Line 1464 of yacc.c  */
#line 1688 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 447:

/* Line 1464 of yacc.c  */
#line 1690 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 448:

/* Line 1464 of yacc.c  */
#line 1691 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 449:

/* Line 1464 of yacc.c  */
#line 1692 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 450:

/* Line 1464 of yacc.c  */
#line 1693 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 452:

/* Line 1464 of yacc.c  */
#line 1698 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 453:

/* Line 1464 of yacc.c  */
#line 1699 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 454:

/* Line 1464 of yacc.c  */
#line 1700 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 455:

/* Line 1464 of yacc.c  */
#line 1701 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 456:

/* Line 1464 of yacc.c  */
#line 1703 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 457:

/* Line 1464 of yacc.c  */
#line 1704 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 458:

/* Line 1464 of yacc.c  */
#line 1705 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 459:

/* Line 1464 of yacc.c  */
#line 1706 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 460:

/* Line 1464 of yacc.c  */
#line 1710 "grammar.y"
    { (yyval.i) = '='; ;}
    break;

  case 461:

/* Line 1464 of yacc.c  */
#line 1711 "grammar.y"
    { (yyval.i) = MUL_ASSIGN; ;}
    break;

  case 462:

/* Line 1464 of yacc.c  */
#line 1712 "grammar.y"
    { (yyval.i) = DIV_ASSIGN; ;}
    break;

  case 463:

/* Line 1464 of yacc.c  */
#line 1713 "grammar.y"
    { (yyval.i) = MOD_ASSIGN; ;}
    break;

  case 464:

/* Line 1464 of yacc.c  */
#line 1714 "grammar.y"
    { (yyval.i) = ADD_ASSIGN; ;}
    break;

  case 465:

/* Line 1464 of yacc.c  */
#line 1715 "grammar.y"
    { (yyval.i) = SUB_ASSIGN; ;}
    break;

  case 466:

/* Line 1464 of yacc.c  */
#line 1716 "grammar.y"
    { (yyval.i) = LEFT_ASSIGN; ;}
    break;

  case 467:

/* Line 1464 of yacc.c  */
#line 1717 "grammar.y"
    { (yyval.i) = RIGHT_ASSIGN; ;}
    break;

  case 468:

/* Line 1464 of yacc.c  */
#line 1718 "grammar.y"
    { (yyval.i) = AND_ASSIGN; ;}
    break;

  case 469:

/* Line 1464 of yacc.c  */
#line 1719 "grammar.y"
    { (yyval.i) = XOR_ASSIGN; ;}
    break;

  case 470:

/* Line 1464 of yacc.c  */
#line 1720 "grammar.y"
    { (yyval.i) = OR_ASSIGN; ;}
    break;

  case 471:

/* Line 1464 of yacc.c  */
#line 1724 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 472:

/* Line 1464 of yacc.c  */
#line 1725 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 473:

/* Line 1464 of yacc.c  */
#line 1726 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 475:

/* Line 1464 of yacc.c  */
#line 1731 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 476:

/* Line 1464 of yacc.c  */
#line 1732 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 477:

/* Line 1464 of yacc.c  */
#line 1733 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 479:

/* Line 1464 of yacc.c  */
#line 1738 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); /*printf("Sorry, didn't mean that syntax error\n");*/ ;}
    break;

  case 481:

/* Line 1464 of yacc.c  */
#line 1740 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 482:

/* Line 1464 of yacc.c  */
#line 1742 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 483:

/* Line 1464 of yacc.c  */
#line 1743 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 484:

/* Line 1464 of yacc.c  */
#line 1745 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 485:

/* Line 1464 of yacc.c  */
#line 1746 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 486:

/* Line 1464 of yacc.c  */
#line 1751 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 487:

/* Line 1464 of yacc.c  */
#line 1753 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 488:

/* Line 1464 of yacc.c  */
#line 1758 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 489:

/* Line 1464 of yacc.c  */
#line 1762 "grammar.y"
    { (yyval.exp) = MkExpDummy(); (yyval.exp).loc = (yyloc); ;}
    break;

  case 491:

/* Line 1464 of yacc.c  */
#line 1764 "grammar.y"
    { (yyval.exp) = MkExpInstance((yyvsp[(1) - (2)].instance)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 492:

/* Line 1464 of yacc.c  */
#line 1766 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 493:

/* Line 1464 of yacc.c  */
#line 1767 "grammar.y"
    { (yyval.exp) = MkExpPointer((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 494:

/* Line 1464 of yacc.c  */
#line 1769 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 495:

/* Line 1464 of yacc.c  */
#line 1770 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 496:

/* Line 1464 of yacc.c  */
#line 1775 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 497:

/* Line 1464 of yacc.c  */
#line 1777 "grammar.y"
    { (yyval.exp) = MkExpCall((yyvsp[(1) - (3)].exp), (yyvsp[(3) - (3)].list)); (yyval.exp).loc = (yyloc); (yyval.exp).call.argLoc.start = (yylsp[(2) - (3)]).start; (yyval.exp).call.argLoc.end = (yylsp[(3) - (3)]).end; (yyval.exp).call.argLoc.end.charPos++;;}
    break;

  case 498:

/* Line 1464 of yacc.c  */
#line 1782 "grammar.y"
    { (yyval.exp) = MkExpMember((yyvsp[(1) - (3)].exp), null); (yyval.exp).loc = (yyloc); ;}
    break;

  case 499:

/* Line 1464 of yacc.c  */
#line 1786 "grammar.y"
    { (yyval.exp) = MkExpOp(null, INC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 500:

/* Line 1464 of yacc.c  */
#line 1787 "grammar.y"
    { (yyval.exp) = MkExpOp(null, DEC_OP, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 501:

/* Line 1464 of yacc.c  */
#line 1788 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 502:

/* Line 1464 of yacc.c  */
#line 1789 "grammar.y"
    { (yyval.exp) = MkExpOp(null, (yyvsp[(1) - (2)].i), (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 503:

/* Line 1464 of yacc.c  */
#line 1790 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 504:

/* Line 1464 of yacc.c  */
#line 1791 "grammar.y"
    { (yyval.exp) = MkExpOp(null, SIZEOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 505:

/* Line 1464 of yacc.c  */
#line 1792 "grammar.y"
    { (yyval.exp) = MkExpTypeSize((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 506:

/* Line 1464 of yacc.c  */
#line 1793 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 507:

/* Line 1464 of yacc.c  */
#line 1794 "grammar.y"
    { (yyval.exp) = MkExpClassSize((yyvsp[(4) - (6)].specifier)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 508:

/* Line 1464 of yacc.c  */
#line 1795 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 509:

/* Line 1464 of yacc.c  */
#line 1796 "grammar.y"
    { (yyval.exp) = MkExpOp(null, ALIGNOF, (yyvsp[(2) - (2)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 510:

/* Line 1464 of yacc.c  */
#line 1797 "grammar.y"
    { (yyval.exp) = MkExpTypeAlign((yyvsp[(3) - (5)].typeName)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 516:

/* Line 1464 of yacc.c  */
#line 1813 "grammar.y"
    { (yyval.exp) = MkExpCast((yyvsp[(2) - (4)].typeName), (yyvsp[(4) - (4)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 518:

/* Line 1464 of yacc.c  */
#line 1818 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 519:

/* Line 1464 of yacc.c  */
#line 1819 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 520:

/* Line 1464 of yacc.c  */
#line 1820 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 521:

/* Line 1464 of yacc.c  */
#line 1821 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '*', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 522:

/* Line 1464 of yacc.c  */
#line 1822 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '/', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 523:

/* Line 1464 of yacc.c  */
#line 1823 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '%', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 525:

/* Line 1464 of yacc.c  */
#line 1828 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 526:

/* Line 1464 of yacc.c  */
#line 1832 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 527:

/* Line 1464 of yacc.c  */
#line 1836 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '+', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 528:

/* Line 1464 of yacc.c  */
#line 1840 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '-', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 530:

/* Line 1464 of yacc.c  */
#line 1848 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 531:

/* Line 1464 of yacc.c  */
#line 1849 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 532:

/* Line 1464 of yacc.c  */
#line 1850 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LEFT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 533:

/* Line 1464 of yacc.c  */
#line 1851 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), RIGHT_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 535:

/* Line 1464 of yacc.c  */
#line 1857 "grammar.y"
    {
      if((yyvsp[(1) - (2)].exp).type == identifierExp)
      {
         if((yyvsp[(1) - (2)].exp).identifier._class && !(yyvsp[(1) - (2)].exp).identifier._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(1) - (2)].exp).identifier.string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (2)].exp).identifier.string);

         // printf("Declaring Class %s\n", $1.identifier.string);
         skipErrors = false;

         FreeExpression((yyvsp[(1) - (2)].exp));
         FreeExpression((yyvsp[(2) - (2)].exp));
         
         fileInput.Seek((yylsp[(1) - (2)]).start.pos, start); 
         resetScannerPos(&(yylsp[(1) - (2)]).start);
         yyclearin;

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
/*         
         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);

         YYPOPSTACK(1);
         yystate = *yyssp;
         YY_STACK_PRINT (yyss, yyssp);
*/
         yyerrok;

         goto yysetstate;
      }
      else
      {
         (yyval.exp) = MkExpOp((yyvsp[(1) - (2)].exp), '<', (yyvsp[(2) - (2)].exp));
         (yyval.exp).loc = (yyloc);
      } 
      skipErrors = false;
   ;}
    break;

  case 536:

/* Line 1464 of yacc.c  */
#line 1907 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 537:

/* Line 1464 of yacc.c  */
#line 1908 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 538:

/* Line 1464 of yacc.c  */
#line 1909 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 539:

/* Line 1464 of yacc.c  */
#line 1910 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '<', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 540:

/* Line 1464 of yacc.c  */
#line 1911 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '>', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 541:

/* Line 1464 of yacc.c  */
#line 1912 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), LE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 542:

/* Line 1464 of yacc.c  */
#line 1913 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), GE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 544:

/* Line 1464 of yacc.c  */
#line 1918 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 545:

/* Line 1464 of yacc.c  */
#line 1919 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 546:

/* Line 1464 of yacc.c  */
#line 1920 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 547:

/* Line 1464 of yacc.c  */
#line 1921 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 548:

/* Line 1464 of yacc.c  */
#line 1928 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 549:

/* Line 1464 of yacc.c  */
#line 1929 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 550:

/* Line 1464 of yacc.c  */
#line 1930 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), EQ_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 551:

/* Line 1464 of yacc.c  */
#line 1931 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), NE_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 553:

/* Line 1464 of yacc.c  */
#line 1936 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 554:

/* Line 1464 of yacc.c  */
#line 1937 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 555:

/* Line 1464 of yacc.c  */
#line 1939 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 556:

/* Line 1464 of yacc.c  */
#line 1940 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '&', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 558:

/* Line 1464 of yacc.c  */
#line 1945 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 559:

/* Line 1464 of yacc.c  */
#line 1946 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 560:

/* Line 1464 of yacc.c  */
#line 1948 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 561:

/* Line 1464 of yacc.c  */
#line 1949 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '^', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 563:

/* Line 1464 of yacc.c  */
#line 1954 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 564:

/* Line 1464 of yacc.c  */
#line 1955 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 565:

/* Line 1464 of yacc.c  */
#line 1957 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 566:

/* Line 1464 of yacc.c  */
#line 1958 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), '|', (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 568:

/* Line 1464 of yacc.c  */
#line 1963 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 569:

/* Line 1464 of yacc.c  */
#line 1964 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), AND_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 571:

/* Line 1464 of yacc.c  */
#line 1969 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 572:

/* Line 1464 of yacc.c  */
#line 1970 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), OR_OP, (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 574:

/* Line 1464 of yacc.c  */
#line 1975 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 575:

/* Line 1464 of yacc.c  */
#line 1976 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 576:

/* Line 1464 of yacc.c  */
#line 1977 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 577:

/* Line 1464 of yacc.c  */
#line 1978 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 578:

/* Line 1464 of yacc.c  */
#line 1979 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 579:

/* Line 1464 of yacc.c  */
#line 1980 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 580:

/* Line 1464 of yacc.c  */
#line 1981 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 581:

/* Line 1464 of yacc.c  */
#line 1982 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 582:

/* Line 1464 of yacc.c  */
#line 1984 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 583:

/* Line 1464 of yacc.c  */
#line 1985 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 584:

/* Line 1464 of yacc.c  */
#line 1986 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 585:

/* Line 1464 of yacc.c  */
#line 1987 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 586:

/* Line 1464 of yacc.c  */
#line 1988 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 587:

/* Line 1464 of yacc.c  */
#line 1989 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 588:

/* Line 1464 of yacc.c  */
#line 1990 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 589:

/* Line 1464 of yacc.c  */
#line 1991 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (4)].exp), (yyvsp[(3) - (4)].list), MkExpDummy()); (yyval.exp).loc = (yyloc); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (4)]); ;}
    break;

  case 590:

/* Line 1464 of yacc.c  */
#line 1993 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 591:

/* Line 1464 of yacc.c  */
#line 1994 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 592:

/* Line 1464 of yacc.c  */
#line 1995 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 593:

/* Line 1464 of yacc.c  */
#line 1996 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 594:

/* Line 1464 of yacc.c  */
#line 1998 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 595:

/* Line 1464 of yacc.c  */
#line 1999 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 596:

/* Line 1464 of yacc.c  */
#line 2000 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 597:

/* Line 1464 of yacc.c  */
#line 2001 "grammar.y"
    { (yyval.exp) = MkExpCondition((yyvsp[(1) - (5)].exp), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 598:

/* Line 1464 of yacc.c  */
#line 2004 "grammar.y"
    { 
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy()); 
         (yyval.exp).loc = (yyloc); 
         ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]); 
         (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]); 
      ;}
    break;

  case 599:

/* Line 1464 of yacc.c  */
#line 2011 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (3)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (3)]); (yyval.exp).cond.elseExp.loc = (yylsp[(3) - (3)]);
      ;}
    break;

  case 600:

/* Line 1464 of yacc.c  */
#line 2015 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 601:

/* Line 1464 of yacc.c  */
#line 2019 "grammar.y"
    {
         (yyval.exp) = MkExpCondition((yyvsp[(1) - (2)].exp), MkListOne(MkExpDummy()), MkExpDummy()); (yyval.exp).loc = (yyloc); ((Expression)(yyval.exp).cond.exp->last).loc = (yylsp[(2) - (2)]); (yyval.exp).cond.elseExp.loc = (yylsp[(2) - (2)]);
      ;}
    break;

  case 603:

/* Line 1464 of yacc.c  */
#line 2026 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 604:

/* Line 1464 of yacc.c  */
#line 2030 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 605:

/* Line 1464 of yacc.c  */
#line 2035 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 606:

/* Line 1464 of yacc.c  */
#line 2036 "grammar.y"
    { (yyval.exp) = MkExpOp((yyvsp[(1) - (3)].exp), (yyvsp[(2) - (3)].i), (yyvsp[(3) - (3)].exp)); (yyval.exp).loc = (yyloc); ;}
    break;

  case 607:

/* Line 1464 of yacc.c  */
#line 2040 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 608:

/* Line 1464 of yacc.c  */
#line 2041 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 609:

/* Line 1464 of yacc.c  */
#line 2042 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 610:

/* Line 1464 of yacc.c  */
#line 2043 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 611:

/* Line 1464 of yacc.c  */
#line 2049 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 612:

/* Line 1464 of yacc.c  */
#line 2050 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 613:

/* Line 1464 of yacc.c  */
#line 2051 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); FreeList((yyvsp[(2) - (2)].list), FreeExpression); ;}
    break;

  case 614:

/* Line 1464 of yacc.c  */
#line 2055 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].exp)); ;}
    break;

  case 615:

/* Line 1464 of yacc.c  */
#line 2056 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].exp)); ;}
    break;

  case 616:

/* Line 1464 of yacc.c  */
#line 2057 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 617:

/* Line 1464 of yacc.c  */
#line 2058 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 620:

/* Line 1464 of yacc.c  */
#line 2068 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); ;}
    break;

  case 621:

/* Line 1464 of yacc.c  */
#line 2069 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 622:

/* Line 1464 of yacc.c  */
#line 2070 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); ;}
    break;

  case 623:

/* Line 1464 of yacc.c  */
#line 2071 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 624:

/* Line 1464 of yacc.c  */
#line 2072 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 625:

/* Line 1464 of yacc.c  */
#line 2076 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPEDEF); declMode = defaultAccess; ;}
    break;

  case 626:

/* Line 1464 of yacc.c  */
#line 2077 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTERN); ;}
    break;

  case 627:

/* Line 1464 of yacc.c  */
#line 2078 "grammar.y"
    { (yyval.specifier) = MkSpecifier(STATIC); declMode = staticAccess; ;}
    break;

  case 628:

/* Line 1464 of yacc.c  */
#line 2079 "grammar.y"
    { (yyval.specifier) = MkSpecifier(AUTO); ;}
    break;

  case 629:

/* Line 1464 of yacc.c  */
#line 2080 "grammar.y"
    { (yyval.specifier) = MkSpecifier(REGISTER); ;}
    break;

  case 630:

/* Line 1464 of yacc.c  */
#line 2084 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (1)].id), null); ;}
    break;

  case 631:

/* Line 1464 of yacc.c  */
#line 2085 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 632:

/* Line 1464 of yacc.c  */
#line 2086 "grammar.y"
    { (yyval.enumerator) = MkEnumerator((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].exp)); ;}
    break;

  case 633:

/* Line 1464 of yacc.c  */
#line 2090 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].enumerator)); ;}
    break;

  case 634:

/* Line 1464 of yacc.c  */
#line 2091 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].enumerator)); ;}
    break;

  case 636:

/* Line 1464 of yacc.c  */
#line 2096 "grammar.y"
    { memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 637:

/* Line 1464 of yacc.c  */
#line 2100 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (2)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 638:

/* Line 1464 of yacc.c  */
#line 2101 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (2)].specifier).name), null); POP_DEFAULT_ACCESS ;}
    break;

  case 639:

/* Line 1464 of yacc.c  */
#line 2105 "grammar.y"
    { (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS (yyval.specifier) = (yyvsp[(1) - (2)].specifier); ;}
    break;

  case 640:

/* Line 1464 of yacc.c  */
#line 2106 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 641:

/* Line 1464 of yacc.c  */
#line 2107 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); FreeSpecifier((yyvsp[(2) - (4)].specifier)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 642:

/* Line 1464 of yacc.c  */
#line 2111 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 643:

/* Line 1464 of yacc.c  */
#line 2112 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 644:

/* Line 1464 of yacc.c  */
#line 2114 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 645:

/* Line 1464 of yacc.c  */
#line 2115 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].list));  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 646:

/* Line 1464 of yacc.c  */
#line 2116 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (4)].id), null);  (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 647:

/* Line 1464 of yacc.c  */
#line 2117 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 648:

/* Line 1464 of yacc.c  */
#line 2118 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(2) - (6)].id), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list);  POP_DEFAULT_ACCESS ;}
    break;

  case 649:

/* Line 1464 of yacc.c  */
#line 2120 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), (yyvsp[(4) - (4)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 650:

/* Line 1464 of yacc.c  */
#line 2121 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (5)].specifier).name), (yyvsp[(4) - (5)].list)); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (5)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 651:

/* Line 1464 of yacc.c  */
#line 2122 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (4)].specifier).name), null); (yyval.specifier).loc = (yyloc); FreeSpecifier((yyvsp[(2) - (4)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 652:

/* Line 1464 of yacc.c  */
#line 2123 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 653:

/* Line 1464 of yacc.c  */
#line 2124 "grammar.y"
    { (yyval.specifier) = MkEnum(MkIdentifier((yyvsp[(2) - (6)].specifier).name), (yyvsp[(4) - (6)].list)); (yyval.specifier).loc = (yyloc); (yyval.specifier).definitions = (yyvsp[(6) - (6)].list); FreeSpecifier((yyvsp[(2) - (6)].specifier)); POP_DEFAULT_ACCESS ;}
    break;

  case 654:

/* Line 1464 of yacc.c  */
#line 2128 "grammar.y"
    { (yyval.id) = (yyvsp[(2) - (2)].id); if(declMode) DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(2) - (2)].id).string); ;}
    break;

  case 655:

/* Line 1464 of yacc.c  */
#line 2129 "grammar.y"
    { (yyval.id) = MkIdentifier((yyvsp[(2) - (2)].specifier).name); if(declMode) DeclClass(globalContext.nextID++, (yyvsp[(2) - (2)].specifier).name); FreeSpecifier((yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 656:

/* Line 1464 of yacc.c  */
#line 2133 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 657:

/* Line 1464 of yacc.c  */
#line 2134 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 658:

/* Line 1464 of yacc.c  */
#line 2135 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); POP_DEFAULT_ACCESS ;}
    break;

  case 659:

/* Line 1464 of yacc.c  */
#line 2139 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(5) - (5)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 660:

/* Line 1464 of yacc.c  */
#line 2140 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (6)].id), (yyvsp[(5) - (6)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (6)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 661:

/* Line 1464 of yacc.c  */
#line 2141 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 662:

/* Line 1464 of yacc.c  */
#line 2142 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 663:

/* Line 1464 of yacc.c  */
#line 2143 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), (yyvsp[(5) - (7)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 664:

/* Line 1464 of yacc.c  */
#line 2144 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 665:

/* Line 1464 of yacc.c  */
#line 2145 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (8)].id), (yyvsp[(5) - (8)].list)); (yyval.specifier).baseSpecs = (yyvsp[(3) - (8)].list); (yyval.specifier).definitions = (yyvsp[(8) - (8)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 666:

/* Line 1464 of yacc.c  */
#line 2146 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 667:

/* Line 1464 of yacc.c  */
#line 2147 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (7)].id), null); (yyval.specifier).baseSpecs = (yyvsp[(3) - (7)].list); (yyval.specifier).definitions = (yyvsp[(7) - (7)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 668:

/* Line 1464 of yacc.c  */
#line 2149 "grammar.y"
    { (yyval.specifier) = MkEnum(null, (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 669:

/* Line 1464 of yacc.c  */
#line 2150 "grammar.y"
    { (yyval.specifier) = MkEnum(null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 670:

/* Line 1464 of yacc.c  */
#line 2152 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 671:

/* Line 1464 of yacc.c  */
#line 2153 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (4)].id), (yyvsp[(3) - (4)].list)); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 672:

/* Line 1464 of yacc.c  */
#line 2154 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (3)].id), null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 673:

/* Line 1464 of yacc.c  */
#line 2155 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 674:

/* Line 1464 of yacc.c  */
#line 2156 "grammar.y"
    { (yyval.specifier) = MkEnum((yyvsp[(1) - (5)].id), (yyvsp[(3) - (5)].list)); (yyval.specifier).definitions = (yyvsp[(5) - (5)].list); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 679:

/* Line 1464 of yacc.c  */
#line 2170 "grammar.y"
    { (yyval.specifier) = MkSpecifierExtended(MkExtDeclString(CopyString(yytext))); ;}
    break;

  case 680:

/* Line 1464 of yacc.c  */
#line 2171 "grammar.y"
    { (yyval.specifier) = MkSpecifierExtended((yyvsp[(1) - (1)].extDecl)); ;}
    break;

  case 681:

/* Line 1464 of yacc.c  */
#line 2175 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CONST); ;}
    break;

  case 682:

/* Line 1464 of yacc.c  */
#line 2176 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOLATILE); ;}
    break;

  case 683:

/* Line 1464 of yacc.c  */
#line 2177 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); ;}
    break;

  case 684:

/* Line 1464 of yacc.c  */
#line 2182 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 685:

/* Line 1464 of yacc.c  */
#line 2183 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier));  ;}
    break;

  case 686:

/* Line 1464 of yacc.c  */
#line 2187 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 687:

/* Line 1464 of yacc.c  */
#line 2188 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 688:

/* Line 1464 of yacc.c  */
#line 2189 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 689:

/* Line 1464 of yacc.c  */
#line 2190 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 690:

/* Line 1464 of yacc.c  */
#line 2191 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 691:

/* Line 1464 of yacc.c  */
#line 2192 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 692:

/* Line 1464 of yacc.c  */
#line 2193 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 693:

/* Line 1464 of yacc.c  */
#line 2194 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 694:

/* Line 1464 of yacc.c  */
#line 2195 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 695:

/* Line 1464 of yacc.c  */
#line 2196 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 696:

/* Line 1464 of yacc.c  */
#line 2197 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 697:

/* Line 1464 of yacc.c  */
#line 2198 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 698:

/* Line 1464 of yacc.c  */
#line 2199 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 702:

/* Line 1464 of yacc.c  */
#line 2203 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 703:

/* Line 1464 of yacc.c  */
#line 2204 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 704:

/* Line 1464 of yacc.c  */
#line 2205 "grammar.y"
    { _DeclClass(0, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 705:

/* Line 1464 of yacc.c  */
#line 2206 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 706:

/* Line 1464 of yacc.c  */
#line 2207 "grammar.y"
    { (yyval.specifier) = MkSpecifier(TYPED_OBJECT); ;}
    break;

  case 707:

/* Line 1464 of yacc.c  */
#line 2208 "grammar.y"
    { (yyval.specifier) = MkSpecifier(ANY_OBJECT); ;}
    break;

  case 708:

/* Line 1464 of yacc.c  */
#line 2212 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VOID); ;}
    break;

  case 709:

/* Line 1464 of yacc.c  */
#line 2213 "grammar.y"
    { (yyval.specifier) = MkSpecifier(CHAR); ;}
    break;

  case 710:

/* Line 1464 of yacc.c  */
#line 2214 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SHORT); ;}
    break;

  case 711:

/* Line 1464 of yacc.c  */
#line 2215 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT); ;}
    break;

  case 712:

/* Line 1464 of yacc.c  */
#line 2216 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UINT); ;}
    break;

  case 713:

/* Line 1464 of yacc.c  */
#line 2217 "grammar.y"
    { (yyval.specifier) = MkSpecifier(INT64); ;}
    break;

  case 714:

/* Line 1464 of yacc.c  */
#line 2218 "grammar.y"
    { (yyval.specifier) = MkSpecifier(VALIST); ;}
    break;

  case 715:

/* Line 1464 of yacc.c  */
#line 2219 "grammar.y"
    { (yyval.specifier) = MkSpecifier(LONG); ;}
    break;

  case 716:

/* Line 1464 of yacc.c  */
#line 2220 "grammar.y"
    { (yyval.specifier) = MkSpecifier(FLOAT); ;}
    break;

  case 717:

/* Line 1464 of yacc.c  */
#line 2221 "grammar.y"
    { (yyval.specifier) = MkSpecifier(DOUBLE); ;}
    break;

  case 718:

/* Line 1464 of yacc.c  */
#line 2222 "grammar.y"
    { (yyval.specifier) = MkSpecifier(SIGNED); ;}
    break;

  case 719:

/* Line 1464 of yacc.c  */
#line 2223 "grammar.y"
    { (yyval.specifier) = MkSpecifier(UNSIGNED); ;}
    break;

  case 720:

/* Line 1464 of yacc.c  */
#line 2224 "grammar.y"
    { (yyval.specifier) = MkSpecifier(EXTENSION); ;}
    break;

  case 724:

/* Line 1464 of yacc.c  */
#line 2228 "grammar.y"
    { (yyval.specifier) = MkSpecifierTypeOf((yyvsp[(3) - (4)].exp)); ;}
    break;

  case 725:

/* Line 1464 of yacc.c  */
#line 2229 "grammar.y"
    { (yyval.specifier) = MkSpecifierSubClass((yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 726:

/* Line 1464 of yacc.c  */
#line 2230 "grammar.y"
    { _DeclClass(0, (yyvsp[(3) - (4)].id).string); (yyval.specifier) = MkSpecifierSubClass(MkSpecifierName((yyvsp[(3) - (4)].id).string)); FreeIdentifier((yyvsp[(3) - (4)].id)); ;}
    break;

  case 727:

/* Line 1464 of yacc.c  */
#line 2231 "grammar.y"
    { (yyval.specifier) = MkSpecifier(THISCLASS); ;}
    break;

  case 728:

/* Line 1464 of yacc.c  */
#line 2238 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 729:

/* Line 1464 of yacc.c  */
#line 2240 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.declarator).structDecl.attrib = (yyvsp[(2) - (2)].attrib); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 730:

/* Line 1464 of yacc.c  */
#line 2242 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 731:

/* Line 1464 of yacc.c  */
#line 2244 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 732:

/* Line 1464 of yacc.c  */
#line 2246 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 733:

/* Line 1464 of yacc.c  */
#line 2248 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator(null, (yyvsp[(2) - (2)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 734:

/* Line 1464 of yacc.c  */
#line 2250 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].exp));  (yyval.declarator).loc = (yyloc); ;}
    break;

  case 735:

/* Line 1464 of yacc.c  */
#line 2252 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 736:

/* Line 1464 of yacc.c  */
#line 2254 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 737:

/* Line 1464 of yacc.c  */
#line 2256 "grammar.y"
    { (yyval.declarator) = MkStructDeclarator((yyvsp[(1) - (5)].declarator), (yyvsp[(3) - (5)].exp)); (yyval.declarator).structDecl.posExp = (yyvsp[(5) - (5)].exp); (yyval.declarator).loc = (yyloc); ;}
    break;

  case 738:

/* Line 1464 of yacc.c  */
#line 2260 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declarator)); ;}
    break;

  case 739:

/* Line 1464 of yacc.c  */
#line 2261 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].declarator)); ;}
    break;

  case 740:

/* Line 1464 of yacc.c  */
#line 2266 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), (yyvsp[(2) - (2)].id), null);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 741:

/* Line 1464 of yacc.c  */
#line 2272 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (2)].specifierType), MkIdentifier((yyvsp[(2) - (2)].specifier).name), null);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(2) - (2)].specifier));
      ;}
    break;

  case 742:

/* Line 1464 of yacc.c  */
#line 2278 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), (yyvsp[(3) - (3)].id), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).addNameSpace = true;
         (yyval.specifier).ctx = PushContext();
      ;}
    break;

  case 743:

/* Line 1464 of yacc.c  */
#line 2285 "grammar.y"
    {
         (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), MkIdentifier((yyvsp[(3) - (3)].specifier).name), null);
         (yyval.specifier).extDeclStruct = (yyvsp[(2) - (3)].extDecl);
         (yyval.specifier).ctx = PushContext();
         FreeSpecifier((yyvsp[(3) - (3)].specifier));
      ;}
    break;

  case 744:

/* Line 1464 of yacc.c  */
#line 2294 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 745:

/* Line 1464 of yacc.c  */
#line 2295 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 746:

/* Line 1464 of yacc.c  */
#line 2296 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 747:

/* Line 1464 of yacc.c  */
#line 2297 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); (yyval.specifier).loc = (yyloc); POP_DEFAULT_ACCESS ;}
    break;

  case 748:

/* Line 1464 of yacc.c  */
#line 2301 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 749:

/* Line 1464 of yacc.c  */
#line 2302 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); AddStructDefinitions((yyvsp[(1) - (3)].specifier), (yyvsp[(3) - (3)].list));  POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 750:

/* Line 1464 of yacc.c  */
#line 2303 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 751:

/* Line 1464 of yacc.c  */
#line 2305 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 752:

/* Line 1464 of yacc.c  */
#line 2306 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 753:

/* Line 1464 of yacc.c  */
#line 2307 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 754:

/* Line 1464 of yacc.c  */
#line 2309 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 755:

/* Line 1464 of yacc.c  */
#line 2310 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, (yyvsp[(4) - (4)].list)); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 756:

/* Line 1464 of yacc.c  */
#line 2311 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (4)].specifierType), null, null); (yyval.specifier).extDeclStruct = (yyvsp[(2) - (4)].extDecl); POP_DEFAULT_ACCESS ;}
    break;

  case 757:

/* Line 1464 of yacc.c  */
#line 2315 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (1)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 758:

/* Line 1464 of yacc.c  */
#line 2320 "grammar.y"
    {
        (yyval.specifier) = (yyvsp[(1) - (1)].specifier);
        if(declMode)
        {
           ((yyvsp[(1) - (1)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)(globalContext.nextID++, (yyvsp[(1) - (1)].specifier).id.string);
        }
     ;}
    break;

  case 759:

/* Line 1464 of yacc.c  */
#line 2328 "grammar.y"
    {
      Symbol symbol = ((yyvsp[(1) - (4)].specifier).addNameSpace ? DeclClassAddNameSpace : DeclClass)(globalContext.nextID++, (yyvsp[(1) - (4)].specifier).id.string);
      (yyval.specifier) = (yyvsp[(1) - (4)].specifier);
      symbol.templateParams = (yyvsp[(3) - (4)].list);
   ;}
    break;

  case 760:

/* Line 1464 of yacc.c  */
#line 2337 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).baseSpecs = (yyvsp[(3) - (3)].list);
      SetupBaseSpecs(null, (yyvsp[(3) - (3)].list));
   ;}
    break;

  case 761:

/* Line 1464 of yacc.c  */
#line 2345 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (2)].specifier); (yyval.specifier).loc = (yyloc); ;}
    break;

  case 762:

/* Line 1464 of yacc.c  */
#line 2347 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 763:

/* Line 1464 of yacc.c  */
#line 2348 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 764:

/* Line 1464 of yacc.c  */
#line 2349 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 765:

/* Line 1464 of yacc.c  */
#line 2354 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 766:

/* Line 1464 of yacc.c  */
#line 2361 "grammar.y"
    {
      (yyval.specifier) = (yyvsp[(1) - (3)].specifier);
      (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
      POP_DEFAULT_ACCESS
      PopContext(curContext);
   ;}
    break;

  case 767:

/* Line 1464 of yacc.c  */
#line 2368 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext);;}
    break;

  case 768:

/* Line 1464 of yacc.c  */
#line 2371 "grammar.y"
    {
        PopContext(curContext);
        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 769:

/* Line 1464 of yacc.c  */
#line 2384 "grammar.y"
    {
        PopContext(curContext);

        if(!declMode)
        {
           (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifier).type, (yyvsp[(1) - (3)].specifier).id, (yyvsp[(3) - (3)].list));
           (yyvsp[(1) - (3)].specifier).id = null;
           FreeSpecifier((yyvsp[(1) - (3)].specifier));
        }
        else
           (yyval.specifier).definitions = (yyvsp[(3) - (3)].list);
        POP_DEFAULT_ACCESS
     ;}
    break;

  case 770:

/* Line 1464 of yacc.c  */
#line 2398 "grammar.y"
    { (yyval.specifier) = (yyvsp[(1) - (3)].specifier); POP_DEFAULT_ACCESS PopContext(curContext); ;}
    break;

  case 771:

/* Line 1464 of yacc.c  */
#line 2401 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS  ;}
    break;

  case 772:

/* Line 1464 of yacc.c  */
#line 2403 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, (yyvsp[(3) - (3)].list)); POP_DEFAULT_ACCESS ;}
    break;

  case 773:

/* Line 1464 of yacc.c  */
#line 2405 "grammar.y"
    { (yyval.specifier) = MkStructOrUnion((yyvsp[(1) - (3)].specifierType), null, null); POP_DEFAULT_ACCESS ;}
    break;

  case 774:

/* Line 1464 of yacc.c  */
#line 2409 "grammar.y"
    { (yyval.specifierType) = structSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 775:

/* Line 1464 of yacc.c  */
#line 2410 "grammar.y"
    { (yyval.specifierType) = unionSpecifier; memberAccessStack[++defaultMemberAccess] = publicAccess; ;}
    break;

  case 776:

/* Line 1464 of yacc.c  */
#line 2414 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 777:

/* Line 1464 of yacc.c  */
#line 2415 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 778:

/* Line 1464 of yacc.c  */
#line 2416 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 779:

/* Line 1464 of yacc.c  */
#line 2417 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 780:

/* Line 1464 of yacc.c  */
#line 2418 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 781:

/* Line 1464 of yacc.c  */
#line 2419 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 782:

/* Line 1464 of yacc.c  */
#line 2420 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 783:

/* Line 1464 of yacc.c  */
#line 2421 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 784:

/* Line 1464 of yacc.c  */
#line 2425 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 785:

/* Line 1464 of yacc.c  */
#line 2426 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 786:

/* Line 1464 of yacc.c  */
#line 2427 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 787:

/* Line 1464 of yacc.c  */
#line 2428 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 788:

/* Line 1464 of yacc.c  */
#line 2429 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 789:

/* Line 1464 of yacc.c  */
#line 2430 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 790:

/* Line 1464 of yacc.c  */
#line 2431 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 791:

/* Line 1464 of yacc.c  */
#line 2432 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 792:

/* Line 1464 of yacc.c  */
#line 2433 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 793:

/* Line 1464 of yacc.c  */
#line 2434 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 794:

/* Line 1464 of yacc.c  */
#line 2438 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 795:

/* Line 1464 of yacc.c  */
#line 2439 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 796:

/* Line 1464 of yacc.c  */
#line 2440 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 797:

/* Line 1464 of yacc.c  */
#line 2441 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 798:

/* Line 1464 of yacc.c  */
#line 2442 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 799:

/* Line 1464 of yacc.c  */
#line 2443 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 800:

/* Line 1464 of yacc.c  */
#line 2444 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 801:

/* Line 1464 of yacc.c  */
#line 2445 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 802:

/* Line 1464 of yacc.c  */
#line 2446 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 803:

/* Line 1464 of yacc.c  */
#line 2447 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 804:

/* Line 1464 of yacc.c  */
#line 2451 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 805:

/* Line 1464 of yacc.c  */
#line 2452 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 806:

/* Line 1464 of yacc.c  */
#line 2453 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 807:

/* Line 1464 of yacc.c  */
#line 2454 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 808:

/* Line 1464 of yacc.c  */
#line 2455 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 809:

/* Line 1464 of yacc.c  */
#line 2456 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 810:

/* Line 1464 of yacc.c  */
#line 2457 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 811:

/* Line 1464 of yacc.c  */
#line 2458 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 812:

/* Line 1464 of yacc.c  */
#line 2459 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 813:

/* Line 1464 of yacc.c  */
#line 2460 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 814:

/* Line 1464 of yacc.c  */
#line 2461 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 815:

/* Line 1464 of yacc.c  */
#line 2462 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 816:

/* Line 1464 of yacc.c  */
#line 2466 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 817:

/* Line 1464 of yacc.c  */
#line 2467 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 818:

/* Line 1464 of yacc.c  */
#line 2468 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 819:

/* Line 1464 of yacc.c  */
#line 2469 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 820:

/* Line 1464 of yacc.c  */
#line 2470 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 821:

/* Line 1464 of yacc.c  */
#line 2471 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 822:

/* Line 1464 of yacc.c  */
#line 2472 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 823:

/* Line 1464 of yacc.c  */
#line 2473 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 824:

/* Line 1464 of yacc.c  */
#line 2474 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 825:

/* Line 1464 of yacc.c  */
#line 2475 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 826:

/* Line 1464 of yacc.c  */
#line 2479 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 827:

/* Line 1464 of yacc.c  */
#line 2480 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 828:

/* Line 1464 of yacc.c  */
#line 2484 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PRIVATE)); ;}
    break;

  case 829:

/* Line 1464 of yacc.c  */
#line 2485 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifier(PUBLIC)); ;}
    break;

  case 830:

/* Line 1464 of yacc.c  */
#line 2486 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 831:

/* Line 1464 of yacc.c  */
#line 2487 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 832:

/* Line 1464 of yacc.c  */
#line 2488 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 833:

/* Line 1464 of yacc.c  */
#line 2489 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 834:

/* Line 1464 of yacc.c  */
#line 2490 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 835:

/* Line 1464 of yacc.c  */
#line 2491 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 836:

/* Line 1464 of yacc.c  */
#line 2493 "grammar.y"
    { _DeclClass(0, (yyvsp[(1) - (1)].id).string); (yyval.list) = MkListOne(MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 837:

/* Line 1464 of yacc.c  */
#line 2494 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); _DeclClass(0, (yyvsp[(2) - (2)].id).string); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id)); ;}
    break;

  case 838:

/* Line 1464 of yacc.c  */
#line 2497 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 839:

/* Line 1464 of yacc.c  */
#line 2515 "grammar.y"
    {
         (yyval.list) = (yyvsp[(1) - (5)].list);
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 841:

/* Line 1464 of yacc.c  */
#line 2533 "grammar.y"
    { (yyval.list) = MkListOne(MkStructOrUnion((yyvsp[(1) - (1)].specifierType), null, null)); POP_DEFAULT_ACCESS ;}
    break;

  case 842:

/* Line 1464 of yacc.c  */
#line 2537 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 843:

/* Line 1464 of yacc.c  */
#line 2538 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 844:

/* Line 1464 of yacc.c  */
#line 2539 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 845:

/* Line 1464 of yacc.c  */
#line 2540 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 846:

/* Line 1464 of yacc.c  */
#line 2541 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 847:

/* Line 1464 of yacc.c  */
#line 2542 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 848:

/* Line 1464 of yacc.c  */
#line 2543 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 849:

/* Line 1464 of yacc.c  */
#line 2544 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 850:

/* Line 1464 of yacc.c  */
#line 2546 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 851:

/* Line 1464 of yacc.c  */
#line 2564 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 852:

/* Line 1464 of yacc.c  */
#line 2580 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 853:

/* Line 1464 of yacc.c  */
#line 2581 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 854:

/* Line 1464 of yacc.c  */
#line 2582 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 855:

/* Line 1464 of yacc.c  */
#line 2583 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 856:

/* Line 1464 of yacc.c  */
#line 2584 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 857:

/* Line 1464 of yacc.c  */
#line 2585 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 858:

/* Line 1464 of yacc.c  */
#line 2586 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 859:

/* Line 1464 of yacc.c  */
#line 2587 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 860:

/* Line 1464 of yacc.c  */
#line 2588 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 861:

/* Line 1464 of yacc.c  */
#line 2589 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 862:

/* Line 1464 of yacc.c  */
#line 2590 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 863:

/* Line 1464 of yacc.c  */
#line 2591 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 864:

/* Line 1464 of yacc.c  */
#line 2593 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 865:

/* Line 1464 of yacc.c  */
#line 2611 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 866:

/* Line 1464 of yacc.c  */
#line 2627 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 867:

/* Line 1464 of yacc.c  */
#line 2628 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 868:

/* Line 1464 of yacc.c  */
#line 2629 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 869:

/* Line 1464 of yacc.c  */
#line 2630 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 870:

/* Line 1464 of yacc.c  */
#line 2631 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 871:

/* Line 1464 of yacc.c  */
#line 2632 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 872:

/* Line 1464 of yacc.c  */
#line 2633 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 873:

/* Line 1464 of yacc.c  */
#line 2634 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 874:

/* Line 1464 of yacc.c  */
#line 2635 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].specifier)); ;}
    break;

  case 875:

/* Line 1464 of yacc.c  */
#line 2636 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].specifier)); ;}
    break;

  case 876:

/* Line 1464 of yacc.c  */
#line 2637 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkSpecifierName((yyvsp[(1) - (1)].id).string)); FreeIdentifier((yyvsp[(1) - (1)].id));}
    break;

  case 877:

/* Line 1464 of yacc.c  */
#line 2638 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), MkSpecifierName((yyvsp[(2) - (2)].id).string)); FreeIdentifier((yyvsp[(2) - (2)].id));}
    break;

  case 878:

/* Line 1464 of yacc.c  */
#line 2640 "grammar.y"
    {
         // if($1._class && !$1._class.name)
         if((yyvsp[(1) - (4)].id)._class)
         {
            char name[1024];
            strcpy(name,  (yyvsp[(1) - (4)].id)._class.name ? (yyvsp[(1) - (4)].id)._class.name : "");
            strcat(name, "::");
            strcat(name, (yyvsp[(1) - (4)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(1) - (4)].id).string);

         (yyval.list) = MkList();
         ListAdd((yyval.list), MkSpecifierNameArgs((yyvsp[(1) - (4)].id).string, (yyvsp[(3) - (4)].list)));
         FreeIdentifier((yyvsp[(1) - (4)].id));
      ;}
    break;

  case 879:

/* Line 1464 of yacc.c  */
#line 2658 "grammar.y"
    {
         if((yyvsp[(2) - (5)].id)._class && !(yyvsp[(2) - (5)].id)._class.name)
         {
            char name[1024];
            strcpy(name, "::");
            strcat(name, (yyvsp[(2) - (5)].id).string);
            _DeclClass(0, name);
         }
         else
            _DeclClass(0, (yyvsp[(2) - (5)].id).string);
         ListAdd((yyvsp[(1) - (5)].list), MkSpecifierNameArgs((yyvsp[(2) - (5)].id).string, (yyvsp[(4) - (5)].list)));
         FreeIdentifier((yyvsp[(2) - (5)].id));
      ;}
    break;

  case 880:

/* Line 1464 of yacc.c  */
#line 2674 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 881:

/* Line 1464 of yacc.c  */
#line 2675 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 882:

/* Line 1464 of yacc.c  */
#line 2679 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)))); ;}
    break;

  case 883:

/* Line 1464 of yacc.c  */
#line 2680 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 884:

/* Line 1464 of yacc.c  */
#line 2681 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 885:

/* Line 1464 of yacc.c  */
#line 2682 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 886:

/* Line 1464 of yacc.c  */
#line 2683 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, MkDeclaratorIdentifier((yyvsp[(3) - (3)].id)))); ;}
    break;

  case 888:

/* Line 1464 of yacc.c  */
#line 2698 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (1)].specifier).name, "::", strlen((yyvsp[(1) - (1)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (1)].specifier).name;
      FreeSpecifier((yyvsp[(1) - (1)].specifier));
      (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier(s));
   ;}
    break;

  case 889:

/* Line 1464 of yacc.c  */
#line 2704 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier(MkIdentifier("uint")); ;}
    break;

  case 890:

/* Line 1464 of yacc.c  */
#line 2706 "grammar.y"
    {
         Declarator decl;
         char * colon = RSearchString((yyvsp[(1) - (4)].specifier).name, "::", strlen((yyvsp[(1) - (4)].specifier).name), true, false);
         String s = colon ? colon + 2 : (yyvsp[(1) - (4)].specifier).name;
         decl = MkDeclaratorIdentifier(MkIdentifier(s));
         FreeSpecifier((yyvsp[(1) - (4)].specifier));
         (yyval.declarator) = MkDeclaratorArray(decl, (yyvsp[(3) - (4)].exp));
      ;}
    break;

  case 891:

/* Line 1464 of yacc.c  */
#line 2714 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].specifier), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 892:

/* Line 1464 of yacc.c  */
#line 2715 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].specifier), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 893:

/* Line 1464 of yacc.c  */
#line 2716 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].specifier), null); ;}
    break;

  case 894:

/* Line 1464 of yacc.c  */
#line 2718 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 895:

/* Line 1464 of yacc.c  */
#line 2719 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 896:

/* Line 1464 of yacc.c  */
#line 2720 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 897:

/* Line 1464 of yacc.c  */
#line 2721 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 898:

/* Line 1464 of yacc.c  */
#line 2725 "grammar.y"
    { (yyval.declarator) = MkDeclaratorIdentifier((yyvsp[(1) - (1)].id)); ;}
    break;

  case 899:

/* Line 1464 of yacc.c  */
#line 2726 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 900:

/* Line 1464 of yacc.c  */
#line 2727 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 901:

/* Line 1464 of yacc.c  */
#line 2728 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 902:

/* Line 1464 of yacc.c  */
#line 2729 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 903:

/* Line 1464 of yacc.c  */
#line 2730 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 904:

/* Line 1464 of yacc.c  */
#line 2731 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 905:

/* Line 1464 of yacc.c  */
#line 2732 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 906:

/* Line 1464 of yacc.c  */
#line 2733 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 908:

/* Line 1464 of yacc.c  */
#line 2741 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 909:

/* Line 1464 of yacc.c  */
#line 2742 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 910:

/* Line 1464 of yacc.c  */
#line 2743 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 911:

/* Line 1464 of yacc.c  */
#line 2744 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 912:

/* Line 1464 of yacc.c  */
#line 2745 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 913:

/* Line 1464 of yacc.c  */
#line 2751 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list)); 
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 914:

/* Line 1464 of yacc.c  */
#line 2760 "grammar.y"
    { 
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); 
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 915:

/* Line 1464 of yacc.c  */
#line 2769 "grammar.y"
    { 
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); 
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 916:

/* Line 1464 of yacc.c  */
#line 2778 "grammar.y"
    { 
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null); 
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 920:

/* Line 1464 of yacc.c  */
#line 2807 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 921:

/* Line 1464 of yacc.c  */
#line 2808 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 922:

/* Line 1464 of yacc.c  */
#line 2809 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 923:

/* Line 1464 of yacc.c  */
#line 2810 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ;}
    break;

  case 924:

/* Line 1464 of yacc.c  */
#line 2811 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); ;}
    break;

  case 925:

/* Line 1464 of yacc.c  */
#line 2817 "grammar.y"
    {
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), (yyvsp[(2) - (2)].list)); 
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 926:

/* Line 1464 of yacc.c  */
#line 2826 "grammar.y"
    { 
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (2)].declarator), null); 
         fileInput.Seek((yylsp[(1) - (2)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (2)]).end);
         (yyloc).start = (yylsp[(1) - (2)]).start;
         (yyloc).end = (yylsp[(1) - (2)]).end;
      ;}
    break;

  case 927:

/* Line 1464 of yacc.c  */
#line 2835 "grammar.y"
    { 
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); 
         fileInput.Seek((yylsp[(1) - (3)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (3)]).end);
         (yyloc).start = (yylsp[(1) - (3)]).start;
         (yyloc).end = (yylsp[(1) - (3)]).end;
      ;}
    break;

  case 928:

/* Line 1464 of yacc.c  */
#line 2844 "grammar.y"
    { 
         (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), null); 
         fileInput.Seek((yylsp[(1) - (4)]).end.pos, start); 
         yyclearin;
         resetScannerPos(&(yylsp[(1) - (4)]).end);
         (yyloc).start = (yylsp[(1) - (4)]).start;
         (yyloc).end = (yylsp[(1) - (4)]).end;
         FreeList((yyvsp[(2) - (4)].list), FreeSpecifier);
         FreeIdentifier((yyvsp[(3) - (4)].id));
      ;}
    break;

  case 931:

/* Line 1464 of yacc.c  */
#line 2907 "grammar.y"
    { (yyval.extDecl) = MkExtDeclString(CopyString(yytext)); ;}
    break;

  case 932:

/* Line 1464 of yacc.c  */
#line 2908 "grammar.y"
    { (yyval.extDecl) = MkExtDeclAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 933:

/* Line 1464 of yacc.c  */
#line 2910 "grammar.y"
    {
         char temp[1024];
         strcpy(temp, "__asm__(");
         strcat(temp, (yyvsp[(3) - (4)].string));
         strcat(temp, ")");
         (yyval.extDecl) = MkExtDeclString(CopyString(temp));
         delete (yyvsp[(3) - (4)].string);
      ;}
    break;

  case 934:

/* Line 1464 of yacc.c  */
#line 2921 "grammar.y"
    { (yyval.i) = ATTRIB; ;}
    break;

  case 935:

/* Line 1464 of yacc.c  */
#line 2922 "grammar.y"
    { (yyval.i) = ATTRIB_DEP; ;}
    break;

  case 936:

/* Line 1464 of yacc.c  */
#line 2923 "grammar.y"
    { (yyval.i) = __ATTRIB; ;}
    break;

  case 937:

/* Line 1464 of yacc.c  */
#line 2928 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 938:

/* Line 1464 of yacc.c  */
#line 2929 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 939:

/* Line 1464 of yacc.c  */
#line 2930 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 940:

/* Line 1464 of yacc.c  */
#line 2931 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 941:

/* Line 1464 of yacc.c  */
#line 2932 "grammar.y"
    { (yyval.string)  = CopyString(yytext); ;}
    break;

  case 942:

/* Line 1464 of yacc.c  */
#line 2936 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (1)].string), null); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 943:

/* Line 1464 of yacc.c  */
#line 2937 "grammar.y"
    { (yyval.attribute) = MkAttribute((yyvsp[(1) - (4)].string), MkExpBrackets((yyvsp[(3) - (4)].list))); (yyval.attribute).loc = (yyloc); ;}
    break;

  case 944:

/* Line 1464 of yacc.c  */
#line 2941 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].attribute)); ;}
    break;

  case 945:

/* Line 1464 of yacc.c  */
#line 2942 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].attribute)); (yyval.list) = (yyvsp[(1) - (2)].list); ;}
    break;

  case 946:

/* Line 1464 of yacc.c  */
#line 2943 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].attribute)); (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 947:

/* Line 1464 of yacc.c  */
#line 2947 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (6)].i), (yyvsp[(4) - (6)].list)); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 948:

/* Line 1464 of yacc.c  */
#line 2948 "grammar.y"
    { (yyval.attrib) = MkAttrib((yyvsp[(1) - (5)].i), null); (yyval.attrib).loc = (yyloc); ;}
    break;

  case 949:

/* Line 1464 of yacc.c  */
#line 2952 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 950:

/* Line 1464 of yacc.c  */
#line 2953 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 951:

/* Line 1464 of yacc.c  */
#line 2954 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, null); ;}
    break;

  case 952:

/* Line 1464 of yacc.c  */
#line 2955 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 953:

/* Line 1464 of yacc.c  */
#line 2956 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray(null, (yyvsp[(2) - (3)].exp)); ;}
    break;

  case 954:

/* Line 1464 of yacc.c  */
#line 2957 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray(null, (yyvsp[(2) - (3)].specifier)); ;}
    break;

  case 955:

/* Line 1464 of yacc.c  */
#line 2958 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 956:

/* Line 1464 of yacc.c  */
#line 2959 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 957:

/* Line 1464 of yacc.c  */
#line 2960 "grammar.y"
    { (yyval.declarator) = MkDeclaratorEnumArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].specifier)); ;}
    break;

  case 958:

/* Line 1464 of yacc.c  */
#line 2961 "grammar.y"
    { (yyval.declarator) = MkDeclaratorArray((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].exp)); ;}
    break;

  case 959:

/* Line 1464 of yacc.c  */
#line 2962 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 960:

/* Line 1464 of yacc.c  */
#line 2963 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 961:

/* Line 1464 of yacc.c  */
#line 2964 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 962:

/* Line 1464 of yacc.c  */
#line 2965 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 963:

/* Line 1464 of yacc.c  */
#line 2966 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 964:

/* Line 1464 of yacc.c  */
#line 2967 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 965:

/* Line 1464 of yacc.c  */
#line 2971 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets((yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 966:

/* Line 1464 of yacc.c  */
#line 2972 "grammar.y"
    { (yyval.declarator) = MkDeclaratorBrackets(MkDeclaratorExtended((yyvsp[(2) - (4)].extDecl), (yyvsp[(3) - (4)].declarator))); ;}
    break;

  case 967:

/* Line 1464 of yacc.c  */
#line 2973 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, null); ;}
    break;

  case 968:

/* Line 1464 of yacc.c  */
#line 2974 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 969:

/* Line 1464 of yacc.c  */
#line 2975 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction(null, (yyvsp[(2) - (3)].list)); ;}
    break;

  case 970:

/* Line 1464 of yacc.c  */
#line 2976 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (3)].declarator), null); ;}
    break;

  case 971:

/* Line 1464 of yacc.c  */
#line 2977 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 972:

/* Line 1464 of yacc.c  */
#line 2978 "grammar.y"
    { (yyval.declarator) = MkDeclaratorFunction((yyvsp[(1) - (4)].declarator), (yyvsp[(3) - (4)].list)); ;}
    break;

  case 973:

/* Line 1464 of yacc.c  */
#line 2982 "grammar.y"
    { (yyval.pointer) = MkPointer(null, null); ;}
    break;

  case 974:

/* Line 1464 of yacc.c  */
#line 2983 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (2)].list), null); ;}
    break;

  case 975:

/* Line 1464 of yacc.c  */
#line 2984 "grammar.y"
    { (yyval.pointer) = MkPointer(null, (yyvsp[(2) - (2)].pointer)); ;}
    break;

  case 976:

/* Line 1464 of yacc.c  */
#line 2985 "grammar.y"
    { (yyval.pointer) = MkPointer((yyvsp[(2) - (3)].list), (yyvsp[(3) - (3)].pointer)); ;}
    break;

  case 977:

/* Line 1464 of yacc.c  */
#line 2989 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 979:

/* Line 1464 of yacc.c  */
#line 2991 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 980:

/* Line 1464 of yacc.c  */
#line 2992 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 981:

/* Line 1464 of yacc.c  */
#line 2994 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 982:

/* Line 1464 of yacc.c  */
#line 2998 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (1)].pointer), null); ;}
    break;

  case 984:

/* Line 1464 of yacc.c  */
#line 3000 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 985:

/* Line 1464 of yacc.c  */
#line 3001 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (2)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (2)].pointer), null)); ;}
    break;

  case 986:

/* Line 1464 of yacc.c  */
#line 3003 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 988:

/* Line 1464 of yacc.c  */
#line 3009 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 989:

/* Line 1464 of yacc.c  */
#line 3011 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 990:

/* Line 1464 of yacc.c  */
#line 3013 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 991:

/* Line 1464 of yacc.c  */
#line 3015 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 993:

/* Line 1464 of yacc.c  */
#line 3021 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 994:

/* Line 1464 of yacc.c  */
#line 3023 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 995:

/* Line 1464 of yacc.c  */
#line 3025 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtendedEnd((yyvsp[(2) - (2)].extDecl), (yyvsp[(1) - (2)].declarator)); ;}
    break;

  case 997:

/* Line 1464 of yacc.c  */
#line 3030 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 998:

/* Line 1464 of yacc.c  */
#line 3032 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 999:

/* Line 1464 of yacc.c  */
#line 3033 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1001:

/* Line 1464 of yacc.c  */
#line 3038 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1002:

/* Line 1464 of yacc.c  */
#line 3040 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1003:

/* Line 1464 of yacc.c  */
#line 3041 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1005:

/* Line 1464 of yacc.c  */
#line 3056 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1006:

/* Line 1464 of yacc.c  */
#line 3058 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1007:

/* Line 1464 of yacc.c  */
#line 3059 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1009:

/* Line 1464 of yacc.c  */
#line 3064 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1010:

/* Line 1464 of yacc.c  */
#line 3066 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1011:

/* Line 1464 of yacc.c  */
#line 3067 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1013:

/* Line 1464 of yacc.c  */
#line 3072 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (2)].pointer), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1014:

/* Line 1464 of yacc.c  */
#line 3074 "grammar.y"
    { (yyval.declarator) = MkDeclaratorExtended((yyvsp[(1) - (3)].extDecl), MkDeclaratorPointer((yyvsp[(2) - (3)].pointer), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1015:

/* Line 1464 of yacc.c  */
#line 3075 "grammar.y"
    { (yyval.declarator) = MkDeclaratorPointer((yyvsp[(1) - (3)].pointer), MkDeclaratorExtended((yyvsp[(2) - (3)].extDecl), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1016:

/* Line 1464 of yacc.c  */
#line 3079 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1017:

/* Line 1464 of yacc.c  */
#line 3080 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1018:

/* Line 1464 of yacc.c  */
#line 3082 "grammar.y"
    { 
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list)); 
         (yyval.initializer).loc = (yyloc); 

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (4)]);
            exp.loc = (yylsp[(3) - (4)]);
            ListAdd((yyvsp[(2) - (4)].list), init); 
         }
      ;}
    break;

  case 1019:

/* Line 1464 of yacc.c  */
#line 3097 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1020:

/* Line 1464 of yacc.c  */
#line 3098 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (4)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1021:

/* Line 1464 of yacc.c  */
#line 3099 "grammar.y"
    { (yyval.initializer) = MkInitializerList((yyvsp[(2) - (2)].list)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1022:

/* Line 1464 of yacc.c  */
#line 3101 "grammar.y"
    { 
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (5)].list)); 
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (5)]);
            exp.loc = (yylsp[(3) - (5)]);
            ListAdd((yyvsp[(2) - (5)].list), init); 
         }
      ;}
    break;

  case 1023:

/* Line 1464 of yacc.c  */
#line 3114 "grammar.y"
    { 
         (yyval.initializer) = MkInitializerList((yyvsp[(2) - (3)].list)); 
         (yyval.initializer).loc = (yyloc);

         {
            Expression exp = MkExpDummy();
            Initializer init = MkInitializerAssignment(exp);
            init.loc = (yylsp[(3) - (3)]);
            exp.loc = (yylsp[(3) - (3)]);
            ListAdd((yyvsp[(2) - (3)].list), init); 
         }
      ;}
    break;

  case 1024:

/* Line 1464 of yacc.c  */
#line 3129 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1025:

/* Line 1464 of yacc.c  */
#line 3131 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1026:

/* Line 1464 of yacc.c  */
#line 3135 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1027:

/* Line 1464 of yacc.c  */
#line 3136 "grammar.y"
    { (yyval.initializer) = MkInitializerAssignment((yyvsp[(1) - (1)].exp)); (yyval.initializer).loc = (yyloc); ;}
    break;

  case 1028:

/* Line 1464 of yacc.c  */
#line 3140 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 1029:

/* Line 1464 of yacc.c  */
#line 3141 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initializer)); ;}
    break;

  case 1030:

/* Line 1464 of yacc.c  */
#line 3142 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 1031:

/* Line 1464 of yacc.c  */
#line 3143 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initializer)); ;}
    break;

  case 1032:

/* Line 1464 of yacc.c  */
#line 3146 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 1033:

/* Line 1464 of yacc.c  */
#line 3147 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].initializer)); ;}
    break;

  case 1034:

/* Line 1464 of yacc.c  */
#line 3151 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1035:

/* Line 1464 of yacc.c  */
#line 3152 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (1)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1036:

/* Line 1464 of yacc.c  */
#line 3153 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 1037:

/* Line 1464 of yacc.c  */
#line 3157 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (2)].declarator), null); (yyval.initDeclarator).loc = (yyloc); ;}
    break;

  case 1038:

/* Line 1464 of yacc.c  */
#line 3161 "grammar.y"
    { (yyval.initDeclarator) = MkInitDeclarator((yyvsp[(1) - (3)].declarator), (yyvsp[(3) - (3)].initializer)); (yyval.initDeclarator).loc = (yyloc); (yyval.initDeclarator).initializer.loc.start = (yylsp[(2) - (3)]).end; ;}
    break;

  case 1039:

/* Line 1464 of yacc.c  */
#line 3165 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1040:

/* Line 1464 of yacc.c  */
#line 3166 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1041:

/* Line 1464 of yacc.c  */
#line 3167 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("uint")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1042:

/* Line 1464 of yacc.c  */
#line 3168 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier("int64")), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1043:

/* Line 1464 of yacc.c  */
#line 3170 "grammar.y"
    {
      char * colon = RSearchString((yyvsp[(1) - (3)].specifier).name, "::", strlen((yyvsp[(1) - (3)].specifier).name), true, false);
      String s = colon ? colon + 2 : (yyvsp[(1) - (3)].specifier).name;
      FreeSpecifier((yyvsp[(1) - (3)].specifier));
      (yyval.list) = MkList();
      ListAdd((yyval.list), MkInitDeclarator(MkDeclaratorIdentifier(MkIdentifier(s)), null));
      ListAdd((yyval.list), (yyvsp[(3) - (3)].initDeclarator));
   ;}
    break;

  case 1044:

/* Line 1464 of yacc.c  */
#line 3178 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1045:

/* Line 1464 of yacc.c  */
#line 3187 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].initDeclarator)); ;}
    break;

  case 1046:

/* Line 1464 of yacc.c  */
#line 3188 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (2)].initDeclarator)); ;}
    break;

  case 1047:

/* Line 1464 of yacc.c  */
#line 3189 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1048:

/* Line 1464 of yacc.c  */
#line 3190 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].initDeclarator)); ;}
    break;

  case 1049:

/* Line 1464 of yacc.c  */
#line 3194 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1050:

/* Line 1464 of yacc.c  */
#line 3195 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1051:

/* Line 1464 of yacc.c  */
#line 3199 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1052:

/* Line 1464 of yacc.c  */
#line 3200 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1053:

/* Line 1464 of yacc.c  */
#line 3205 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1054:

/* Line 1464 of yacc.c  */
#line 3206 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declarator)); ;}
    break;

  case 1055:

/* Line 1464 of yacc.c  */
#line 3207 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (2)].list), MkDeclaratorPointer(MkPointer(null,null), null)); ;}
    break;

  case 1056:

/* Line 1464 of yacc.c  */
#line 3208 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), MkDeclaratorPointer(MkPointer(null,null), (yyvsp[(3) - (3)].declarator))); ;}
    break;

  case 1057:

/* Line 1464 of yacc.c  */
#line 3209 "grammar.y"
    { (yyval.typeName) = MkTypeNameGuessDecl((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1058:

/* Line 1464 of yacc.c  */
#line 3211 "grammar.y"
    { (yyval.typeName) = MkTypeName(MkListOne(MkSpecifier(CLASS)), null); ;}
    break;

  case 1059:

/* Line 1464 of yacc.c  */
#line 3229 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1060:

/* Line 1464 of yacc.c  */
#line 3230 "grammar.y"
    { (yyval.typeName) = MkTypeName((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator)); ;}
    break;

  case 1061:

/* Line 1464 of yacc.c  */
#line 3234 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1062:

/* Line 1464 of yacc.c  */
#line 3235 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1063:

/* Line 1464 of yacc.c  */
#line 3236 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1064:

/* Line 1464 of yacc.c  */
#line 3237 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1065:

/* Line 1464 of yacc.c  */
#line 3238 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1066:

/* Line 1464 of yacc.c  */
#line 3239 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1067:

/* Line 1464 of yacc.c  */
#line 3241 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1068:

/* Line 1464 of yacc.c  */
#line 3242 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1069:

/* Line 1464 of yacc.c  */
#line 3243 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1070:

/* Line 1464 of yacc.c  */
#line 3244 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1071:

/* Line 1464 of yacc.c  */
#line 3248 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].typeName)); ;}
    break;

  case 1072:

/* Line 1464 of yacc.c  */
#line 3249 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1073:

/* Line 1464 of yacc.c  */
#line 3250 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1074:

/* Line 1464 of yacc.c  */
#line 3251 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1075:

/* Line 1464 of yacc.c  */
#line 3252 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(MkList(), null)); ListAdd((yyval.list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1076:

/* Line 1464 of yacc.c  */
#line 3254 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1077:

/* Line 1464 of yacc.c  */
#line 3255 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typeName)); ;}
    break;

  case 1078:

/* Line 1464 of yacc.c  */
#line 3256 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (4)].list); ListAdd((yyvsp[(1) - (4)].list), (yyvsp[(4) - (4)].typeName)); ;}
    break;

  case 1080:

/* Line 1464 of yacc.c  */
#line 3261 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1081:

/* Line 1464 of yacc.c  */
#line 3262 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1082:

/* Line 1464 of yacc.c  */
#line 3263 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1083:

/* Line 1464 of yacc.c  */
#line 3264 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), MkTypeName(null, null)); ;}
    break;

  case 1084:

/* Line 1464 of yacc.c  */
#line 3265 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), MkTypeName(null, null)); ;}
    break;

  case 1086:

/* Line 1464 of yacc.c  */
#line 3270 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), null); ;}
    break;

  case 1089:

/* Line 1464 of yacc.c  */
#line 3277 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); FreeAttrib((yyvsp[(1) - (1)].attrib)); ;}
    break;

  case 1091:

/* Line 1464 of yacc.c  */
#line 3279 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1092:

/* Line 1464 of yacc.c  */
#line 3280 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); ;}
    break;

  case 1093:

/* Line 1464 of yacc.c  */
#line 3281 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1101:

/* Line 1464 of yacc.c  */
#line 3292 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1102:

/* Line 1464 of yacc.c  */
#line 3293 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1103:

/* Line 1464 of yacc.c  */
#line 3294 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1104:

/* Line 1464 of yacc.c  */
#line 3295 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1105:

/* Line 1464 of yacc.c  */
#line 3296 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (1)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1106:

/* Line 1464 of yacc.c  */
#line 3297 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); Compiler_Error($"syntax error\n"); ;}
    break;

  case 1107:

/* Line 1464 of yacc.c  */
#line 3298 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (1)].list)); Compiler_Error($"syntax error\n"); (yyval.stmt).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1108:

/* Line 1464 of yacc.c  */
#line 3302 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (1)].string), null); (yyval.asmField).loc = (yylsp[(1) - (1)]); ;}
    break;

  case 1109:

/* Line 1464 of yacc.c  */
#line 3303 "grammar.y"
    { (yyval.asmField) = MkAsmField((yyvsp[(1) - (4)].string), (yyvsp[(3) - (4)].exp)); (yyval.asmField).loc = (yyloc); ;}
    break;

  case 1110:

/* Line 1464 of yacc.c  */
#line 3307 "grammar.y"
    { (yyval.list) = MkListOne((yyvsp[(1) - (1)].asmField)); ;}
    break;

  case 1111:

/* Line 1464 of yacc.c  */
#line 3308 "grammar.y"
    { ListAdd((yyval.list), (yyvsp[(3) - (3)].asmField)); ;}
    break;

  case 1112:

/* Line 1464 of yacc.c  */
#line 3309 "grammar.y"
    { (yyval.list) = null; ;}
    break;

  case 1113:

/* Line 1464 of yacc.c  */
#line 3313 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (6)].specifier), (yyvsp[(4) - (6)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1114:

/* Line 1464 of yacc.c  */
#line 3314 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), (yyvsp[(6) - (8)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1115:

/* Line 1464 of yacc.c  */
#line 3315 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1116:

/* Line 1464 of yacc.c  */
#line 3316 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (12)].specifier), (yyvsp[(4) - (12)].string), (yyvsp[(6) - (12)].list), (yyvsp[(8) - (12)].list), (yyvsp[(10) - (12)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1117:

/* Line 1464 of yacc.c  */
#line 3318 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (8)].specifier), (yyvsp[(4) - (8)].string), null, (yyvsp[(6) - (8)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1118:

/* Line 1464 of yacc.c  */
#line 3319 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), null, (yyvsp[(6) - (10)].list), (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1119:

/* Line 1464 of yacc.c  */
#line 3320 "grammar.y"
    { (yyval.stmt) = MkAsmStmt((yyvsp[(2) - (10)].specifier), (yyvsp[(4) - (10)].string), (yyvsp[(6) - (10)].list), null, (yyvsp[(8) - (10)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1120:

/* Line 1464 of yacc.c  */
#line 3322 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (5)].string), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1121:

/* Line 1464 of yacc.c  */
#line 3323 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), (yyvsp[(5) - (7)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1122:

/* Line 1464 of yacc.c  */
#line 3324 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1123:

/* Line 1464 of yacc.c  */
#line 3325 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (11)].string), (yyvsp[(5) - (11)].list), (yyvsp[(7) - (11)].list), (yyvsp[(9) - (11)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1124:

/* Line 1464 of yacc.c  */
#line 3327 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (7)].string), null, (yyvsp[(5) - (7)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1125:

/* Line 1464 of yacc.c  */
#line 3328 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), null, (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1126:

/* Line 1464 of yacc.c  */
#line 3329 "grammar.y"
    { (yyval.stmt) = MkAsmStmt(null, (yyvsp[(3) - (9)].string), (yyvsp[(5) - (9)].list), null, (yyvsp[(7) - (9)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1127:

/* Line 1464 of yacc.c  */
#line 3333 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1128:

/* Line 1464 of yacc.c  */
#line 3334 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1129:

/* Line 1464 of yacc.c  */
#line 3335 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1130:

/* Line 1464 of yacc.c  */
#line 3336 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1131:

/* Line 1464 of yacc.c  */
#line 3337 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1132:

/* Line 1464 of yacc.c  */
#line 3341 "grammar.y"
    { (yyval.stmt) = MkLabeledStmt((yyvsp[(1) - (3)].id), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1133:

/* Line 1464 of yacc.c  */
#line 3342 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1134:

/* Line 1464 of yacc.c  */
#line 3343 "grammar.y"
    { (yyval.stmt) = MkCaseStmt((yyvsp[(2) - (4)].exp), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); (yyvsp[(2) - (4)].exp).loc.start = (yylsp[(1) - (4)]).end; ;}
    break;

  case 1135:

/* Line 1464 of yacc.c  */
#line 3344 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), (yyvsp[(3) - (3)].stmt)); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (3)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (3)]).end; ;}
    break;

  case 1136:

/* Line 1464 of yacc.c  */
#line 3345 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(MkExpDummy(), null); (yyval.stmt).caseStmt.exp.loc = (yylsp[(2) - (2)]); (yyval.stmt).loc = (yyloc); (yyval.stmt).caseStmt.exp.loc.start = (yylsp[(1) - (2)]).end; ;}
    break;

  case 1137:

/* Line 1464 of yacc.c  */
#line 3346 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, (yyvsp[(3) - (3)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1138:

/* Line 1464 of yacc.c  */
#line 3347 "grammar.y"
    { (yyval.stmt) = MkCaseStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1139:

/* Line 1464 of yacc.c  */
#line 3351 "grammar.y"
    { (yyval.declMode) = declMode = publicAccess; ;}
    break;

  case 1140:

/* Line 1464 of yacc.c  */
#line 3352 "grammar.y"
    { (yyval.declMode) = declMode = privateAccess; ;}
    break;

  case 1141:

/* Line 1464 of yacc.c  */
#line 3353 "grammar.y"
    { (yyval.declMode) = declMode = defaultAccess; ;}
    break;

  case 1142:

/* Line 1464 of yacc.c  */
#line 3357 "grammar.y"
    { (yyval.declMode) = publicAccess; ;}
    break;

  case 1143:

/* Line 1464 of yacc.c  */
#line 3358 "grammar.y"
    { (yyval.declMode) = privateAccess; ;}
    break;

  case 1144:

/* Line 1464 of yacc.c  */
#line 3362 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1145:

/* Line 1464 of yacc.c  */
#line 3363 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1146:

/* Line 1464 of yacc.c  */
#line 3364 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1147:

/* Line 1464 of yacc.c  */
#line 3365 "grammar.y"
    { (yyval.declaration) = (yyvsp[(1) - (2)].declaration); ;}
    break;

  case 1148:

/* Line 1464 of yacc.c  */
#line 3369 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1149:

/* Line 1464 of yacc.c  */
#line 3370 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1150:

/* Line 1464 of yacc.c  */
#line 3371 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1151:

/* Line 1464 of yacc.c  */
#line 3373 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1152:

/* Line 1464 of yacc.c  */
#line 3374 "grammar.y"
    { (yyval.declaration) = MkDeclarationDefine((yyvsp[(2) - (5)].id), (yyvsp[(4) - (5)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1153:

/* Line 1464 of yacc.c  */
#line 3375 "grammar.y"
    { declMode = staticAccess; (yyval.declaration) = MkDeclarationDefine((yyvsp[(3) - (6)].id), (yyvsp[(5) - (6)].exp)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1154:

/* Line 1464 of yacc.c  */
#line 3379 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); yyerrok; ;}
    break;

  case 1155:

/* Line 1464 of yacc.c  */
#line 3383 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), null); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1156:

/* Line 1464 of yacc.c  */
#line 3384 "grammar.y"
    {;}
    break;

  case 1157:

/* Line 1464 of yacc.c  */
#line 3386 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1158:

/* Line 1464 of yacc.c  */
#line 3387 "grammar.y"
    { (yyval.declaration) = MkDeclarationInst((yyvsp[(1) - (2)].instance)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1159:

/* Line 1464 of yacc.c  */
#line 3388 "grammar.y"
    { (yyval.declaration) = MkDeclaration((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); (yyval.declaration).loc = (yyloc); ;}
    break;

  case 1160:

/* Line 1464 of yacc.c  */
#line 3392 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1161:

/* Line 1464 of yacc.c  */
#line 3393 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1162:

/* Line 1464 of yacc.c  */
#line 3394 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); /*declMode = defaultDeclMode; */;}
    break;

  case 1163:

/* Line 1464 of yacc.c  */
#line 3395 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (3)].list); ;}
    break;

  case 1164:

/* Line 1464 of yacc.c  */
#line 3399 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].declaration)); ;}
    break;

  case 1165:

/* Line 1464 of yacc.c  */
#line 3400 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].declaration)); ;}
    break;

  case 1166:

/* Line 1464 of yacc.c  */
#line 3404 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1167:

/* Line 1464 of yacc.c  */
#line 3405 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1168:

/* Line 1464 of yacc.c  */
#line 3406 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1169:

/* Line 1464 of yacc.c  */
#line 3410 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].stmt)); ;}
    break;

  case 1170:

/* Line 1464 of yacc.c  */
#line 3411 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1171:

/* Line 1464 of yacc.c  */
#line 3412 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].stmt)); ;}
    break;

  case 1172:

/* Line 1464 of yacc.c  */
#line 3413 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1173:

/* Line 1464 of yacc.c  */
#line 3414 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1174:

/* Line 1464 of yacc.c  */
#line 3415 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1175:

/* Line 1464 of yacc.c  */
#line 3416 "grammar.y"
    { Statement stmt = MkBadDeclStmt((yyvsp[(2) - (2)].declaration)); stmt.loc = (yylsp[(2) - (2)]); yyerror(); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), stmt); /*declMode = defaultDeclMode;*/ ;}
    break;

  case 1176:

/* Line 1464 of yacc.c  */
#line 3420 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1177:

/* Line 1464 of yacc.c  */
#line 3421 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1178:

/* Line 1464 of yacc.c  */
#line 3422 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1179:

/* Line 1464 of yacc.c  */
#line 3423 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1180:

/* Line 1464 of yacc.c  */
#line 3427 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, (yyvsp[(1) - (1)].list)); ;}
    break;

  case 1181:

/* Line 1464 of yacc.c  */
#line 3428 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (1)].list), null); ;}
    break;

  case 1182:

/* Line 1464 of yacc.c  */
#line 3429 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1183:

/* Line 1464 of yacc.c  */
#line 3430 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list)); ;}
    break;

  case 1184:

/* Line 1464 of yacc.c  */
#line 3434 "grammar.y"
    { (yyval.context) = PushContext(); ;}
    break;

  case 1185:

/* Line 1464 of yacc.c  */
#line 3438 "grammar.y"
    { (yyval.stmt) = (yyvsp[(1) - (2)].stmt); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1186:

/* Line 1464 of yacc.c  */
#line 3443 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1187:

/* Line 1464 of yacc.c  */
#line 3445 "grammar.y"
    { (yyval.stmt) = MkCompoundStmt(null, null); (yyval.stmt).compound.context = (yyvsp[(1) - (1)].context); PopContext((yyvsp[(1) - (1)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1188:

/* Line 1464 of yacc.c  */
#line 3448 "grammar.y"
    { (yyval.stmt) = (yyvsp[(2) - (2)].stmt); (yyval.stmt).compound.context = (yyvsp[(1) - (2)].context); PopContext((yyvsp[(1) - (2)].context)); (yyval.stmt).loc = (yyloc); (yyval.stmt).loc.end.charPos++; (yyval.stmt).loc.end.pos++; ;}
    break;

  case 1189:

/* Line 1464 of yacc.c  */
#line 3453 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1190:

/* Line 1464 of yacc.c  */
#line 3454 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1191:

/* Line 1464 of yacc.c  */
#line 3455 "grammar.y"
    { (yyval.stmt) = MkExpressionStmt((yyvsp[(1) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1192:

/* Line 1464 of yacc.c  */
#line 3459 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1193:

/* Line 1464 of yacc.c  */
#line 3460 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1194:

/* Line 1464 of yacc.c  */
#line 3461 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1195:

/* Line 1464 of yacc.c  */
#line 3462 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].stmt), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1196:

/* Line 1464 of yacc.c  */
#line 3463 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1197:

/* Line 1464 of yacc.c  */
#line 3464 "grammar.y"
    { (yyval.stmt) = MkSwitchStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1198:

/* Line 1464 of yacc.c  */
#line 3468 "grammar.y"
    { (yyval.stmt) = MkIfStmt((yyvsp[(3) - (3)].list), null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1200:

/* Line 1464 of yacc.c  */
#line 3473 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1201:

/* Line 1464 of yacc.c  */
#line 3474 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1202:

/* Line 1464 of yacc.c  */
#line 3475 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1203:

/* Line 1464 of yacc.c  */
#line 3477 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (7)].stmt), (yyvsp[(5) - (7)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1204:

/* Line 1464 of yacc.c  */
#line 3478 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1205:

/* Line 1464 of yacc.c  */
#line 3480 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1206:

/* Line 1464 of yacc.c  */
#line 3481 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), null, null, (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1207:

/* Line 1464 of yacc.c  */
#line 3482 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1208:

/* Line 1464 of yacc.c  */
#line 3483 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1209:

/* Line 1464 of yacc.c  */
#line 3484 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, (yyvsp[(4) - (4)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1210:

/* Line 1464 of yacc.c  */
#line 3486 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (7)].id), (yyvsp[(5) - (7)].list), null, (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1211:

/* Line 1464 of yacc.c  */
#line 3487 "grammar.y"
    { (yyval.stmt) = MkForEachStmt((yyvsp[(3) - (9)].id), (yyvsp[(5) - (9)].list), (yyvsp[(7) - (9)].list), (yyvsp[(9) - (9)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1212:

/* Line 1464 of yacc.c  */
#line 3491 "grammar.y"
    { (yyval.stmt) = MkForStmt(null, null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1213:

/* Line 1464 of yacc.c  */
#line 3492 "grammar.y"
    { (yyval.stmt) = MkForStmt(MkExpressionStmt((yyvsp[(3) - (4)].list)), null, null, null); (yyval.stmt).forStmt.init.loc = (yylsp[(3) - (4)]); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1214:

/* Line 1464 of yacc.c  */
#line 3493 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (4)].stmt), null, null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1215:

/* Line 1464 of yacc.c  */
#line 3494 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), MkExpressionStmt((yyvsp[(4) - (5)].list)), null, null); (yyval.stmt).loc = (yyloc); (yyval.stmt).forStmt.check.loc = (yylsp[(4) - (5)]); ;}
    break;

  case 1216:

/* Line 1464 of yacc.c  */
#line 3498 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (5)].stmt), (yyvsp[(4) - (5)].stmt), (yyvsp[(5) - (5)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1217:

/* Line 1464 of yacc.c  */
#line 3499 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), null, (yyvsp[(6) - (6)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1218:

/* Line 1464 of yacc.c  */
#line 3500 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (7)].stmt), (yyvsp[(4) - (7)].stmt), (yyvsp[(5) - (7)].list), (yyvsp[(7) - (7)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1219:

/* Line 1464 of yacc.c  */
#line 3501 "grammar.y"
    { (yyval.stmt) = MkForStmt((yyvsp[(3) - (6)].stmt), (yyvsp[(4) - (6)].stmt), (yyvsp[(5) - (6)].list), (yyvsp[(6) - (6)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1220:

/* Line 1464 of yacc.c  */
#line 3503 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (6)].stmt), (yyvsp[(5) - (6)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1221:

/* Line 1464 of yacc.c  */
#line 3504 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1222:

/* Line 1464 of yacc.c  */
#line 3505 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (5)].stmt), (yyvsp[(5) - (5)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1223:

/* Line 1464 of yacc.c  */
#line 3506 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (4)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1224:

/* Line 1464 of yacc.c  */
#line 3507 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (3)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1225:

/* Line 1464 of yacc.c  */
#line 3508 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt((yyvsp[(2) - (2)].stmt), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1226:

/* Line 1464 of yacc.c  */
#line 3509 "grammar.y"
    { (yyval.stmt) = MkDoWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1227:

/* Line 1464 of yacc.c  */
#line 3512 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1228:

/* Line 1464 of yacc.c  */
#line 3516 "grammar.y"
    { (yyval.stmt) = MkWhileStmt(null, null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1229:

/* Line 1464 of yacc.c  */
#line 3517 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (3)].list), null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1230:

/* Line 1464 of yacc.c  */
#line 3521 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].stmt)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1231:

/* Line 1464 of yacc.c  */
#line 3522 "grammar.y"
    { (yyval.stmt) = MkWhileStmt((yyvsp[(3) - (4)].list), (yyvsp[(4) - (4)].stmt) ); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1232:

/* Line 1464 of yacc.c  */
#line 3526 "grammar.y"
    { (yyval.stmt) = MkGotoStmt((yyvsp[(2) - (3)].id)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1233:

/* Line 1464 of yacc.c  */
#line 3527 "grammar.y"
    { (yyval.stmt) = MkContinueStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1234:

/* Line 1464 of yacc.c  */
#line 3528 "grammar.y"
    { (yyval.stmt) = MkBreakStmt(); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1235:

/* Line 1464 of yacc.c  */
#line 3529 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc = (yylsp[(2) - (2)]); ;}
    break;

  case 1236:

/* Line 1464 of yacc.c  */
#line 3530 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1237:

/* Line 1464 of yacc.c  */
#line 3531 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (3)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1238:

/* Line 1464 of yacc.c  */
#line 3532 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1239:

/* Line 1464 of yacc.c  */
#line 3533 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (3)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1240:

/* Line 1464 of yacc.c  */
#line 3537 "grammar.y"
    { (yyval.stmt) = MkReturnStmt((yyvsp[(2) - (2)].list)); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1241:

/* Line 1464 of yacc.c  */
#line 3538 "grammar.y"
    { (yyval.stmt) = MkReturnStmt(MkListOne((yyvsp[(2) - (2)].exp))); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1242:

/* Line 1464 of yacc.c  */
#line 3539 "grammar.y"
    { Expression exp = MkExpDummy(); (yyval.stmt) = MkReturnStmt(MkListOne(exp)); (yyval.stmt).loc = (yyloc); exp.loc.start = exp.loc.end = (yylsp[(1) - (1)]).end; ;}
    break;

  case 1243:

/* Line 1464 of yacc.c  */
#line 3540 "grammar.y"
    { (yyval.stmt) = MkGotoStmt(null); (yyval.stmt).loc = (yyloc); ;}
    break;

  case 1244:

/* Line 1464 of yacc.c  */
#line 3546 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1245:

/* Line 1464 of yacc.c  */
#line 3548 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1246:

/* Line 1464 of yacc.c  */
#line 3549 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1247:

/* Line 1464 of yacc.c  */
#line 3551 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1248:

/* Line 1464 of yacc.c  */
#line 3553 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); ;}
    break;

  case 1249:

/* Line 1464 of yacc.c  */
#line 3554 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc);;}
    break;

  case 1250:

/* Line 1464 of yacc.c  */
#line 3557 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1251:

/* Line 1464 of yacc.c  */
#line 3558 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1252:

/* Line 1464 of yacc.c  */
#line 3559 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].declarator), (yyvsp[(3) - (4)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(4) - (4)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(4) - (4)].stmt).loc.end; ;}
    break;

  case 1253:

/* Line 1464 of yacc.c  */
#line 3560 "grammar.y"
    { (yyval.function) = MkFunction((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1254:

/* Line 1464 of yacc.c  */
#line 3561 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (3)].declarator), (yyvsp[(2) - (3)].list)); ProcessFunctionBody((yyval.function), (yyvsp[(3) - (3)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(3) - (3)].stmt).loc.end; ;}
    break;

  case 1255:

/* Line 1464 of yacc.c  */
#line 3562 "grammar.y"
    { (yyval.function) = MkFunction(null, (yyvsp[(1) - (2)].declarator), null); ProcessFunctionBody((yyval.function), (yyvsp[(2) - (2)].stmt)); (yyval.function).loc = (yyloc); (yyval.function).loc.end = (yyvsp[(2) - (2)].stmt).loc.end; ;}
    break;

  case 1256:

/* Line 1464 of yacc.c  */
#line 3566 "grammar.y"
    { (yyval.string) = CopyString(yytext); ;}
    break;

  case 1257:

/* Line 1464 of yacc.c  */
#line 3568 "grammar.y"
    { 
      int len1 = strlen((yyvsp[(1) - (2)].string));
      int len2 = strlen(yytext);
      (yyval.string) = new byte[len1-1 + len2-1 + 1];
      memcpy((yyval.string), (yyvsp[(1) - (2)].string), len1-1);
      memcpy((yyval.string) + len1-1, yytext+1, len2);
      delete (yyvsp[(1) - (2)].string);
   ;}
    break;

  case 1258:

/* Line 1464 of yacc.c  */
#line 3579 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].function).declMode = declMode; declMode = defaultDeclMode; ;}
    break;

  case 1259:

/* Line 1464 of yacc.c  */
#line 3581 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1260:

/* Line 1464 of yacc.c  */
#line 3584 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; FreeList((yyvsp[(1) - (2)].list), FreeSpecifier); ;}
    break;

  case 1261:

/* Line 1464 of yacc.c  */
#line 3587 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; declMode = defaultDeclMode; ;}
    break;

  case 1262:

/* Line 1464 of yacc.c  */
#line 3588 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(2) - (2)].string), normalImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1263:

/* Line 1464 of yacc.c  */
#line 3589 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), staticImport, (declMode != defaultAccess) ? declMode : privateAccess);  (yyval.external).loc = (yyloc); ;}
    break;

  case 1264:

/* Line 1464 of yacc.c  */
#line 3591 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(2) - (3)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), isRemote ? remoteImport : normalImport, (declMode != defaultAccess) ? declMode : privateAccess); 
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(2) - (3)].id));
      if(!isRemote)
         yyerror(); 
   ;}
    break;

  case 1265:

/* Line 1464 of yacc.c  */
#line 3600 "grammar.y"
    { (yyval.external) = null; ;}
    break;

  case 1266:

/* Line 1464 of yacc.c  */
#line 3602 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); declMode = defaultDeclMode; ;}
    break;

  case 1267:

/* Line 1464 of yacc.c  */
#line 3604 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1268:

/* Line 1464 of yacc.c  */
#line 3605 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); declMode = defaultDeclMode; ;}
    break;

  case 1269:

/* Line 1464 of yacc.c  */
#line 3606 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(3) - (3)].string), normalImport, ((yyvsp[(1) - (3)].declMode) != defaultAccess) ? (yyvsp[(1) - (3)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); declMode = defaultDeclMode; ;}
    break;

  case 1270:

/* Line 1464 of yacc.c  */
#line 3607 "grammar.y"
    { (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), staticImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);  (yyval.external).loc = (yyloc); declMode = defaultDeclMode; ;}
    break;

  case 1271:

/* Line 1464 of yacc.c  */
#line 3609 "grammar.y"
    {
      bool isRemote = !strcmp((yyvsp[(3) - (4)].id).string, "remote");
      (yyval.external) = MkExternalImport((yyvsp[(4) - (4)].string), isRemote ? remoteImport : normalImport, ((yyvsp[(1) - (4)].declMode) != defaultAccess) ? (yyvsp[(1) - (4)].declMode) : privateAccess);
      (yyval.external).loc = (yyloc);
      FreeIdentifier((yyvsp[(3) - (4)].id));
      declMode = defaultDeclMode;
      if(!isRemote)
         yyerror();  
   ;}
    break;

  case 1272:

/* Line 1464 of yacc.c  */
#line 3618 "grammar.y"
    { defaultDeclMode = (yyvsp[(1) - (2)].declMode); (yyval.external) = null; ;}
    break;

  case 1273:

/* Line 1464 of yacc.c  */
#line 3619 "grammar.y"
    { defaultDeclMode = staticAccess; (yyval.external) = null; ;}
    break;

  case 1274:

/* Line 1464 of yacc.c  */
#line 3620 "grammar.y"
    { (yyval.external) = MkExternalNameSpace((yyvsp[(2) - (2)].id)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1275:

/* Line 1464 of yacc.c  */
#line 3621 "grammar.y"
    { (yyval.external) = MkExternalNameSpace(MkIdentifier((yyvsp[(2) - (2)].specifier).name)); FreeSpecifier((yyvsp[(2) - (2)].specifier)); (yyval.external).loc = (yyloc); ;}
    break;

  case 1276:

/* Line 1464 of yacc.c  */
#line 3622 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(1) - (1)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(1) - (1)].dbtableDef).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1277:

/* Line 1464 of yacc.c  */
#line 3623 "grammar.y"
    { (yyval.external) = MkExternalDBTable((yyvsp[(2) - (2)].dbtableDef)); (yyval.external).loc = (yyloc);  (yyvsp[(2) - (2)].dbtableDef).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1278:

/* Line 1464 of yacc.c  */
#line 3627 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(1) - (1)]._class));  (yyval.external).loc = (yyvsp[(1) - (1)]._class).loc; (yyvsp[(1) - (1)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1279:

/* Line 1464 of yacc.c  */
#line 3629 "grammar.y"
    {
      FreeList((yyvsp[(1) - (2)].list), FreeSpecifier);
      (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));
      (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc;
      (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess;
      declMode = defaultDeclMode;
   ;}
    break;

  case 1280:

/* Line 1464 of yacc.c  */
#line 3636 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(1) - (1)].function)); (yyval.external).loc = (yyvsp[(1) - (1)].function).loc;  (yyvsp[(1) - (1)].function).declMode = declMode; declMode = defaultDeclMode; ;}
    break;

  case 1281:

/* Line 1464 of yacc.c  */
#line 3638 "grammar.y"
    { (yyval.external) = MkExternalClass((yyvsp[(2) - (2)]._class));  (yyval.external).loc = (yyvsp[(2) - (2)]._class).loc; (yyvsp[(2) - (2)]._class).declMode = ((yyvsp[(1) - (2)].declMode) != defaultAccess) ? (yyvsp[(1) - (2)].declMode) : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1282:

/* Line 1464 of yacc.c  */
#line 3639 "grammar.y"
    { (yyval.external) = MkExternalFunction((yyvsp[(2) - (2)].function)); (yyval.external).loc = (yyvsp[(2) - (2)].function).loc; (yyvsp[(2) - (2)].function).declMode = (yyvsp[(1) - (2)].declMode); declMode = defaultDeclMode; ;}
    break;

  case 1283:

/* Line 1464 of yacc.c  */
#line 3642 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(1) - (1)].declaration));  (yyval.external).loc = (yyloc); (yyvsp[(1) - (1)].declaration).declMode = declMode; declMode = defaultDeclMode; ;}
    break;

  case 1284:

/* Line 1464 of yacc.c  */
#line 3643 "grammar.y"
    { (yyval.external) = MkExternalDeclaration((yyvsp[(2) - (2)].declaration)); (yyval.external).loc = (yyloc); (yyvsp[(2) - (2)].declaration).declMode = (yyvsp[(1) - (2)].declMode); declMode = defaultDeclMode; ;}
    break;

  case 1285:

/* Line 1464 of yacc.c  */
#line 3647 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1286:

/* Line 1464 of yacc.c  */
#line 3648 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1287:

/* Line 1464 of yacc.c  */
#line 3649 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1290:

/* Line 1464 of yacc.c  */
#line 3655 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].external)); ast = (yyval.list); ;}
    break;

  case 1291:

/* Line 1464 of yacc.c  */
#line 3656 "grammar.y"
    { (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].external)); ;}
    break;

  case 1292:

/* Line 1464 of yacc.c  */
#line 3658 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(2) - (2)]._class)); (yyval.list) = (yyvsp[(1) - (2)].list); ListAdd((yyvsp[(1) - (2)].list), _class); _class.loc = (yylsp[(2) - (2)]);  (yyvsp[(2) - (2)]._class).declMode = (declMode != defaultAccess) ? declMode : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1293:

/* Line 1464 of yacc.c  */
#line 3660 "grammar.y"
    { External _class = MkExternalClass((yyvsp[(3) - (3)]._class)); (yyval.list) = (yyvsp[(1) - (3)].list); ListAdd((yyvsp[(1) - (3)].list), _class); _class.loc = (yylsp[(3) - (3)]);  (yyvsp[(3) - (3)]._class).declMode = ((yyvsp[(2) - (3)].declMode) != defaultAccess) ? (yyvsp[(2) - (3)].declMode) : privateAccess; declMode = defaultDeclMode; ;}
    break;

  case 1296:

/* Line 1464 of yacc.c  */
#line 3666 "grammar.y"
    { ast = MkList(); ;}
    break;

  case 1297:

/* Line 1464 of yacc.c  */
#line 3670 "grammar.y"
    { Symbol symbol = DeclClassAddNameSpace(globalContext.nextID++, (yyvsp[(3) - (6)].id).string); FreeIdentifier((yyvsp[(3) - (6)].id)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1298:

/* Line 1464 of yacc.c  */
#line 3671 "grammar.y"
    { Symbol symbol = DeclClass(globalContext.nextID++, (yyvsp[(3) - (6)].specifier).name); FreeSpecifier((yyvsp[(3) - (6)].specifier)); (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (6)].string), symbol, (yyvsp[(5) - (6)].list)); ;}
    break;

  case 1299:

/* Line 1464 of yacc.c  */
#line 3672 "grammar.y"
    { (yyval.dbtableDef) = MkDBTableDef((yyvsp[(2) - (5)].string), null, (yyvsp[(4) - (5)].list)); ;}
    break;

  case 1300:

/* Line 1464 of yacc.c  */
#line 3676 "grammar.y"
    { (yyval.dbtableEntry) = MkDBFieldEntry(MkTypeName((yyvsp[(1) - (4)].list), null), (yyvsp[(2) - (4)].id), (yyvsp[(3) - (4)].string)); ;}
    break;

  case 1301:

/* Line 1464 of yacc.c  */
#line 3680 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(1) - (1)].id), ascending); ;}
    break;

  case 1302:

/* Line 1464 of yacc.c  */
#line 3681 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), descending); ;}
    break;

  case 1303:

/* Line 1464 of yacc.c  */
#line 3682 "grammar.y"
    { (yyval.dbindexItem) = MkDBIndexItem((yyvsp[(2) - (2)].id), ascending); ;}
    break;

  case 1304:

/* Line 1464 of yacc.c  */
#line 3686 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbindexItem)); ;}
    break;

  case 1305:

/* Line 1464 of yacc.c  */
#line 3687 "grammar.y"
    { ListAdd((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].dbindexItem)); ;}
    break;

  case 1306:

/* Line 1464 of yacc.c  */
#line 3691 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (3)].list), null); ;}
    break;

  case 1307:

/* Line 1464 of yacc.c  */
#line 3692 "grammar.y"
    { (yyval.dbtableEntry) = MkDBIndexEntry((yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].id)); ;}
    break;

  case 1308:

/* Line 1464 of yacc.c  */
#line 3696 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1309:

/* Line 1464 of yacc.c  */
#line 3697 "grammar.y"
    { (yyval.list) = MkList(); ListAdd((yyval.list), (yyvsp[(1) - (1)].dbtableEntry)); ;}
    break;

  case 1310:

/* Line 1464 of yacc.c  */
#line 3698 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1311:

/* Line 1464 of yacc.c  */
#line 3699 "grammar.y"
    { ListAdd((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].dbtableEntry)); ;}
    break;

  case 1312:

/* Line 1464 of yacc.c  */
#line 3703 "grammar.y"
    { (yyval.exp) = MkExpDBOpen((yyvsp[(3) - (6)].exp), (yyvsp[(5) - (6)].exp)); ;}
    break;

  case 1313:

/* Line 1464 of yacc.c  */
#line 3707 "grammar.y"
    { (yyval.exp) = MkExpDBField((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1314:

/* Line 1464 of yacc.c  */
#line 3711 "grammar.y"
    { (yyval.exp) = MkExpDBIndex((yyvsp[(3) - (6)].string), (yyvsp[(5) - (6)].id)); ;}
    break;

  case 1315:

/* Line 1464 of yacc.c  */
#line 3715 "grammar.y"
    { (yyval.exp) = MkExpDBTable((yyvsp[(3) - (4)].string)); ;}
    break;



/* Line 1464 of yacc.c  */
#line 21981 "grammar.ec"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }

  yyerror_range[0] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[0] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[0] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;

  yyerror_range[1] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, (yyerror_range - 1), 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, &yylloc);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



/* Line 1684 of yacc.c  */
#line 3718 "grammar.y"


