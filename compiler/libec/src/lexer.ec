#line 2 "lexer.ec"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 178
#define YY_END_OF_BUFFER 179
static yyconst short int yy_accept[729] =
    {   0,
      113,  113,  179,  177,  175,  174,  173,  176,  160,  177,
        1,  172,  166,  159,  177,  154,  155,  164,  163,  151,
      162,  158,  165,  119,  119,  152,  148,  167,  153,  168,
      171,  113,  113,  113,  156,  157,  169,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  149,  170,  150,  161,  147,
        0,  124,    0,  133,  150,  142,  134,    0,    0,  131,
      139,  129,  140,  130,  141,    0,  122,    2,    3,  132,
      123,  118,    0,  119,    0,  119,  113,  157,  149,  156,
      138,  144,  146,  145,  137,    0,  113,    0,  113,    0,

        0,  135,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,   11,  113,  113,  113,  113,  113,  113,  113,  113,
       19,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  136,  143,  120,  126,    0,  122,
      122,    0,  123,  118,    0,  121,    0,  114,  113,  128,
      127,  113,  113,    0,  125,    0,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,   93,  113,  113,  113,  113,  113,  113,

      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,   17,   46,  113,  113,  113,  113,   20,
      113,  113,  113,   52,  113,  113,  113,  113,  113,  113,
      113,   45,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,    0,  122,    0,  122,    0,  123,  121,  116,  117,
      114,    0,   62,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,    4,  113,    6,    7,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,

      113,  113,   13,   14,  113,  113,  113,   18,  113,  113,
      113,  113,  113,   22,  113,   53,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,   21,  113,  113,  113,   39,  113,
      113,  113,    0,  122,  116,  116,    0,  116,  116,  117,
        0,    0,  115,   63,  113,  113,  113,   94,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,    5,   48,    8,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,   16,  113,  113,  113,   59,   47,  113,  113,

      113,  113,  113,   54,  113,  113,   25,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,   37,  113,  113,
      113,   96,   43,    0,  116,  116,  116,    0,    0,  117,
      115,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
       57,   51,  113,  113,   12,   15,  113,   56,   89,   73,
      113,  113,  113,   85,  113,   55,  113,   24,   26,   29,
       32,  113,  113,   34,  113,   35,  113,  113,  113,  113,
      113,  113,  113,    0,  116,  113,  113,  113,   92,  113,

      113,   77,   83,  113,  113,  113,   58,  113,  113,  113,
      113,  113,  113,  113,   71,  113,  113,  113,  113,  113,
      113,  113,  113,  110,  111,  109,   10,  113,  113,  113,
      113,   86,  113,  113,  113,   81,  113,  113,  113,  113,
       36,  113,   50,  113,  113,   64,  113,  113,  113,  113,
      113,  113,   72,  113,   27,  113,   33,   95,  113,  113,
       80,  113,  113,  113,  113,  113,  113,    9,  113,  113,
      113,  113,  113,   44,   23,   66,  113,  107,  113,  113,
       38,   40,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,   78,  113,  113,  113,  113,  113,  113,  113,

      113,  113,  113,   75,   76,  113,  108,  113,  113,   49,
      113,   99,   65,  113,  113,  113,  113,  113,   70,   82,
       28,  113,   42,  113,   88,  105,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,   30,   69,  113,  113,
        0,  113,  113,   79,  113,   91,  113,  113,  102,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,   74,
        0,  113,   84,   41,  113,  113,  113,  113,  113,   98,
      113,   97,   87,   68,  113,  113,  113,   90,  113,  113,
      113,  113,  112,  113,  113,  113,  113,  113,  113,  100,
      113,  106,  113,  113,  113,  113,  113,  113,  113,  113,

      113,  113,   61,  113,  113,  113,  113,  113,  113,   60,
      113,  113,  104,  113,   31,  113,  101,  113,  113,  113,
      113,  113,  113,  113,  103,  113,   67,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
       22,   23,   22,   24,   22,   22,   22,   25,   26,   27,
       28,   29,   30,    1,   31,   32,   33,   31,   34,   35,
       36,   36,   37,   38,   36,   39,   36,   36,   36,   40,
       36,   36,   36,   36,   41,   36,   36,   42,   36,   36,
       43,   44,   45,   46,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   36,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[77] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    3,    1,    4,    1,    1,    1,    1,    5,    1,
        6,    6,    6,    6,    2,    1,    1,    1,    1,    1,
        7,    7,    7,    7,    7,    8,    8,    8,    8,    8,
        8,    8,    1,    1,    1,    1,    8,    7,    7,    7,
        7,    7,    7,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[737] =
    {   0,
        0,    0,  254, 2603, 2603, 2603, 2603, 2603,  219,   70,
     2603, 2603,   50,   69,  201, 2603, 2603,  199,   65, 2603,
       66,   64,   76,   96,   79,   80, 2603,   97,  194,   61,
     2603,   81,   88,  116, 2603, 2603,  183,  132,  115,   87,
      143,  147,  131,  148,  156,  160,  121,  164,  136,  203,
      204,  206,  208,  212,  224, 2603,   88, 2603, 2603, 2603,
      101, 2603,  184, 2603, 2603, 2603, 2603,  182,  174, 2603,
     2603, 2603, 2603, 2603, 2603,  159,  259, 2603, 2603, 2603,
      298,  339,  218,  247,  151,    0,    0, 2603, 2603, 2603,
      116, 2603, 2603, 2603,  111,  111,  149,  106,  213,  186,

       85, 2603,  233,  237,  232,  396,  221,  240,  241,  242,
      265,  298,  313,  306,  318,  319,  323,  315,  316,  334,
      331,  363,  364,  372,  328,  374,  375,  390,  391,  392,
      393,  400,  409,  401,  394,  411,  398,  416,  424,  431,
      399,  458,  459,  463,  466,  465,  468,  469,  475,  470,
      476,  478,  487,  491, 2603, 2603, 2603, 2603,  527,  517,
      556,  541,  546,  530,  483,  595,    0,  601,  403, 2603,
     2603,    0,  533,  243, 2603,  108,  498,  550,  589,  596,
      600,  618,  571,  611,  624,  620,  645,  517,  648,  652,
      654,  663,  665,  497,  664,  667,  671,  672,  673,  675,

      680,  683,  682,  684,  705,  692,  695,  708,  710,  720,
      723,  731,  738,  508,  735,  739,  741,  743,  744,  747,
      754,  748,  756,  763,  765,  766,  767,  771,  784,  774,
      786,  787,  793,  794,  799,  803,  806,  805,  809,  810,
      812,  814,  821,  827,  833,  834,  836,  837,  838,  839,
      855,  860,  875,  889,  880,  899,  907,  905,  910,  953,
      941,  997,  860,  866,  883,  881,  876,  970,  945,  927,
     1003,  946, 1006, 1011, 1012, 1014,  940, 1013, 1016, 1018,
     1015, 1021,  943, 1022, 1023, 1024, 1033, 1034, 1040, 1041,
     1042, 1043, 1051, 1050, 1058, 1071, 1059, 1076, 1078, 1079,

     1082, 1086, 1087, 1094, 1099, 1102, 1103, 1104, 1106, 1105,
     1107, 1110, 1111, 1114, 1123, 1127, 1130, 1129, 1135, 1136,
     1139, 1140, 1142, 1147, 1148, 1155, 1151, 1164, 1168, 1171,
     1172, 1173, 1174, 1184, 1191, 1194, 1200, 1203, 1204, 1207,
     1209, 1211, 1217, 1222,    0, 1212, 1259, 1249,    0, 1257,
     1299, 1236, 1303, 1237, 1241, 1242, 1265, 1282, 1286, 1274,
     1293, 1319, 1320, 1321, 1324, 1323, 1326, 1328, 1341, 1343,
     1344, 1346, 1347, 1350, 1352, 1353, 1356, 1363, 1365, 1372,
     1374, 1376, 1382, 1387, 1392, 1393, 1395, 1394, 1398, 1402,
     1403, 1404, 1405, 1413, 1414, 1425, 1415, 1430, 1431, 1433,

     1437, 1438, 1448, 1449, 1455, 1457, 1458, 1461, 1460, 1465,
     1464, 1473, 1467, 1480, 1470, 1482, 1485, 1491, 1492, 1495,
     1511, 1513, 1515, 1523, 1547,    0, 1519, 1571, 1527, 1586,
     1576, 1549, 1541, 1566, 1572, 1601, 1554, 1605, 1606, 1611,
     1623, 1626, 1627, 1629, 1630, 1548, 1633, 1635, 1636, 1638,
     1642, 1645, 1648, 1655, 1654, 1658, 1660, 1663, 1667, 1664,
     1666, 1675, 1684, 1685, 1687, 1688, 1690, 1703, 1706, 1709,
     1711, 1713, 1714, 1715, 1716, 1718, 1724, 1726, 1733, 1737,
     1739, 1741, 1742, 1744, 1746, 1750, 1759, 1752, 1762, 1761,
     1765, 1767, 1768, 1773, 1806, 1777, 1774, 1778, 1780, 1787,

     1793, 1795, 1798, 1808, 1810, 1814, 1821, 1823, 1826, 1827,
     1831, 1839, 1842, 1843, 1844, 1847, 1849, 1859, 1862, 1865,
     1869, 1870, 1872, 1877, 1878, 1880, 1885, 1889, 1898, 1901,
     1904, 1905, 1906, 1909, 1910, 1914, 1917, 1921, 1925, 1930,
     1927, 1932, 1933, 1936, 1934, 1938, 1945, 1949, 1953, 1955,
     1960, 1957, 1964, 1973, 1970, 1976, 1980, 1981, 1983, 1985,
     1989, 1993, 1996, 2004, 2008, 2011, 2013, 2014, 2016, 2015,
     2019, 2021, 2020, 2023, 2026, 2039, 2041, 2042, 2043, 2048,
     2049, 2054, 2066, 2069, 2072, 2073, 2075, 2076, 2079, 2077,
     2078, 2081, 2082, 2084, 2088, 2100, 2105, 2106, 2109, 2110,

     2112, 2121, 2127, 2122, 2131, 2134, 2132, 2144, 2147, 2149,
     2150, 2152, 2156, 2157, 2160, 2162, 2165, 2168, 2172, 2180,
     2181, 2184, 2185, 2188, 2189, 2190, 2196, 2197, 2208, 2200,
     2209, 2212, 2215, 2217, 2225, 2227, 2228, 2233, 2230, 2237,
       96, 2235, 2243, 2232, 2253, 2256, 2262, 2263, 2273, 2278,
     2280, 2281, 2282, 2283, 2284, 2285, 2288, 2290, 2293, 2603,
       68, 2301, 2286, 2291, 2303, 2306, 2309, 2311, 2312, 2321,
     2331, 2334, 2339, 2341, 2342, 2343, 2350, 2349, 2354, 2351,
     2359, 2360, 2361, 2367, 2370, 2371, 2377, 2378, 2379, 2380,
     2382, 2386, 2388, 2389, 2399, 2401, 2405, 2407, 2411, 2414,

     2424, 2418, 2426, 2427, 2429, 2433, 2434, 2435, 2437, 2450,
     2452, 2457, 2458, 2461, 2462, 2473, 2463, 2478, 2481, 2483,
     2485, 2486, 2488, 2489, 2491, 2496, 2501, 2603, 2559, 2567,
     2574, 2578, 2579, 2587, 2590, 2594
    } ;

static yyconst short int yy_def[737] =
    {   0,
      728,    1,  728,  728,  728,  728,  728,  728,  728,  729,
      728,  728,  728,  728,  730,  728,  728,  728,  728,  728,
      728,  728,  728,  728,   24,  728,  728,  728,  728,  728,
      728,  731,  731,  731,  728,  728,  728,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  728,  728,  728,  728,  728,
      729,  728,  729,  728,  728,  728,  728,  730,  730,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  732,   25,  733,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  731,  728,  731,  734,

      730,  728,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  735,  732,  731,  728,
      728,  733,  731,  734,  728,  734,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,

      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  728,   77,  728,  728,  728,   81,  728,  735,  728,
      728,  728,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,

      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  728,  161,  259,  728,  728,  260,  348,  728,
      728,  728,  728,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,

      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  728,  728,  348,  728,  728,  728,  728,
      728,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  728,  728,  731,  731,  731,  731,  731,

      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,

      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      736,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  728,
      736,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,

      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,    0,  728,  728,
      728,  728,  728,  728,  728,  728
    } ;

static yyconst short int yy_nxt[2680] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   25,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   32,   32,   32,   32,   32,   32,   34,   32,
       32,   32,   35,    4,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   32,   46,   32,   32,   47,   32,
       48,   32,   49,   50,   51,   52,   53,   54,   55,   32,
       32,   32,   56,   57,   58,   59,   62,   64,   65,   66,
       71,  660,   76,   73,   77,   77,   77,   77,   94,   95,
       78,   96,   72,   74,   75,   79,   67,   96,   96,   86,

       86,   86,   86,   80,   87,   98,   89,   62,   88,  660,
      728,   98,   98,   63,   81,  155,   82,   82,   82,   82,
      728,   90,  100,   91,   92,   96,   96,  101,   69,   83,
      172,   96,   84,   84,   84,   98,   84,   85,  171,   98,
       98,   96,   96,  170,   63,   98,   96,   83,  728,   99,
      113,   84,   84,   96,   84,   98,   98,   96,   96,   96,
       98,  156,   84,  103,  104,   85,   96,   98,  105,  167,
       96,   98,   98,   98,   96,  110,  728,  158,  106,  111,
       98,  112,  135,  107,   98,   68,  728,  108,   98,  123,
      114,  124,  175,  157,  118,  119,  109,  115,  120,  138,

      125,  116,  139,  126,  117,  121,  127,  129,  122,  128,
      102,  136,  131,   96,   96,  137,   96,  130,   96,  132,
      133,   93,   96,   96,  134,   69,   70,   98,   98,  176,
       98,   96,   98,  165,   96,  165,   98,   98,  166,  166,
      166,  166,   96,   96,   69,   98,   60,   96,   98,  175,
       96,   96,   96,  728,  140,  141,   98,   98,  142,  143,
      147,   98,  728,  149,   98,   98,   98,  151,  150,  144,
      145,  153,  146,  152,  173,   96,  148,  728,  154,   77,
       77,   77,   77,   84,   84,   84,  176,   84,  728,   98,
      190,  179,  159,  160,  177,  160,  160,  160,  178,  728,

      191,  728,   84,   84,  728,   84,  192,  728,   96,  728,
      159,  160,  193,   84,  160,  160,   96,  160,  161,  161,
      161,  161,   98,   96,  194,   96,   96,  728,   96,   96,
       98,  162,  163,   96,  163,  163,  163,   98,   96,   98,
       98,   96,   98,   98,   96,  728,  728,   98,  728,  162,
      163,  728,   98,  163,  163,   98,  163,   81,   98,   82,
       82,   82,   82,  195,  196,  198,  199,  728,  202,  728,
      197,  203,   83,   96,   96,  164,  164,  164,  728,  164,
      201,  204,   96,  200,   96,   96,  205,   98,   98,  207,
       83,  728,  206,  211,  164,  164,   98,  164,   98,   98,

       96,   96,   96,   96,   96,  164,   96,  728,   96,   96,
       96,   96,  728,   96,   98,   98,   98,   98,   98,   96,
       98,   96,   98,   98,   98,   98,   96,   98,  209,  208,
      728,  728,  728,   98,   96,   98,  213,  212,  210,  728,
       98,   96,  728,  180,  181,  182,  183,  184,   98,  728,
      728,  185,  728,  214,  222,   98,  215,  216,  218,  186,
      187,  188,  217,  189,  232,  221,  224,  219,   96,   96,
      223,  225,  227,   96,  220,   96,   96,  226,   96,   96,
       96,  728,   98,   98,  228,   96,   96,   98,   96,   98,
       98,  229,   98,   98,   98,  230,  231,   96,  728,   98,

       98,   96,   98,  166,  166,  166,  166,   96,   96,  728,
      236,   98,  234,  237,  240,   98,  728,  728,   96,  233,
      241,   98,   98,  242,  238,  245,  239,   96,  728,  728,
      235,  243,   98,  248,  246,  244,  249,  728,  728,  247,
      728,   98,  252,   96,  252,  728,  251,  253,  253,  253,
      253,  160,  250,  160,  160,  160,  256,   98,  256,  264,
       96,  257,  257,  257,  257,  728,  164,  164,  164,  160,
      164,  279,  160,  160,   98,  160,  161,  161,  161,  161,
      163,   96,  163,  163,  163,  164,  164,  280,  164,  254,
      255,  263,  255,  255,  255,   98,  164,  728,  163,   96,

      728,  163,  163,  728,  163,  728,   96,  254,  255,  265,
       96,  255,  255,   98,  255,  166,  166,  166,  166,  260,
       98,   96,  273,  728,   98,  728,  728,  728,   96,  258,
       96,  258,  258,  258,   96,   98,  266,  261,  261,  261,
      262,  261,   98,  728,   98,  728,  728,  258,   98,  728,
      258,  258,  728,  258,  267,   96,  261,  261,   96,  261,
      268,  269,   96,  262,   96,  728,  270,  261,  271,   98,
      728,  276,   98,   96,   96,   96,   98,   96,   98,  272,
      274,   96,   96,   96,  275,   96,  728,   98,   98,   98,
       96,   98,   96,   96,   96,   98,   98,   98,  728,   98,

      277,  728,   96,  728,   98,   96,   98,   98,   98,  281,
      278,  285,  283,  284,  287,   96,   98,  282,   96,   98,
       96,  728,  288,  728,  728,  286,  728,  293,  728,   98,
       96,  296,   98,   96,   98,  289,  728,  290,  294,  291,
      292,   96,  295,  299,   98,   96,  300,   98,   96,   96,
      301,   96,  297,   96,   96,   98,  302,   96,   96,   98,
      298,  303,   98,   98,   96,   98,   96,   98,   98,  728,
      312,   98,   98,   96,  305,   96,   96,   96,   98,  304,
       98,   96,  306,  316,   96,  307,  728,   98,  728,   98,
       98,   98,  728,  728,   96,   98,   96,   96,   98,  311,

      308,  314,  309,   96,   96,  313,  310,  315,   98,   96,
       98,   98,  728,   96,  728,   96,   96,   98,   98,   96,
       96,  728,   96,   98,   96,  319,  320,   98,  318,   98,
       98,   96,  317,   98,   98,  321,   98,   96,   98,  322,
      728,  728,  728,   96,   96,   98,   96,   96,   96,   96,
      326,   98,  323,  728,  325,  328,  324,   98,   98,  331,
       98,   98,   98,   98,  728,   96,  728,  329,  327,  728,
       96,  728,  334,  728,  728,  330,   96,  332,  333,   98,
      253,  253,  253,  253,   98,  340,   96,  339,  341,  337,
       98,   96,  335,   96,  336,  253,  253,  253,  253,  728,

       98,  338,  728,  728,  343,   98,  343,   98,  728,  344,
      344,  344,  344,  342,  255,  728,  255,  255,  255,  257,
      257,  257,  257,  728,  354,  728,  728,  257,  257,  257,
      257,  357,  255,  728,  356,  255,  255,   96,  255,  258,
      728,  258,  258,  258,  345,  355,  346,  346,  346,  347,
       96,   98,  728,   96,  728,   96,   96,  258,  728,  728,
      258,  258,  345,  258,   98,  346,  346,   98,  346,   98,
       98,  728,  347,  348,  348,  348,  348,  261,  261,  261,
       96,  261,  360,  348,  348,  348,  348,  349,  728,  350,
      350,  350,  351,  368,   98,  728,  261,  261,  374,  261,

      348,  348,  348,  348,  348,  349,  362,  261,  350,  350,
      359,  350,  352,   96,  352,  351,   96,  353,  353,  353,
      353,   96,   96,   96,   96,   96,   96,   98,   96,  358,
       98,   96,   96,   96,   96,   98,   98,   98,   98,   98,
       98,  728,   98,   96,   96,   98,   98,   98,   98,  728,
       96,   96,   96,   96,  361,  363,  728,   98,   98,  728,
       96,   96,  728,  369,   98,   98,   98,   98,   96,   96,
      365,  375,  373,  372,   98,   98,  364,  366,  367,  370,
      371,   96,   98,   98,  376,  728,   96,  728,   96,   96,
      377,  728,   96,  728,  728,   98,   96,   96,  380,  381,

       98,  382,   98,   98,   96,  378,   98,  379,  383,   96,
       98,   98,   96,   96,   96,   96,   96,   96,   98,  384,
       96,   96,  728,   98,   96,  385,   98,   98,   98,   98,
       98,   98,  397,   96,   98,   98,  386,   96,   98,   96,
       96,  389,  728,  387,  390,   96,   96,   98,  388,   96,
       96,   98,   96,   98,   98,  728,  395,   96,   96,   98,
       98,   96,  391,   98,   98,   96,   98,  396,  393,  394,
      392,   98,   98,  728,   96,   98,  398,  400,   96,   98,
      401,   96,   96,   96,   96,  728,  728,  399,   98,  728,
      402,  728,   98,  728,   96,   98,   98,   98,   98,  408,

      403,   96,  728,  405,   96,  406,  410,  404,   98,  728,
       96,  411,  407,   96,   96,   98,  409,   96,   98,   96,
      413,   96,  415,  416,   98,  728,  728,   98,   98,  728,
      414,   98,  728,   98,  417,   98,  412,  344,  344,  344,
      344,  728,  344,  344,  344,  344,  346,   96,  346,  346,
      346,   96,   96,  419,  418,  728,  353,  353,  353,  353,
      728,   98,  423,  422,  346,   98,   98,  346,  346,  420,
      346,  728,  421,  728,  424,   96,  424,  728,  728,  425,
      425,  425,  425,  426,   96,  427,  427,  427,  428,   98,
      728,  350,   96,  350,  350,  350,   96,  433,   98,  432,

      728,  426,  728,   96,  427,  427,   98,  427,  728,  350,
       98,  428,  350,  350,  429,  350,  429,   98,  434,  430,
      430,  430,  430,  353,  353,  353,  353,  728,  435,   96,
       96,   96,  437,   96,   96,  728,   96,  431,   96,  431,
      431,  431,  438,   98,   98,   98,  443,   98,   98,  436,
       98,   96,   98,   96,   96,  431,   96,   96,  431,  431,
       96,  431,   96,   96,  728,   98,   96,   98,   98,  728,
       98,   98,  441,   96,   98,   96,   98,   98,  440,  442,
       98,  728,   96,  439,   96,  728,   96,   98,  445,   98,
      446,  444,   96,  449,  447,  448,   98,   96,   98,  452,

       98,  453,   96,   96,   96,   96,   98,  450,   96,  454,
      451,   98,   96,   96,   96,   96,   98,   98,   98,   98,
      728,  456,   98,   96,   96,   96,   98,   98,   98,   98,
      728,  728,  455,  458,  457,   96,  728,   98,   98,   98,
       96,   96,  728,   96,  461,  459,  462,   96,   96,   98,
      460,  467,  728,  465,   98,   98,  463,   98,   96,   96,
      464,   98,   98,  466,  728,   96,  469,   96,   96,  476,
       96,   96,   98,   98,   96,   96,  470,   96,  468,   98,
       96,   98,   98,   96,   98,   98,  728,  474,   98,   98,
       96,   98,   96,  471,   98,   96,  728,   98,  472,  728,

      473,   96,   96,  728,   98,   96,   98,  728,  728,   98,
      477,  479,  480,  475,  481,   98,   98,  478,  728,   98,
      483,   96,  482,   96,  486,   96,  728,  485,  728,  728,
      728,  488,  484,  728,  728,   98,  489,   98,  728,   98,
      487,  728,  491,  425,  425,  425,  425,  430,  430,  430,
      430,   96,  490,  427,  728,  427,  427,  427,   96,   96,
      493,  728,  728,  728,   96,   98,  492,  425,  425,  425,
      425,  427,   98,   98,  427,  427,   96,  427,   98,  728,
      728,  346,   96,  346,  346,  346,  494,  728,  494,  728,
       98,  495,  495,  495,  495,  510,   98,  728,  728,  346,

      496,  497,  346,  346,  728,  346,  430,  430,  430,  430,
      431,   96,  431,  431,  431,   96,   96,  728,  499,  501,
      350,   96,  350,  350,  350,   98,  498,  728,  431,   98,
       98,  431,  431,   96,  431,   98,   96,   96,  350,   96,
       96,  350,  350,   96,  350,   96,   96,   98,   96,  507,
       98,   98,   96,   98,   98,   96,  500,   98,   96,   98,
       98,  728,   98,  502,   96,   96,   98,  728,   96,   98,
       96,  503,   98,   96,   96,  504,   96,   96,   98,   98,
      511,  509,   98,  505,   98,   96,  506,   98,   98,  728,
       98,   98,  508,  515,   96,   96,  512,   96,   96,   98,

       96,  513,  514,  516,  517,  518,  728,  519,   98,   98,
      524,   98,   98,   96,   98,  520,   96,  521,  526,   96,
      522,   96,  523,   96,   96,   96,   96,   98,   96,  527,
       98,  728,  525,   98,   96,   98,   96,   98,   98,   98,
       98,  728,   98,   96,  728,  528,  529,   96,   98,   96,
       98,   96,   96,  728,   96,  530,   96,   98,  531,  728,
       96,   98,   96,   98,  532,   98,   98,  534,   98,   96,
       98,   96,   96,  535,   98,   96,   98,   96,   96,  533,
      728,  728,  728,   98,   96,   98,   98,   96,   96,   98,
       96,   98,   98,  495,  495,  495,  495,   96,   98,  536,

      728,   98,   98,   96,   98,   96,  539,  537,   96,  728,
      538,   98,  542,  540,  541,  728,  545,   98,   96,   98,
       96,  547,   98,  543,   96,  544,  495,  495,  495,  495,
      728,   96,   98,   96,   98,  549,   96,   96,   98,  548,
      427,   96,  427,  427,  427,   98,  546,   98,  550,   96,
       98,   98,   96,   96,   96,   98,  728,   96,  427,   96,
      728,  427,  427,   98,  427,  553,   98,   98,   98,   96,
      551,   98,   96,   98,  552,   96,  555,  728,  554,   96,
       96,  557,   96,   98,  728,  556,   98,   96,   96,   98,
       96,  558,  728,   98,   98,   96,   98,  559,  560,   96,

      562,   98,   98,  728,   98,  561,  563,  728,   96,   98,
      564,   96,  728,   98,   96,   96,   96,  565,  728,   96,
       96,  568,   98,  569,   96,   98,  566,   96,   98,   98,
       98,   96,  567,   98,   98,   96,  728,   96,   98,  728,
       96,   98,   96,   96,   96,   98,   96,  728,   96,   98,
      572,   98,  570,  573,   98,   96,   98,   98,   98,   96,
       98,  571,   98,   96,  728,   96,  577,   96,  728,   98,
       96,  728,  575,   98,   96,  576,  574,   98,  580,   98,
       96,   98,  581,   96,   98,  578,   96,  582,   98,  579,
       96,   96,  583,   96,   98,   96,  728,   98,  728,   96,

       98,  585,  728,   96,   98,   98,   96,   98,  584,   98,
      590,  588,  589,   98,   96,  587,  592,   98,   96,  586,
       98,   96,  591,   96,   96,   96,   96,  728,   98,   96,
       96,   96,   98,   96,  593,   98,   96,   98,   98,   98,
       98,  594,  596,   98,   98,   98,  595,   98,  728,   96,
       98,   96,   96,   96,  728,  728,  598,  601,   96,   96,
      728,  597,  603,   98,   96,   98,   98,   98,  599,  608,
      728,  607,   98,   98,  602,  606,   96,  600,   98,   96,
      604,  728,   96,   96,  605,   96,   96,   96,   96,   96,
       98,   96,   96,   98,   96,  609,   98,   98,   96,   98,

       98,   98,   98,   98,  611,   98,   98,  610,   98,  728,
       96,  728,   98,  728,  728,   96,   96,  612,  614,   96,
       96,  616,   96,  619,   98,  617,  728,  621,  622,   98,
       98,   96,   96,   98,   98,  623,   98,   96,  615,  613,
      618,   96,   96,  620,   96,   98,   98,  728,  624,  728,
      728,   98,  626,  627,   96,   98,   98,   96,   98,   96,
       96,  629,   96,  630,  628,  625,   96,   96,   98,  728,
       96,   98,   96,   98,   98,   96,   98,  641,   96,  728,
       98,   98,   96,  631,   98,  633,   98,  728,  632,   98,
       96,   96,   98,  634,   96,   96,   98,  728,   96,   96,

       96,  636,  635,  637,   98,   98,   96,   96,   98,   98,
       96,  638,   98,   98,   98,  728,  728,  728,   96,   96,
       98,   98,   96,  639,   98,   96,  643,   96,  642,  640,
      644,  645,   98,   98,  646,   96,   98,   96,   96,   98,
       96,   98,   96,   96,  728,   96,  728,   96,  728,   98,
      648,   98,   98,   96,   98,  728,   98,   98,  649,   98,
      651,   98,  647,   96,  654,  728,   96,   98,  728,  650,
      728,  728,   96,   96,  652,  728,  656,   98,  653,  657,
       98,  662,  658,   96,  659,  655,   98,   98,   96,  663,
       96,   96,   96,   96,   96,   96,   96,   98,   96,  664,

       96,   96,   98,   96,   98,   98,   98,   98,   98,   98,
       98,   96,   98,   96,   98,   98,   96,   98,  728,   96,
      665,   96,   96,  666,  728,   98,  728,   98,  728,  728,
       98,   96,  669,   98,  674,   98,   98,  672,  675,  677,
      667,   96,  676,  668,   96,   98,  670,  678,  671,   96,
      673,   96,   96,   96,  728,   98,  681,  680,   98,   96,
       96,   96,  728,   98,   96,   98,   98,   98,  679,   96,
       96,   96,  683,   98,   98,   98,  682,   96,   98,  728,
       96,   96,  684,   98,   98,   98,  728,   96,   96,   96,
       96,   98,   96,  685,   98,   98,   96,  687,   96,   96,

      689,   98,   98,   98,   98,  728,   98,  686,  688,   96,
       98,   96,   98,   98,  690,   96,  728,   96,  728,  691,
      693,   96,  695,   98,   96,   98,  728,  728,   96,   98,
      692,   98,  694,  697,   96,   98,   96,   96,   98,   96,
      696,  698,   98,   96,   96,   96,  699,   96,   98,  700,
       98,   98,  701,   98,  703,  728,  728,   98,   98,   98,
       96,   98,   96,  728,  702,  728,  706,   96,   96,  704,
      705,   96,   96,   96,   98,  708,   98,  707,  728,  709,
      728,   98,   98,   96,  714,   98,   98,   98,   96,  715,
      711,   96,  710,   96,  712,   96,   96,   98,   96,   96,

      728,   96,   98,  728,  713,   98,   96,   98,  718,   98,
       98,   96,   98,   98,  716,   98,  728,  717,  728,  728,
       98,  728,  728,  728,  719,   98,  728,  728,  728,  728,
      728,  728,  728,  728,  722,  726,  724,  728,  728,  728,
      728,  728,  727,  720,  721,  728,  728,  728,  728,  728,
      723,  728,  728,  728,  728,  728,  728,  728,  725,   61,
       61,   61,   61,   61,   61,   61,   61,   68,   68,  728,
       68,   68,   68,   68,   68,   97,  728,  728,  728,   97,
       97,   97,  168,  168,  168,  169,  169,  174,  174,  174,
      174,  174,  174,  174,  174,  259,  259,  661,  728,  661,

      661,  661,    3,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728
    } ;

static yyconst short int yy_chk[2680] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   10,   13,   13,   14,
       19,  661,   22,   21,   22,   22,   22,   22,   30,   30,
       23,   32,   19,   21,   21,   23,   14,   40,   33,   25,

       25,   25,   25,   23,   26,   32,   28,   61,   26,  641,
      176,   40,   33,   10,   24,   57,   24,   24,   24,   24,
       25,   28,   34,   28,   28,   39,   34,   34,  101,   24,
       98,   47,   24,   24,   24,   96,   24,   24,   95,   39,
       34,   43,   38,   91,   61,   47,   49,   24,   25,   33,
       40,   24,   24,   41,   24,   43,   38,   42,   44,   97,
       49,   57,   24,   38,   38,   24,   45,   41,   38,   85,
       46,   42,   44,   97,   48,   39,   69,   76,   38,   39,
       45,   39,   47,   38,   46,   69,   63,   38,   48,   43,
       41,   43,  100,   68,   42,   42,   38,   41,   42,   49,

       43,   41,   49,   44,   41,   42,   44,   45,   42,   44,
       37,   48,   46,   50,   51,   48,   52,   45,   53,   46,
       46,   29,   54,   99,   46,   68,   18,   50,   51,  100,
       52,  107,   53,   83,   55,   83,   54,   99,   83,   83,
       83,   83,  105,  103,   15,  107,    9,  104,   55,  174,
      108,  109,  110,    3,   50,   51,  105,  103,   51,   51,
       52,  104,    0,   53,  108,  109,  110,   54,   53,   51,
       51,   55,   51,   54,   99,  111,   52,    0,   55,   77,
       77,   77,   77,   84,   84,   84,  174,   84,    0,  111,
      107,  105,   77,   77,  103,   77,   77,   77,  104,    0,

      108,    0,   84,   84,    0,   84,  109,    0,  112,    0,
       77,   77,  110,   84,   77,   77,  114,   77,   81,   81,
       81,   81,  112,  113,  111,  118,  119,    0,  115,  116,
      114,   81,   81,  117,   81,   81,   81,  113,  125,  118,
      119,  121,  115,  116,  120,    0,    0,  117,    0,   81,
       81,    0,  125,   81,   81,  121,   81,   82,  120,   82,
       82,   82,   82,  112,  113,  115,  116,    0,  119,    0,
      114,  119,   82,  122,  123,   82,   82,   82,    0,   82,
      118,  119,  124,  117,  126,  127,  120,  122,  123,  121,
       82,    0,  120,  125,   82,   82,  124,   82,  126,  127,

      128,  129,  130,  131,  135,   82,  106,    0,  137,  141,
      132,  134,    0,  169,  128,  129,  130,  131,  135,  133,
      106,  136,  137,  141,  132,  134,  138,  169,  123,  122,
        0,    0,    0,  133,  139,  136,  127,  126,  124,    0,
      138,  140,    0,  106,  106,  106,  106,  106,  139,    0,
        0,  106,    0,  128,  135,  140,  129,  130,  133,  106,
      106,  106,  132,  106,  141,  134,  137,  133,  142,  143,
      136,  138,  139,  144,  133,  146,  145,  138,  147,  148,
      150,    0,  142,  143,  140,  149,  151,  144,  152,  146,
      145,  140,  147,  148,  150,  140,  140,  153,    0,  149,

      151,  154,  152,  165,  165,  165,  165,  194,  177,    0,
      144,  153,  143,  144,  145,  154,    0,    0,  214,  142,
      146,  194,  177,  147,  144,  150,  144,  188,    0,    0,
      143,  148,  214,  152,  150,  149,  152,    0,    0,  151,
        0,  188,  159,  173,  159,    0,  154,  159,  159,  159,
      159,  160,  153,  160,  160,  160,  162,  173,  162,  177,
      178,  162,  162,  162,  162,    0,  164,  164,  164,  160,
      164,  188,  160,  160,  178,  160,  161,  161,  161,  161,
      163,  183,  163,  163,  163,  164,  164,  188,  164,  161,
      161,  173,  161,  161,  161,  183,  164,    0,  163,  179,

        0,  163,  163,    0,  163,    0,  180,  161,  161,  178,
      181,  161,  161,  179,  161,  166,  166,  166,  166,  168,
      180,  184,  183,    0,  181,    0,    0,    0,  182,  166,
      186,  166,  166,  166,  185,  184,  179,  168,  168,  168,
      168,  168,  182,    0,  186,    0,    0,  166,  185,    0,
      166,  166,    0,  166,  180,  187,  168,  168,  189,  168,
      180,  180,  190,  168,  191,    0,  181,  168,  182,  187,
        0,  186,  189,  192,  195,  193,  190,  196,  191,  182,
      184,  197,  198,  199,  185,  200,    0,  192,  195,  193,
      201,  196,  203,  202,  204,  197,  198,  199,    0,  200,

      187,    0,  206,    0,  201,  207,  203,  202,  204,  189,
      187,  193,  191,  192,  196,  205,  206,  190,  208,  207,
      209,    0,  197,    0,    0,  195,    0,  201,    0,  205,
      210,  204,  208,  211,  209,  198,    0,  199,  202,  200,
      200,  212,  203,  206,  210,  215,  207,  211,  213,  216,
      207,  217,  205,  218,  219,  212,  208,  220,  222,  215,
      205,  209,  213,  216,  221,  217,  223,  218,  219,    0,
      220,  220,  222,  224,  211,  225,  226,  227,  221,  210,
      223,  228,  212,  224,  230,  213,    0,  224,    0,  225,
      226,  227,    0,    0,  229,  228,  231,  232,  230,  219,

      216,  222,  217,  233,  234,  221,  218,  223,  229,  235,
      231,  232,    0,  236,    0,  238,  237,  233,  234,  239,
      240,    0,  241,  235,  242,  227,  228,  236,  226,  238,
      237,  243,  225,  239,  240,  229,  241,  244,  242,  230,
        0,    0,    0,  245,  246,  243,  247,  248,  249,  250,
      235,  244,  231,    0,  234,  237,  233,  245,  246,  240,
      247,  248,  249,  250,    0,  251,    0,  238,  236,    0,
      263,    0,  243,    0,    0,  239,  264,  241,  242,  251,
      252,  252,  252,  252,  263,  249,  267,  248,  250,  246,
      264,  266,  244,  265,  245,  253,  253,  253,  253,    0,

      267,  247,    0,    0,  254,  266,  254,  265,  253,  254,
      254,  254,  254,  251,  255,    0,  255,  255,  255,  256,
      256,  256,  256,    0,  264,    0,  253,  257,  257,  257,
      257,  267,  255,    0,  266,  255,  255,  270,  255,  258,
      257,  258,  258,  258,  259,  265,  259,  259,  259,  259,
      277,  270,    0,  283,    0,  269,  272,  258,  257,    0,
      258,  258,  259,  258,  277,  259,  259,  283,  259,  269,
      272,    0,  259,  260,  260,  260,  260,  261,  261,  261,
      268,  261,  270,  260,  260,  260,  260,  260,    0,  260,
      260,  260,  260,  277,  268,    0,  261,  261,  283,  261,

      260,  260,  260,  260,  260,  260,  272,  261,  260,  260,
      269,  260,  262,  271,  262,  260,  273,  262,  262,  262,
      262,  274,  275,  278,  276,  281,  279,  271,  280,  268,
      273,  282,  284,  285,  286,  274,  275,  278,  276,  281,
      279,    0,  280,  287,  288,  282,  284,  285,  286,    0,
      289,  290,  291,  292,  271,  273,    0,  287,  288,    0,
      294,  293,    0,  278,  289,  290,  291,  292,  295,  297,
      275,  284,  282,  281,  294,  293,  274,  275,  276,  279,
      280,  296,  295,  297,  285,    0,  298,    0,  299,  300,
      287,    0,  301,    0,    0,  296,  302,  303,  292,  293,

      298,  294,  299,  300,  304,  290,  301,  291,  295,  305,
      302,  303,  306,  307,  308,  310,  309,  311,  304,  296,
      312,  313,    0,  305,  314,  297,  306,  307,  308,  310,
      309,  311,  312,  315,  312,  313,  298,  316,  314,  318,
      317,  301,    0,  299,  302,  319,  320,  315,  300,  321,
      322,  316,  323,  318,  317,    0,  310,  324,  325,  319,
      320,  327,  305,  321,  322,  326,  323,  311,  307,  309,
      306,  324,  325,    0,  328,  327,  313,  317,  329,  326,
      318,  330,  331,  332,  333,    0,    0,  315,  328,    0,
      319,    0,  329,    0,  334,  330,  331,  332,  333,  325,

      320,  335,    0,  322,  336,  323,  327,  321,  334,    0,
      337,  328,  324,  338,  339,  335,  326,  340,  336,  341,
      330,  342,  332,  333,  337,    0,    0,  338,  339,    0,
      331,  340,    0,  341,  334,  342,  329,  343,  343,  343,
      343,    0,  344,  344,  344,  344,  346,  354,  346,  346,
      346,  355,  356,  337,  336,  344,  352,  352,  352,  352,
        0,  354,  342,  341,  346,  355,  356,  346,  346,  338,
      346,    0,  340,  344,  347,  357,  347,    0,    0,  347,
      347,  347,  347,  348,  360,  348,  348,  348,  348,  357,
        0,  350,  358,  350,  350,  350,  359,  356,  360,  355,

        0,  348,    0,  361,  348,  348,  358,  348,    0,  350,
      359,  348,  350,  350,  351,  350,  351,  361,  357,  351,
      351,  351,  351,  353,  353,  353,  353,    0,  358,  362,
      363,  364,  360,  366,  365,    0,  367,  353,  368,  353,
      353,  353,  361,  362,  363,  364,  366,  366,  365,  359,
      367,  369,  368,  370,  371,  353,  372,  373,  353,  353,
      374,  353,  375,  376,    0,  369,  377,  370,  371,    0,
      372,  373,  364,  378,  374,  379,  375,  376,  363,  365,
      377,    0,  380,  362,  381,    0,  382,  378,  368,  379,
      369,  367,  383,  372,  370,  371,  380,  384,  381,  375,

      382,  376,  385,  386,  388,  387,  383,  373,  389,  378,
      374,  384,  390,  391,  392,  393,  385,  386,  388,  387,
        0,  381,  389,  394,  395,  397,  390,  391,  392,  393,
        0,    0,  380,  383,  382,  396,    0,  394,  395,  397,
      398,  399,    0,  400,  386,  384,  387,  401,  402,  396,
      385,  392,    0,  390,  398,  399,  388,  400,  403,  404,
      389,  401,  402,  391,    0,  405,  395,  406,  407,  404,
      409,  408,  403,  404,  411,  410,  396,  413,  394,  405,
      415,  406,  407,  412,  409,  408,    0,  402,  411,  410,
      414,  413,  416,  399,  415,  417,    0,  412,  400,    0,

      401,  418,  419,    0,  414,  420,  416,    0,    0,  417,
      405,  408,  409,  403,  410,  418,  419,  406,    0,  420,
      412,  421,  411,  422,  415,  423,    0,  414,    0,    0,
        0,  417,  413,    0,    0,  421,  417,  422,    0,  423,
      416,    0,  420,  424,  424,  424,  424,  429,  429,  429,
      429,  433,  419,  427,    0,  427,  427,  427,  446,  432,
      422,    0,    0,    0,  437,  433,  421,  425,  425,  425,
      425,  427,  446,  432,  427,  427,  434,  427,  437,    0,
        0,  425,  435,  425,  425,  425,  428,    0,  428,    0,
      434,  428,  428,  428,  428,  446,  435,    0,    0,  425,

      432,  433,  425,  425,    0,  425,  430,  430,  430,  430,
      431,  436,  431,  431,  431,  438,  439,    0,  435,  437,
      430,  440,  430,  430,  430,  436,  434,    0,  431,  438,
      439,  431,  431,  441,  431,  440,  442,  443,  430,  444,
      445,  430,  430,  447,  430,  448,  449,  441,  450,  443,
      442,  443,  451,  444,  445,  452,  436,  447,  453,  448,
      449,    0,  450,  438,  455,  454,  451,    0,  456,  452,
      457,  439,  453,  458,  460,  440,  461,  459,  455,  454,
      447,  445,  456,  441,  457,  462,  442,  458,  460,    0,
      461,  459,  444,  451,  463,  464,  448,  465,  466,  462,

      467,  449,  450,  452,  453,  454,    0,  454,  463,  464,
      457,  465,  466,  468,  467,  454,  469,  454,  459,  470,
      455,  471,  456,  472,  473,  474,  475,  468,  476,  460,
      469,    0,  458,  470,  477,  471,  478,  472,  473,  474,
      475,    0,  476,  479,    0,  463,  464,  480,  477,  481,
      478,  482,  483,    0,  484,  467,  485,  479,  471,    0,
      486,  480,  488,  481,  472,  482,  483,  475,  484,  487,
      485,  490,  489,  477,  486,  491,  488,  492,  493,  473,
        0,    0,    0,  487,  497,  490,  489,  496,  498,  491,
      499,  492,  493,  494,  494,  494,  494,  500,  497,  482,

        0,  496,  498,  501,  499,  502,  487,  483,  503,    0,
      485,  500,  490,  488,  489,    0,  493,  501,  504,  502,
      505,  497,  503,  491,  506,  492,  495,  495,  495,  495,
        0,  507,  504,  508,  505,  500,  509,  510,  506,  498,
      495,  511,  495,  495,  495,  507,  496,  508,  501,  512,
      509,  510,  513,  514,  515,  511,    0,  516,  495,  517,
        0,  495,  495,  512,  495,  506,  513,  514,  515,  518,
      504,  516,  519,  517,  505,  520,  509,    0,  508,  521,
      522,  511,  523,  518,    0,  510,  519,  524,  525,  520,
      526,  512,    0,  521,  522,  527,  523,  513,  514,  528,

      517,  524,  525,    0,  526,  516,  518,    0,  529,  527,
      518,  530,    0,  528,  531,  532,  533,  519,    0,  534,
      535,  522,  529,  523,  536,  530,  520,  537,  531,  532,
      533,  538,  521,  534,  535,  539,    0,  541,  536,    0,
      540,  537,  542,  543,  545,  538,  544,    0,  546,  539,
      530,  541,  528,  531,  540,  547,  542,  543,  545,  548,
      544,  529,  546,  549,    0,  550,  537,  552,    0,  547,
      551,    0,  534,  548,  553,  535,  533,  549,  540,  550,
      555,  552,  542,  554,  551,  538,  556,  544,  553,  539,
      557,  558,  545,  559,  555,  560,    0,  554,    0,  561,

      556,  548,    0,  562,  557,  558,  563,  559,  547,  560,
      553,  551,  552,  561,  564,  550,  555,  562,  565,  549,
      563,  566,  554,  567,  568,  570,  569,    0,  564,  571,
      573,  572,  565,  574,  556,  566,  575,  567,  568,  570,
      569,  559,  562,  571,  573,  572,  560,  574,    0,  576,
      575,  577,  578,  579,    0,    0,  564,  566,  580,  581,
        0,  563,  569,  576,  582,  577,  578,  579,  564,  574,
        0,  573,  580,  581,  567,  572,  583,  565,  582,  584,
      570,    0,  585,  586,  571,  587,  588,  590,  591,  589,
      583,  592,  593,  584,  594,  577,  585,  586,  595,  587,

      588,  590,  591,  589,  580,  592,  593,  579,  594,    0,
      596,    0,  595,    0,    0,  597,  598,  583,  585,  599,
      600,  587,  601,  590,  596,  588,    0,  592,  593,  597,
      598,  602,  604,  599,  600,  594,  601,  603,  586,  584,
      589,  605,  607,  591,  606,  602,  604,    0,  595,    0,
        0,  603,  597,  598,  608,  605,  607,  609,  606,  610,
      611,  600,  612,  601,  599,  596,  613,  614,  608,    0,
      615,  609,  616,  610,  611,  617,  612,  617,  618,    0,
      613,  614,  619,  602,  615,  606,  616,    0,  603,  617,
      620,  621,  618,  608,  622,  623,  619,    0,  624,  625,

      626,  611,  609,  614,  620,  621,  627,  628,  622,  623,
      630,  615,  624,  625,  626,    0,    0,    0,  629,  631,
      627,  628,  632,  616,  630,  633,  620,  634,  618,  616,
      622,  623,  629,  631,  624,  635,  632,  636,  637,  633,
      639,  634,  644,  638,    0,  642,    0,  640,    0,  635,
      628,  636,  637,  643,  639,    0,  644,  638,  629,  642,
      631,  640,  627,  645,  634,    0,  646,  643,    0,  630,
        0,    0,  647,  648,  632,    0,  636,  645,  633,  638,
      646,  642,  639,  649,  640,  635,  647,  648,  650,  643,
      651,  652,  653,  654,  655,  656,  663,  649,  657,  645,

      658,  664,  650,  659,  651,  652,  653,  654,  655,  656,
      663,  662,  657,  665,  658,  664,  666,  659,    0,  667,
      647,  668,  669,  648,    0,  662,    0,  665,    0,    0,
      666,  670,  652,  667,  657,  668,  669,  655,  657,  659,
      650,  671,  658,  651,  672,  670,  653,  662,  654,  673,
      656,  674,  675,  676,    0,  671,  667,  666,  672,  678,
      677,  680,    0,  673,  679,  674,  675,  676,  665,  681,
      682,  683,  669,  678,  677,  680,  668,  684,  679,    0,
      685,  686,  671,  681,  682,  683,    0,  687,  688,  689,
      690,  684,  691,  675,  685,  686,  692,  677,  693,  694,

      679,  687,  688,  689,  690,    0,  691,  676,  677,  695,
      692,  696,  693,  694,  680,  697,    0,  698,    0,  681,
      684,  699,  686,  695,  700,  696,    0,    0,  702,  697,
      682,  698,  685,  688,  701,  699,  703,  704,  700,  705,
      687,  689,  702,  706,  707,  708,  691,  709,  701,  693,
      703,  704,  694,  705,  696,    0,    0,  706,  707,  708,
      710,  709,  711,    0,  695,    0,  699,  712,  713,  697,
      698,  714,  715,  717,  710,  701,  711,  700,    0,  702,
        0,  712,  713,  716,  708,  714,  715,  717,  718,  709,
      705,  719,  704,  720,  706,  721,  722,  716,  723,  724,

        0,  725,  718,    0,  707,  719,  726,  720,  714,  721,
      722,  727,  723,  724,  711,  725,    0,  712,    0,    0,
      726,    0,    0,    0,  716,  727,    0,    0,    0,    0,
        0,    0,    0,    0,  720,  724,  722,    0,    0,    0,
        0,    0,  726,  718,  719,    0,    0,    0,    0,    0,
      721,    0,    0,    0,    0,    0,    0,    0,  723,  729,
      729,  729,  729,  729,  729,  729,  729,  730,  730,    0,
      730,  730,  730,  730,  730,  731,    0,    0,    0,  731,
      731,  731,  732,  732,  732,  733,  733,  734,  734,  734,
      734,  734,  734,  734,  734,  735,  735,  736,    0,  736,

      736,  736,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  728,  728,  728,  728
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define INITIAL 0
#define YY_NO_UNPUT 1
#line 13 "lexer.l"
import "ecdefs"
#define YYLTYPE Location
#define YY_NEVER_INTERACTIVE 1    // Avoid calling isatty on eC File object

#include "grammar.h"

bool echoOn = true;
public void SetEchoOn(bool b) { echoOn = b; }

extern YYLTYPE type_yylloc;
extern YYLTYPE expression_yylloc;

extern File fileInput;
int preprocessor();
int comment();

void TESTTTT()
{
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   type_yylloc.end.charPos += yyleng;
   type_yylloc.end.pos += yyleng;
   expression_yylloc.end.charPos += yyleng;
   expression_yylloc.end.pos += yyleng;
}

#define YY_USER_ACTION  \
   TESTTTT();

   /*
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   */

#define YY_INPUT(buf,result,max_size) \
   result = fileInput.Read(buf, 1, max_size) \

YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
File fileStack[MAX_INCLUDE_DEPTH];
char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
public void SetSomeSourceFileStack(const char * fileName, int index) { strcpy(sourceFileStack[index], fileName); }
YYLTYPE locStack[MAX_INCLUDE_DEPTH];
AccessMode declModeStack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

#define uint _uint
default:

#line 1246 "lexer.ec"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 63 "lexer.l"



   yylloc.start = yylloc.end;
   type_yylloc.start = type_yylloc.end;
   expression_yylloc.start = expression_yylloc.end;


#line 1406 "lexer.ec"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 729 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2603 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 71 "lexer.l"
{ preprocessor(); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 72 "lexer.l"
{ comment(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 73 "lexer.l"
{ commentCPP(); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 75 "lexer.l"
{ return(AUTO); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 76 "lexer.l"
{ return(BREAK); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 77 "lexer.l"
{ return(CASE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 78 "lexer.l"
{ return(CHAR); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 79 "lexer.l"
{ return(CONST); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 80 "lexer.l"
{ return(CONTINUE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 81 "lexer.l"
{ return(DEFAULT); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 82 "lexer.l"
{ return(DO); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 83 "lexer.l"
{ return(DOUBLE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 84 "lexer.l"
{ return(ELSE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 85 "lexer.l"
{ return(ENUM); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 86 "lexer.l"
{ return(EXTERN); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 87 "lexer.l"
{ return(FLOAT); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 88 "lexer.l"
{ return(FOR); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 89 "lexer.l"
{ return(GOTO); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 90 "lexer.l"
{ return(IF); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 91 "lexer.l"
{ return(INT); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 92 "lexer.l"
{ return(UINT); }
	YY_BREAK
/* "uint16"            { return(UINT16); } */
/* "uint32"            { return(UINT32); } */
/* "bool"              { return(BOOL_TOKEN); } */
case 22:
YY_RULE_SETUP
#line 96 "lexer.l"
{ return(LONG); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 97 "lexer.l"
{ return(REGISTER); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 98 "lexer.l"
{ return(RETURN); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 99 "lexer.l"
{ return(SHORT); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 100 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 101 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 102 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 103 "lexer.l"
{ return(SIZEOF); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 104 "lexer.l"
{ return(ALIGNOF); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 105 "lexer.l"
{ return(BUILTIN_OFFSETOF); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 106 "lexer.l"
{ return(STATIC); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 107 "lexer.l"
{ return(THREAD); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 108 "lexer.l"
{ return(STRUCT); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 109 "lexer.l"
{ return(SWITCH); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 110 "lexer.l"
{ return(TYPEDEF); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 111 "lexer.l"
{ return(UNION); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 112 "lexer.l"
{ return(UNSIGNED); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 113 "lexer.l"
{ return(VOID); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 114 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 115 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 116 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 117 "lexer.l"
{ return(WHILE); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 119 "lexer.l"
{ return(PROPERTY); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "lexer.l"
{ return(SETPROP); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "lexer.l"
{ return(GETPROP); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "lexer.l"
{ return(ISPROPSET); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "lexer.l"
{ return(CLASS); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 124 "lexer.l"
{ return(THISCLASS); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 125 "lexer.l"
{ return(VIRTUAL); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 126 "lexer.l"
{ return(DELETE); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 127 "lexer.l"
{ return(NEWOP); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 128 "lexer.l"
{ return(NEW0OP); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 129 "lexer.l"
{ return(RENEW); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 130 "lexer.l"
{ return(RENEW0); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 131 "lexer.l"
{ return(IMPORT); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 132 "lexer.l"
{ return(DEFINE); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 133 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 134 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 135 "lexer.l"
{ return(VALIST); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 136 "lexer.l"
{ return(VAARG); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 137 "lexer.l"
{ return(BOOL); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 138 "lexer.l"
{ return(_BOOL); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 139 "lexer.l"
{ return(_COMPLEX); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 140 "lexer.l"
{ return(_IMAGINARY); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 141 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
/* "__attribute__".?"(("({D}|{L})*"))" { return(EXT_ATTRIB); } */
/* DID I MEAN? "__attribute__"" "*"(("" "*({D}|{L})*" "*("("({D}|{L})*(" "*","" "*({D}|{L})*)*" "*")")?" "*"))" { return(EXT_ATTRIB); } */
/*
 "__attribute_deprecated__"(" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute__"           (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute"             (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 */
/*
 [__attribute__] [spaces]
   [((] [spaces]
      [digits | letters] [spaces]
         ( [(]  [digits or letters or "]  ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces]  [)] )?
      [spaces]
      ( [,] [spaces]  [digits or letters]  [spaces]
         ( [(]  [digits or letters or "]
            ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces] [)]
         )? [spaces]
      )*
   [))]
 */
/* "__attribute__".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); } */
/* "__attribute".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); }*/
case 67:
YY_RULE_SETUP
#line 168 "lexer.l"
{ return ATTRIB_DEP; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 169 "lexer.l"
{ return ATTRIB; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 170 "lexer.l"
{ return __ATTRIB; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 172 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 173 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 174 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 175 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 176 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 177 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 178 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 179 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 180 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 181 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 182 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 183 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 184 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 185 "lexer.l"
{ return(CONST /*EXT_DECL*/); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 186 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 187 "lexer.l"
{ return(PUBLIC); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 188 "lexer.l"
{ return(PRIVATE); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 189 "lexer.l"
{ return(TYPED_OBJECT); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 190 "lexer.l"
{ return(ANY_OBJECT); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 191 "lexer.l"
{ return(_INCREF); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 192 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 193 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 194 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 195 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 196 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 197 "lexer.l"
{ return(TYPEOF); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 198 "lexer.l"
{ return(WATCH); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 199 "lexer.l"
{ return(STOPWATCHING); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 200 "lexer.l"
{ return(FIREWATCHERS); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 201 "lexer.l"
{ return(WATCHABLE); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 202 "lexer.l"
{ return(CLASS_DESIGNER); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 203 "lexer.l"
{ return(CLASS_NO_EXPANSION); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 204 "lexer.l"
{ return(CLASS_FIXED); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 205 "lexer.l"
{ return(CLASS_DEFAULT_PROPERTY); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 206 "lexer.l"
{ return(PROPERTY_CATEGORY); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 207 "lexer.l"
{ return(CLASS_DATA); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 208 "lexer.l"
{ return(CLASS_PROPERTY); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 209 "lexer.l"
{ return(SUBCLASS); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 210 "lexer.l"
{ return(NAMESPACE); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 211 "lexer.l"
{ return(DBTABLE); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 212 "lexer.l"
{ return(DBFIELD); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 213 "lexer.l"
{ return(DBINDEX); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 214 "lexer.l"
{ return(DATABASE_OPEN); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 216 "lexer.l"
{ return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); }  // ("::"|(({IDENT}"::")*)){IDENT}  { return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 218 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 220 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 221 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 222 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 224 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 225 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 226 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 228 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 229 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 230 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 232 "lexer.l"
{ return(STRING_LITERAL); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 233 "lexer.l"
{ return(WIDE_STRING_LITERAL); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 235 "lexer.l"
{ return(ELLIPSIS); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 236 "lexer.l"
{ return(RIGHT_ASSIGN); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 237 "lexer.l"
{ return(LEFT_ASSIGN); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 238 "lexer.l"
{ return(ADD_ASSIGN); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 239 "lexer.l"
{ return(SUB_ASSIGN); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 240 "lexer.l"
{ return(MUL_ASSIGN); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 241 "lexer.l"
{ return(DIV_ASSIGN); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 242 "lexer.l"
{ return(MOD_ASSIGN); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 243 "lexer.l"
{ return(AND_ASSIGN); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 244 "lexer.l"
{ return(XOR_ASSIGN); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 245 "lexer.l"
{ return(OR_ASSIGN); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 246 "lexer.l"
{ return(RIGHT_OP); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 247 "lexer.l"
{ return(LEFT_OP); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 248 "lexer.l"
{ return(INC_OP); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 249 "lexer.l"
{ return(DEC_OP); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 250 "lexer.l"
{ return(PTR_OP); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 251 "lexer.l"
{ return(AND_OP); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 252 "lexer.l"
{ return(OR_OP); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 253 "lexer.l"
{ return(LE_OP); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 254 "lexer.l"
{ return(GE_OP); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 255 "lexer.l"
{ return(EQ_OP); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 256 "lexer.l"
{ return(NE_OP); }
	YY_BREAK
/* "::"        { return(CLASS_OP); } */
case 148:
YY_RULE_SETUP
#line 258 "lexer.l"
{ return(';'); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 259 "lexer.l"
{ return('{'); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 260 "lexer.l"
{ return('}'); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 261 "lexer.l"
{ return(','); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 262 "lexer.l"
{ return(':'); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 263 "lexer.l"
{ return('='); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 264 "lexer.l"
{ return('('); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 265 "lexer.l"
{ return(')'); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 266 "lexer.l"
{ return('['); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 267 "lexer.l"
{ return(']'); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 268 "lexer.l"
{ return('.'); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 269 "lexer.l"
{ return('&'); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 270 "lexer.l"
{ return('!'); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 271 "lexer.l"
{ return('~'); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 272 "lexer.l"
{ return('-'); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 273 "lexer.l"
{ return('+'); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 274 "lexer.l"
{ return('*'); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 275 "lexer.l"
{ return('/'); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 276 "lexer.l"
{ return('%'); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 277 "lexer.l"
{ return('<'); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 278 "lexer.l"
{ return('>'); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 279 "lexer.l"
{ return('^'); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 280 "lexer.l"
{ return('|'); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 281 "lexer.l"
{ return('?'); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 282 "lexer.l"
{ return('$'); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 284 "lexer.l"
{
      while(include_stack_ptr && !fileStack[include_stack_ptr-1])
      {
         --include_stack_ptr;
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }

      if ( --include_stack_ptr < 0 )
      {
         include_stack_ptr = 0;
         yyterminate();
      }
      else
      {
         delete fileInput;
         yy_delete_buffer( YY_CURRENT_BUFFER );
         fileInput = fileStack[include_stack_ptr];
         yylloc = locStack[include_stack_ptr];
         type_yylloc = locStack[include_stack_ptr];
         expression_yylloc = locStack[include_stack_ptr];
         yy_switch_to_buffer(include_stack[include_stack_ptr] );
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }
   }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 310 "lexer.l"
{ yylloc.start = yylloc.end; type_yylloc.start = type_yylloc.end; expression_yylloc.start = expression_yylloc.end;}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 311 "lexer.l"
{
   yylloc.end.charPos = 1; yylloc.end.line += yyleng; yylloc.start = yylloc.end;
   type_yylloc.end.charPos = 1; type_yylloc.end.line += yyleng; type_yylloc.start = type_yylloc.end;
   expression_yylloc.end.charPos = 1; expression_yylloc.end.line += yyleng; expression_yylloc.start = expression_yylloc.end;
   }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 316 "lexer.l"
{
   yylloc.start.charPos++ /*= 3 - (yylloc.start.col % 3)*/; yylloc.end.charPos = yylloc.start.charPos; yylloc.start.pos = yylloc.end.pos;
   expression_yylloc.start.charPos++ /*= 3 - (expression_yylloc.start.col % 3)*/; expression_yylloc.end.charPos = expression_yylloc.start.charPos; expression_yylloc.start.pos = expression_yylloc.end.pos;
   type_yylloc.start.charPos++ /*= 3 - (type_yylloc.start.col % 3)*/; type_yylloc.end.charPos = type_yylloc.start.charPos; type_yylloc.start.pos = type_yylloc.end.pos;
   }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 321 "lexer.l"
{ yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 322 "lexer.l"
{
   yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end;
   if(inCompiler)
      printf("lexer error: invalid char 0x%X at line %d, col %d\n", (unsigned char)yytext[0], yylloc.start.line, yylloc.start.charPos);
   yyerror();
   }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 329 "lexer.l"
ECHO;
	YY_BREAK
#line 2445 "lexer.ec"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 729 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 729 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 728);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 329 "lexer.l"


private:

int yywrap()
{
   return(1);
}

int comment()
{
   int c, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      if(c == '/' && last == '*')
         break;
      last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int commentCPP()
{
   int c; //, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         break;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      //last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int preprocessor()
{
   int c, last = 0;
   int count = 0;
   char line[1024];

   line[0] = '\0';

   for(;;)
   {
      c = input();
      if(c == EOF) break;

      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         if(last != '\\')
         {
            char * pointer = line + 1;
            int lineNumber;
            line[count] = 0;
            lineNumber = GetValue(&pointer);
            if(lineNumber)
            {
               char fileName[MAX_LOCATION];

               int inOut;

               fileName[0] = 0;
               GetString(&pointer, fileName, MAX_LOCATION);
               inOut = GetValue(&pointer);

               if(inOut == 1)
               {
                  char extension[MAX_EXTENSION];

                  defaultDeclMode = declModeStack[include_stack_ptr] = declMode;

                  GetExtension(fileName, extension);
                  if(!strcmp(extension, "c") || !strcmp(extension, "h"))
                     declMode = defaultDeclMode = structDeclMode = defaultAccess;

                  fileStack[include_stack_ptr] = null;
                  include_stack_ptr++;
               }
               else if(inOut == 2)
               {
                  include_stack_ptr--;
                  defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
               }

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               //yylloc.end.pos -= count;

               if(include_stack_ptr > 0 || (lineNumber && fileName[0]))
                  yylloc.end.included = GetIncludeFileID(fileName);
               else
                  yylloc.end.included = 0;
            }
            /*
            int lineNumber = strtol(line+1, &endPtr, 0);
            if(lineNumber)
            {
               GetString(&
               endPtr

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               yylloc.end.pos -= count;
            }
            */
            break;
         }
         count = 0;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
         line[count++] = c;
      }
      else
      {
         yylloc.end.pos++;
         if(c != '\r')
         {
            yylloc.end.charPos++;
            line[count++] = c;
         }
      }
      last = c;
   }
   yylloc.start = yylloc.end;
   line[count] = 0;

   TrimLSpaces(line, line);
   for(c = 0; line[c] && line[c] != ' '; c++);
   if(!strncmp(line, "include", c))
   {
      char includeFile[MAX_LOCATION] = "";

      memmove(line, line+c, strlen(line+c)+1);
      TrimLSpaces(line, line);
      if(line[0] == '\"')
      {
         for(c = 1; line[c]; c++)
         {
            if(line[c] == '\"')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
         }
      }
      else if(line[0] == '<')
      {
         for(c = 1; line[c]; c++)
            if(line[c] == '>')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
      }

      if ( include_stack_ptr >= MAX_INCLUDE_DEPTH )
      {
         fprintf( stderr, "%s", $"Includes nested too deeply" );
         exit( 1 );
      }

      if(inCompiler || !FindIncludeFileID(includeFile))
      {
         File file = OpenIncludeFile(includeFile);
         if(file)
         {
            char extension[MAX_EXTENSION];

            fileStack[include_stack_ptr] = fileInput;
            locStack[include_stack_ptr] = yylloc;
            defaultDeclMode = declModeStack[include_stack_ptr] = declMode;
            include_stack[include_stack_ptr++] = YY_CURRENT_BUFFER;

            yylloc.start.charPos = yylloc.end.charPos = 1;
            yylloc.start.line = yylloc.end.line = 1;
            yylloc.start.pos = yylloc.end.pos = 0;
            yylloc.start.included = yylloc.end.included = GetIncludeFileID(includeFile);

            GetExtension(includeFile, extension);
            if(!strcmp(extension, "c") || !strcmp(extension, "h"))
               declMode = defaultDeclMode = structDeclMode = defaultAccess;

            fileInput = file;
            yy_switch_to_buffer( yy_create_buffer( fileInput, YY_BUF_SIZE ) );
            BEGIN(INITIAL);
         }
      }
   }
   return 0;
}

public void resetScanner()
{
   YY_FLUSH_BUFFER;
   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;
}

void resetScannerPos(CodePosition pos)
{
   YY_FLUSH_BUFFER;
   yylloc.start = yylloc.end = pos;
   type_yylloc.start = type_yylloc.end = pos;
   expression_yylloc.start = expression_yylloc.end = pos;
}

class LexerBackup
{
   YYLTYPE yylloc;
   YYLTYPE type_yylloc;
   YYLTYPE expression_yylloc;

   AccessMode declMode;
   AccessMode defaultDeclMode;

   File fileInput;
   YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
   File fileStack[MAX_INCLUDE_DEPTH];
   char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
   YYLTYPE locStack[MAX_INCLUDE_DEPTH];
   AccessMode declModeStack[MAX_INCLUDE_DEPTH];
   int include_stack_ptr;
   YY_BUFFER_STATE buffer;

   int yy_n_chars;
   char * yytext_ptr;
   char * yy_c_buf_p;
   FILE * yyin;
   char yy_hold_char;
   int yychar;
   int yy_init;
   int yy_start;

};

LexerBackup pushLexer()
{
   LexerBackup backup { };

   backup.yylloc = yylloc;
   backup.type_yylloc = type_yylloc;
   backup.expression_yylloc = expression_yylloc;
   backup.fileInput = fileInput;
   memcpy(backup.include_stack, include_stack, sizeof(include_stack));
   memcpy(backup.fileStack, fileStack, sizeof(fileStack));
   memcpy(backup.sourceFileStack, sourceFileStack, sizeof(sourceFileStack));
   memcpy(backup.locStack, locStack, sizeof(locStack));
   memcpy(backup.declModeStack, declModeStack, sizeof(declModeStack));
   backup.include_stack_ptr = include_stack_ptr;
   backup.defaultDeclMode = defaultDeclMode;
   backup.declMode = declMode;
   backup.buffer = yy_current_buffer;

   backup.yy_n_chars = yy_n_chars;
   backup.yytext_ptr = yytext_ptr;
   backup.yy_c_buf_p = yy_c_buf_p;
   backup.yyin = yyin;
   backup.yy_hold_char = yy_hold_char;
   backup.yychar = yychar;
   backup.yy_init = yy_init;
   backup.yy_start = yy_start;

   yy_init = 1;

   yy_current_buffer = 0;

   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;

   return backup;
}

void popLexer(LexerBackup backup)
{
   yylloc = backup.yylloc;
   type_yylloc = backup.type_yylloc;
   expression_yylloc = backup.expression_yylloc;
   fileInput = backup.fileInput;
   memcpy(include_stack, backup.include_stack, sizeof(include_stack));
   memcpy(fileStack, backup.fileStack, sizeof(fileStack));
   memcpy(sourceFileStack, backup.sourceFileStack, sizeof(sourceFileStack));
   memcpy(locStack, backup.locStack, sizeof(locStack));
   memcpy(declModeStack, backup.declModeStack, sizeof(declModeStack));
   include_stack_ptr = backup.include_stack_ptr;
   defaultDeclMode = backup.defaultDeclMode;
   declMode = structDeclMode = backup.declMode;

   // yy_switch_to_buffer(backup.buffer);
   yy_current_buffer = backup.buffer;
   yy_n_chars = backup.yy_n_chars;
   yytext_ptr = backup.yytext_ptr;
   yy_c_buf_p = backup.yy_c_buf_p;
   yyin = backup.yyin;
   yy_hold_char = backup.yy_hold_char;
   yychar = backup.yychar;
   yy_init = backup.yy_init;
   yy_start = backup.yy_start;

   delete backup;
}
