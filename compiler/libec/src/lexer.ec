#line 2 "lexer.ec"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <errno.h>

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif


/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 172
#define YY_END_OF_BUFFER 173
static yyconst short int yy_accept[696] =
    {   0,
      112,  112,  173,  171,  170,  169,  168,  155,  171,    1,
      167,  161,  154,  171,  149,  150,  159,  158,  146,  157,
      153,  160,  115,  115,  147,  143,  162,  148,  163,  166,
      112,  112,  112,  151,  152,  164,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  144,  165,  145,  156,  142,    0,
      120,    0,  128,  145,  137,  129,    0,    0,  126,  134,
      124,  135,  125,  136,    0,  118,    2,    3,  127,  119,
      114,    0,  115,    0,  115,  112,  152,  144,  151,  133,
      139,  141,  140,  132,    0,  112,    0,  112,    0,    0,

      130,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
       11,  112,  112,  112,  112,  112,  112,  112,  112,   19,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  131,  138,  116,  121,    0,  118,  118,
        0,  119,  114,    0,  117,  113,  112,  123,  122,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,   92,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,

      112,  112,  112,  112,  112,  112,  112,  112,   17,   45,
      112,  112,  112,  112,   20,  112,  112,  112,   51,  112,
      112,  112,  112,  112,  112,  112,   44,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,    0,  118,    0,  118,
        0,  119,  117,  113,  112,  112,   61,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,    4,
      112,    6,    7,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,   13,   14,  112,  112,

      112,   18,  112,  112,  112,  112,  112,   22,  112,   52,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,   21,  112,
      112,  112,   38,  112,  112,  112,    0,  118,   62,  112,
      112,  112,   93,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,    5,   47,    8,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,   16,  112,  112,
      112,   58,   46,  112,  112,  112,  112,  112,   53,  112,
      112,   25,  112,  112,  112,  112,  112,  112,  112,  112,

      112,  112,   36,  112,  112,  112,   95,   42,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,   56,   50,  112,
      112,   12,   15,  112,   55,   88,   72,  112,  112,  112,
       84,  112,   54,  112,   24,   26,   29,   31,  112,  112,
       33,  112,   34,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,   91,  112,  112,   76,   82,  112,  112,
      112,   57,  112,  112,  112,  112,  112,  112,  112,   70,
      112,  112,  112,  112,  112,  112,  112,  112,  109,  110,

      108,   10,  112,  112,  112,  112,   85,  112,  112,  112,
       80,  112,  112,  112,  112,   35,  112,   49,  112,  112,
       63,  112,  112,  112,  112,  112,  112,   71,  112,   27,
      112,   32,   94,  112,  112,   79,  112,  112,  112,  112,
      112,  112,    9,  112,  112,  112,  112,  112,   43,   23,
       65,  112,  106,  112,  112,   37,   39,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,   77,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,   74,   75,
      112,  107,  112,  112,   48,  112,   98,   64,  112,  112,
      112,  112,  112,   69,   81,   28,  112,   41,  112,   87,

      104,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,   30,   68,  112,    0,  112,  112,   78,  112,   90,
      112,  112,  101,  112,  112,  112,  112,  112,  112,  112,
      112,  112,   73,    0,  112,   83,   40,  112,  112,  112,
      112,  112,   97,  112,   96,   86,   67,  112,  112,   89,
      112,  112,  112,  112,  111,  112,  112,  112,  112,  112,
       99,  112,  105,  112,  112,  112,  112,  112,  112,  112,
      112,   60,  112,  112,  112,  112,  112,   59,  112,  112,
      103,  112,  112,  100,  112,  112,  112,  112,  112,  112,
      112,  102,  112,   66,    0

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   22,   21,   23,   21,   21,   21,   24,   25,   26,
       27,   28,   29,    1,   30,   31,   32,   30,   33,   34,
       35,   35,   36,   37,   35,   38,   35,   35,   35,   35,
       35,   35,   35,   35,   39,   35,   35,   40,   35,   35,
       41,   42,   43,   44,   45,    1,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   35,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[75] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        3,    1,    4,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    5,    2,    1,    1,    1,    1,    1,    6,
        6,    6,    6,    6,    7,    7,    7,    7,    7,    7,
        1,    1,    1,    1,    7,    6,    6,    6,    6,    6,
        6,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        1,    1,    1,    1
    } ;

static yyconst short int yy_base[704] =
    {   0,
        0,    0,  255, 2384, 2384, 2384, 2384,  206,   69, 2384,
     2384,   49,   68,  186, 2384, 2384,  200,   64, 2384,   65,
       63,   75,   94,   78,   79, 2384,   95,  171,   60, 2384,
       86,   96,  118, 2384, 2384,  164,  129,  113,  126,  144,
      153,  116,  157,  145,  161,  133,  156,  172,  197,  198,
      205,  216,  199,  208, 2384,   53, 2384, 2384, 2384,   99,
     2384,  184, 2384, 2384, 2384, 2384,  147,  183, 2384, 2384,
     2384, 2384, 2384, 2384,  152,  256, 2384, 2384, 2384,  294,
      334,  221,  230,    0,    0,    0, 2384, 2384, 2384,  137,
     2384, 2384, 2384,  120,  111,  128,   89,  221,  103,   66,

     2384,  236,  240,  215,  390,  273,  262,  278,  281,  288,
      294,  206,  298,  225,  313,  309,  310,  315,  352,  353,
      316,  319,  354,  370,  373,  382,  383,  377,  394,  314,
      388,  398,  401,  392,  403,  405,  423,  433,  407,  450,
      455,  457,  458,  463,  465,  468,  474,  466,  475,  478,
      476,  481,  487, 2384, 2384, 2384, 2384,  527,  517,  555,
      541,  545,  577,  473,  623,  582,    0, 2384, 2384,    0,
      502,  507,  522,  577,  601,  533,  580,  598,  560,  593,
      617,  625,  644,  513,  645,  614,  646,  662,  542,  652,
      672,  674,  663,  675,  678,  680,  681,  684,  682,  690,

      705,  706,  693,  709,  710,  713,  721,  729,  722,  737,
      738,  740,  741,  742,  757,  759,  760,  763,  762,  764,
      766,  767,  768,  769,  775,  784,  787,  791,  792,  794,
      796,  797,  804,  807,  813,  816,  819,  823,  822,  824,
      831,  826,  828,  832,  844,  847,  873,  877,  886,  877,
      896,  900,  901,  905,    0,  852,  857,  916,  864,  937,
      939,  941,  865,  943,  944,  947,  954,  881,  956,  959,
      962,  966,  964,  967,  972,  971,  977,  988,  993,  859,
      994,  995,  999, 1000, 1001, 1006, 1017, 1022, 1024, 1023,
     1025, 1027, 1028, 1030, 1033, 1032, 1034, 1035, 1045, 1051,

     1052, 1056, 1057, 1058, 1061, 1073, 1064, 1069, 1077, 1086,
     1089, 1093, 1090, 1099, 1101, 1102, 1105, 1112, 1121, 1114,
     1123, 1117, 1122, 1124, 1127, 1132, 1142, 1129, 1145, 1149,
     1151, 1155, 1171, 1172, 1173, 1175, 1171, 1184, 1176, 1178,
     1177, 1188, 1199, 1200, 1203, 1204, 1205, 1206, 1208, 1223,
     1227, 1229, 1231, 1232, 1233, 1235, 1251, 1254, 1255, 1257,
     1260, 1262, 1263, 1264, 1272, 1281, 1282, 1285, 1288, 1291,
     1292, 1294, 1300, 1301, 1309, 1310, 1312, 1313, 1316, 1319,
     1322, 1328, 1331, 1339, 1340, 1341, 1343, 1344, 1361, 1363,
     1350, 1365, 1366, 1368, 1372, 1369, 1378, 1373, 1388, 1389,

     1397, 1401, 1404, 1406, 1412, 1408, 1417, 1419, 1421, 1423,
     1425, 1428, 1429, 1440, 1445, 1446, 1450, 1456, 1457, 1465,
     1462, 1467, 1466, 1468, 1469, 1475, 1484, 1485, 1487, 1495,
     1497, 1496, 1508, 1513, 1512, 1516, 1517, 1518, 1521, 1528,
     1533, 1539, 1541, 1543, 1544, 1545, 1549, 1550, 1554, 1560,
     1562, 1565, 1566, 1573, 1567, 1575, 1577, 1582, 1584, 1585,
     1588, 1590, 1592, 1593, 1595, 1601, 1608, 1603, 1610, 1612,
     1613, 1616, 1618, 1619, 1621, 1620, 1623, 1640, 1641, 1646,
     1647, 1651, 1653, 1656, 1659, 1662, 1663, 1666, 1669, 1672,
     1674, 1675, 1682, 1679, 1684, 1691, 1700, 1702, 1694, 1703,

     1711, 1712, 1719, 1724, 1727, 1730, 1731, 1732, 1735, 1736,
     1737, 1739, 1747, 1748, 1752, 1755, 1756, 1758, 1759, 1760,
     1764, 1767, 1779, 1780, 1782, 1783, 1784, 1792, 1788, 1803,
     1804, 1808, 1810, 1811, 1815, 1816, 1832, 1833, 1836, 1834,
     1839, 1840, 1841, 1843, 1842, 1845, 1852, 1861, 1849, 1862,
     1867, 1868, 1869, 1871, 1872, 1879, 1880, 1888, 1891, 1898,
     1900, 1904, 1906, 1907, 1908, 1909, 1913, 1916, 1915, 1926,
     1931, 1932, 1935, 1938, 1947, 1953, 1956, 1958, 1959, 1960,
     1962, 1964, 1965, 1966, 1969, 1977, 1981, 1984, 1986, 1990,
     1992, 1997, 2001, 2005, 2009, 2012, 2014, 2018, 2020, 2013,

     2022, 2024, 2025, 2029, 2031, 2033, 2037, 2040, 2042, 2046,
     2052, 2057, 2058, 2061,   84, 2063, 2069, 2062, 2070, 2080,
     2082, 2085, 2086, 2087, 2102, 2103, 2106, 2107, 2108, 2109,
     2110, 2111, 2384,   77, 2112, 2113, 2114, 2118, 2130, 2119,
     2137, 2139, 2142, 2152, 2148, 2157, 2160, 2164, 2165, 2167,
     2168, 2169, 2173, 2175, 2176, 2184, 2180, 2185, 2186, 2193,
     2195, 2196, 2197, 2202, 2205, 2206, 2213, 2215, 2214, 2218,
     2224, 2225, 2233, 2236, 2240, 2241, 2242, 2245, 2246, 2261,
     2251, 2262, 2263, 2268, 2269, 2274, 2271, 2278, 2279, 2281,
     2294, 2291, 2299, 2301, 2384, 2350, 2357, 2363, 2366, 2367,

     2370, 2372, 2376
    } ;

static yyconst short int yy_def[704] =
    {   0,
      695,    1,  695,  695,  695,  695,  695,  695,  696,  695,
      695,  695,  695,  697,  695,  695,  695,  695,  695,  695,
      695,  695,  695,   23,  695,  695,  695,  695,  695,  695,
      698,  698,  698,  695,  695,  695,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  695,  695,  695,  695,  695,  696,
      695,  696,  695,  695,  695,  695,  697,  697,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  699,   24,  700,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  698,  695,  698,  696,  697,

      695,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  699,  701,  695,  695,  702,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,

      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  695,   76,  695,  695,
      695,   80,  695,  695,  701,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,

      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  695,  160,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,

      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,

      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,

      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  703,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  695,  703,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,    0,  695,  695,  695,  695,  695,

      695,  695,  695
    } ;

static yyconst short int yy_nxt[2459] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   24,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   31,   31,   31,   31,   31,   31,   33,   31,   31,
       34,    4,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   31,   45,   31,   31,   46,   31,   47,   31,
       48,   49,   50,   51,   52,   53,   54,   31,   31,   31,
       55,   56,   57,   58,   61,   63,   64,   65,   70,  154,
       75,   72,   76,   76,   76,   76,   93,   94,   77,  633,
       71,   73,   74,   78,   66,   95,  633,   85,   85,   85,

       85,   79,   86,   88,   61,   95,   87,   68,   61,   97,
       62,   80,  170,   81,   81,   81,   81,  695,   89,   97,
       90,   91,   95,   99,  155,   95,   82,   95,  100,   83,
       83,   83,   83,   84,   97,   95,   97,   95,   95,   97,
       62,   97,   95,   82,   62,  695,  169,   83,   83,   97,
       83,   97,   97,   95,   95,   98,   97,  156,   83,  102,
      103,   84,   95,  168,  104,   95,   95,   97,   97,  157,
       95,  109,  122,  105,  123,  110,   97,  111,  106,   97,
       97,   95,  107,  124,   97,  695,  695,  112,   68,  113,
      101,  108,  134,   67,  128,   97,  114,   92,  117,  118,

      115,  135,  119,  116,  129,  136,   95,   95,   95,  120,
      125,  130,  121,  126,   95,   95,  127,   95,  131,  132,
       97,   97,   97,  133,   95,   95,   69,   68,   97,   97,
       95,   97,   59,  137,   95,  164,  138,  164,   97,   97,
      165,  165,  165,  165,   97,   95,  139,  140,   97,   95,
      141,  142,  150,  152,  695,  191,  695,  146,  151,   97,
      153,  143,  144,   97,  145,   83,   83,   83,   83,  148,
      193,   95,  174,  147,  149,   76,   76,   76,   76,  695,
      171,  695,   95,   83,   83,   97,   83,   95,  158,  159,
       95,  159,  159,  159,   83,  172,   97,   95,  695,  173,

      695,   97,  695,   95,   97,  158,  159,   95,  695,  159,
      159,   97,  159,  160,  160,  160,  160,   97,   95,   95,
      186,   97,   95,   95,   95,   95,  161,  162,   95,  162,
      162,  162,   97,   97,  695,  695,   97,   97,   97,   97,
      185,  187,   97,  161,  162,  189,  695,  162,  162,  188,
      162,   80,  695,   81,   81,   81,   81,  190,  194,  695,
      192,   95,   95,   95,  695,  197,   82,  195,  198,  163,
      163,  163,  163,  196,  695,   97,   97,   97,  199,   95,
      203,  204,   95,   82,  695,  695,   95,  163,  163,  695,
      163,   95,   95,   97,  695,  695,   97,   95,  163,   95,

       97,   95,  200,   95,  695,   97,   97,   95,  201,  202,
       95,   97,   95,   97,   95,   97,   95,   97,  205,  695,
      695,   97,  695,  695,   97,  695,   97,  695,   97,  695,
       97,  695,   95,  206,  207,  175,  176,  177,  178,  179,
      210,  208,   95,  180,  209,  213,   97,  695,  212,  695,
      217,  181,  182,  183,  214,  184,   97,  211,  223,   95,
      218,  215,  695,  216,   95,  224,   95,   95,  695,  225,
      226,  219,   95,   97,   95,   95,  220,   95,   97,  222,
       97,   97,  221,   95,   95,   95,   97,   95,   97,   97,
       95,   97,  165,  165,  165,  165,   95,   97,   97,   97,

      695,   97,  695,  231,   97,  695,  232,  695,  229,  235,
       97,   95,  695,  227,  228,  695,   95,  233,  236,  234,
      695,  237,   95,  695,  239,   97,  230,  695,  240,  243,
       97,   95,  244,  695,  238,  695,   97,  241,  695,  242,
      246,  247,   95,  247,  245,   97,  248,  248,  248,  248,
      159,   95,  159,  159,  159,  251,   97,  251,  257,  695,
      252,  252,  252,  252,  695,   97,  258,  159,  695,   95,
      159,  159,  275,  159,  160,  160,  160,  160,  162,  259,
      162,  162,  162,   97,  695,  695,   95,  249,  250,   95,
      250,  250,  250,  695,  695,  162,  695,  264,  162,  162,

       97,  162,   95,   97,  249,  250,  695,   95,  250,  250,
       95,  250,  163,  163,  163,  163,   97,  254,  254,  254,
      254,   97,  260,   95,   97,  695,   95,  268,  265,  695,
      163,  163,  695,  163,   95,  254,  254,   97,  254,  266,
       97,  163,  165,  165,  165,  165,  254,  267,   97,  695,
      695,  269,  695,   95,   95,   95,  253,  261,  253,  253,
      253,   95,  695,  262,  263,  695,  270,   97,   97,   97,
      277,   95,   95,  253,  695,   97,  253,  253,  271,  253,
      695,   95,  695,   95,   95,   97,   97,   95,  272,   95,
       95,   95,  695,   95,  278,   97,  273,   97,   97,   95,

      695,   97,   95,   97,   97,   97,  279,   97,  276,  695,
      695,  280,  274,   97,   95,   95,   97,  281,   95,   95,
      695,  695,   95,  282,  283,  287,  695,  290,   97,   97,
       95,   95,   97,   97,  288,  291,   97,  284,   95,  296,
      285,  286,  289,  292,   97,   97,   95,   95,  695,   95,
       95,   95,   97,  695,  293,  294,  695,  695,  297,  295,
       97,   97,  299,   97,   97,   97,   95,  298,   95,   95,
      300,   95,   95,   95,  301,   95,   95,   95,   95,  306,
       97,  310,   97,   97,   95,   97,   97,   97,  695,   97,
       97,   97,   97,   95,  695,  305,   95,  302,   97,  303,

       95,   95,  304,   95,  695,   95,   95,   97,  307,  695,
       97,  308,  309,   95,   97,   97,   95,   97,  315,   97,
       97,  314,   95,  313,  695,   95,  312,   97,   95,  311,
       97,   95,   95,   95,  695,   95,   97,   95,  316,   97,
       95,   95,   97,  320,  322,   97,   97,   97,  317,   97,
      319,   97,  318,   95,   97,   97,   95,  695,  695,  321,
      325,   95,  695,  695,  323,  695,   95,   97,   95,  695,
       97,  324,  328,   95,   95,   97,  333,  334,  695,  326,
       97,  327,   97,  330,  331,  329,  695,   97,   97,  332,
       95,  335,  248,  248,  248,  248,  248,  248,  248,  248,

      337,  695,  337,  336,   97,  338,  338,  338,  338,  695,
      250,  695,  250,  250,  250,  252,  252,  252,  252,  252,
      252,  252,  252,  695,  340,   95,  695,  250,  344,  695,
      250,  250,  695,  250,  253,  695,  253,  253,  253,   97,
      254,  254,  254,  254,  349,  695,   95,  695,   95,  695,
       95,  253,   95,   95,  253,  253,   95,  253,  254,  254,
       97,  254,   97,   95,   97,   95,   97,   97,   95,  254,
       97,   95,  339,   95,  695,   95,   95,   97,  695,   97,
       95,   95,   97,  695,  695,   97,   95,   97,  341,   97,
       97,  695,  342,  346,   97,   97,  345,   95,  343,  695,

       97,  348,   95,   95,   95,  347,  695,  695,   95,   95,
       95,   97,  350,  353,  354,   95,   97,   97,   97,  351,
      358,  352,   97,   97,   97,  355,   95,  356,  357,   97,
      359,   95,   95,   95,   95,  360,   95,   95,  695,   95,
       97,   95,   95,   95,   95,   97,   97,   97,   97,  362,
       97,   97,  361,   97,   95,   97,   97,   97,   97,  365,
       95,   95,  363,  366,  364,   95,   95,   95,   97,  369,
       95,  367,  368,   95,   97,   97,  695,  695,   95,   97,
       97,   97,   95,  695,   97,  371,   95,   97,  375,  370,
      374,  372,   97,  695,  382,   95,   97,  373,   95,   95,

       97,  695,   95,  695,  695,  695,  376,  380,   95,   97,
       95,   95,   97,   97,   95,  378,   97,  377,  379,  381,
      695,   95,   97,   95,   97,   97,   95,  383,   97,  695,
       95,   95,   95,   95,  385,   97,   95,   97,   95,  384,
       97,   95,  386,  387,   97,   97,   97,   97,  695,  695,
       97,   95,   97,  695,   95,   97,  695,  695,   95,  695,
       95,  388,  396,  390,   95,   97,  391,  389,   97,  695,
      393,  398,   97,  394,   97,  392,  395,  402,   97,  400,
       95,   95,   95,  399,   95,   95,   95,   95,  397,  401,
      338,  338,  338,  338,   97,   97,   97,   95,   97,   97,

       97,   97,  404,  338,  338,  338,  338,  403,   95,   95,
      695,   97,   95,   95,   95,   95,  695,   95,  695,  405,
      695,  695,   97,   97,  408,  407,   97,   97,   97,   97,
      410,   97,   95,  695,  409,  406,   95,  695,   95,  411,
       95,   95,   95,  412,   95,  695,   97,  695,  695,  420,
       97,  415,   97,  695,   97,   97,   97,  418,   97,  414,
       95,  413,  417,   95,   95,  695,   95,  416,  695,   95,
      695,   95,   95,   95,   97,  695,  419,   97,   97,  423,
       97,   95,  424,   97,  425,   97,   97,   97,  695,  422,
       95,   95,  421,  695,   95,   97,  426,   95,  695,  695,

       95,   95,  429,   95,   97,   97,  430,  431,   97,   95,
       95,   97,  427,  428,   97,   97,  695,   97,   95,   95,
      695,   95,   95,   97,   97,   95,  433,  695,   95,  695,
      432,   95,   97,   97,  435,   97,   97,   95,  434,   97,
       95,  438,   97,  439,  436,   97,  695,  437,   95,   95,
       95,   97,   95,   95,   97,  695,  695,  444,  442,   95,
      440,  441,   97,   97,   97,  695,   97,   97,  443,  446,
       95,  447,   95,   97,   95,   95,  695,   95,   95,  445,
      453,   95,   95,  695,   97,  695,   97,   95,   97,   97,
      451,   97,   97,  695,  695,   97,   97,   95,   95,  448,

      695,   97,  450,  449,  695,  695,   95,  452,  455,  695,
       95,   97,   97,   95,  456,   95,  454,   95,  457,  458,
       97,   95,  695,  460,   97,  459,   95,   97,   95,   97,
       95,   97,   95,  462,   95,   97,  461,   95,   95,  695,
       97,  463,   97,  695,   97,  465,   97,  695,   97,   95,
      466,   97,   97,  464,   95,   95,  695,  468,  695,   95,
      695,  469,  470,   97,  467,   95,   95,  695,   97,   97,
      471,   95,  474,   97,   95,   95,   95,   95,   95,   97,
       97,  472,  475,  473,   95,   97,  482,  695,   97,   97,
       97,   97,   97,   95,   95,  695,   95,  695,   97,  695,

      695,  477,  695,  476,   95,   95,   95,   97,   97,  478,
       97,  485,  479,  486,  480,  481,  484,   95,   97,   97,
       97,   95,   95,  483,  695,   95,   95,   95,  487,  695,
       95,   97,  695,  695,  490,   97,   97,   95,  488,   97,
       97,   97,   95,  491,   97,  493,  489,  494,   95,  492,
       95,   97,   95,   95,   95,  495,   97,  496,   95,   95,
      497,  499,   97,   95,   97,  501,   97,   97,   97,   95,
      498,   95,   97,   97,   95,   95,   95,   97,  695,  500,
      502,  695,   95,   97,   95,   97,   95,  503,   97,   97,
       97,   95,  504,   95,   95,  506,   97,   95,   97,   95,

       97,   95,   95,  507,   95,   97,  505,   97,   97,  695,
       95,   97,   95,   97,  509,   97,   97,   95,   97,   95,
      510,   95,   95,  508,   97,   95,   97,   95,   95,   95,
       95,   97,   95,   97,  695,   97,   97,  695,  514,   97,
      511,   97,   97,   97,   97,  695,   97,  695,  512,   95,
       95,  516,  513,  695,  515,   95,   95,  517,  520,  518,
       95,  522,   95,   97,   97,   95,  519,  524,   95,   97,
       97,   95,   95,  525,   97,   95,   97,  523,   95,   97,
      521,   95,   97,   95,   95,   97,   97,  695,   95,   97,
      695,   95,   97,   95,  695,   97,  528,   97,   97,  695,

       95,  526,   97,   95,  530,   97,  529,   97,  527,   95,
      532,   95,   95,  533,   97,  531,  695,   97,  695,  534,
       95,   95,  535,   97,  537,   97,   97,  538,   95,  695,
      536,  539,  540,   95,   97,   97,   95,  695,  695,   95,
       95,   95,   97,  541,   95,   95,   95,   97,   95,  543,
       97,  544,  542,   97,   97,   97,   95,   95,   97,   97,
       97,   95,   97,  695,   95,   95,  695,   95,   95,   95,
       97,   97,  695,   95,  547,   97,   95,  548,   97,   97,
      545,   97,   97,   97,  695,  546,  552,   97,   95,   95,
       97,   95,   95,   95,  695,  695,  550,   95,  555,  551,

      549,   95,   97,   97,  556,   97,   97,   97,  557,  553,
      554,   97,   95,   95,  695,   97,  558,   95,  695,   95,
       95,  695,  695,  695,   95,   95,   97,   97,  559,  560,
      695,   97,  563,   97,   97,  566,  565,  564,   97,   97,
      562,   95,   95,   95,  561,   95,  695,  567,   95,   95,
       95,   95,   95,  695,   95,   97,   97,   97,   95,   97,
      568,   95,   97,   97,   97,   97,   97,  569,   97,  695,
       95,   95,   97,  695,  570,   97,   95,   95,   95,  571,
       95,   95,  695,  576,   97,   97,  573,  578,   95,   95,
       97,   97,   97,  583,   97,   97,  572,   95,  574,  577,

       95,  575,   97,   97,  581,  579,  695,   95,  580,   95,
      582,   97,  695,   95,   97,   95,   95,   95,   95,  695,
      584,   97,   95,   97,   95,   95,  586,   97,  695,   97,
       97,   97,   97,  585,  695,   95,   97,  587,   97,   97,
       95,   95,  589,  695,   95,  695,  695,   95,  591,   97,
      695,  695,  594,  592,   97,   97,   95,  596,   97,  588,
      597,   97,   95,  590,  598,   95,  593,   95,   95,   95,
       97,   95,  595,   95,   95,   95,   97,  601,   95,   97,
      602,   97,   97,   97,  599,   97,   95,   97,   97,   97,
       95,  603,   97,   95,  600,   95,  604,  695,  695,   95,

       97,   95,  605,  695,   97,  695,   95,   97,  615,   97,
       95,  608,  609,   97,   95,   97,  606,  607,   95,  610,
       97,   95,   95,   95,   97,  695,  611,   95,   97,   95,
      612,   95,   97,   95,   95,   97,   97,   97,   95,  613,
       95,   97,   95,   97,  695,   97,   95,   97,   97,   95,
      695,   95,   97,  617,   97,   95,   97,  614,  618,  616,
       97,   95,  619,   97,  620,   97,   95,   95,  695,   97,
       95,   95,   95,  695,  695,   97,  622,  623,   95,   95,
       97,   97,  625,  695,   97,   97,   97,  628,  621,   95,
      695,   95,   97,   97,   95,   95,   95,  626,  624,  630,

      695,  627,  631,   97,  629,   97,  632,  635,   97,   97,
       97,   95,   95,  636,  637,   95,   95,   95,   95,   95,
       95,   95,   95,   95,  695,   97,   97,   95,   95,   97,
       97,   97,   97,   97,   97,   97,   97,   97,  638,   95,
      695,   97,   97,  639,  695,  695,   95,  640,   95,  695,
      695,   95,  642,   97,  647,  649,  650,   95,  648,  645,
       97,   95,   97,  641,  653,   97,   95,  695,  643,   95,
      644,   97,  646,   95,   95,   97,   95,   95,   95,  652,
       97,  651,   95,   97,   95,   95,  695,   97,   97,   95,
       97,   97,   97,   95,   95,   95,   97,  655,   97,   97,

      654,  656,   95,   97,   95,   95,   95,   97,   97,   97,
      658,   95,  660,  657,   95,   95,   97,  695,   97,   97,
       97,  659,   95,   95,   95,   97,  695,   95,   97,   97,
      661,  662,  695,   95,   95,  664,   97,   97,   97,  667,
      665,   97,   95,  663,  695,   95,  666,   97,   97,   95,
       95,   95,  695,  668,   95,   95,   97,  672,  669,   97,
       95,  670,  695,   97,   97,   97,  671,  675,   97,   97,
       95,   95,   95,  677,   97,  673,  674,   95,   95,  676,
       95,  695,  695,   95,   97,   97,   97,   95,   95,  682,
       95,   97,   97,  695,   97,  679,  678,   97,  695,  680,

       95,   97,   97,   95,   97,  695,  683,  685,   95,  681,
       95,  695,  686,  695,   97,  695,  695,   97,  695,  684,
      689,  695,   97,  695,   97,  695,  695,  691,  695,  695,
      695,  695,  687,  695,  695,  688,  695,  695,  693,  695,
      695,  690,  695,  694,  695,  695,  695,  695,  695,  692,
       60,   60,   60,   60,   60,   60,   60,   67,   67,  695,
       67,   67,   67,   67,   96,  695,  695,   96,   96,   96,
      166,  166,  167,  167,  255,  255,  255,  256,  256,  634,
      634,  634,  634,    3,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,

      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695
    } ;

static yyconst short int yy_chk[2459] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    9,   12,   12,   13,   18,   56,
       21,   20,   21,   21,   21,   21,   29,   29,   22,  634,
       18,   20,   20,   22,   13,   31,  615,   24,   24,   24,

       24,   22,   25,   27,   60,   32,   25,  100,   99,   31,
        9,   23,   97,   23,   23,   23,   23,   24,   27,   32,
       27,   27,   38,   33,   56,   42,   23,   33,   33,   23,
       23,   23,   23,   23,   95,   39,   38,   96,   37,   42,
       60,   33,   46,   23,   99,   24,   94,   23,   23,   39,
       23,   96,   37,   40,   44,   32,   46,   67,   23,   37,
       37,   23,   41,   90,   37,   47,   43,   40,   44,   75,
       45,   38,   42,   37,   42,   38,   41,   38,   37,   47,
       43,   48,   37,   42,   45,   68,   62,   39,   67,   40,
       36,   37,   46,   68,   44,   48,   40,   28,   41,   41,

       40,   47,   41,   40,   44,   47,   49,   50,   53,   41,
       43,   45,   41,   43,   51,  112,   43,   54,   45,   45,
       49,   50,   53,   45,  104,   52,   17,   14,   51,  112,
       98,   54,    8,   48,  114,   82,   48,   82,  104,   52,
       82,   82,   82,   82,   98,  102,   49,   50,  114,  103,
       50,   50,   53,   54,    3,  112,    0,   51,   53,  102,
       54,   50,   50,  103,   50,   83,   83,   83,   83,   52,
      114,  107,  104,   51,   52,   76,   76,   76,   76,    0,
       98,    0,  106,   83,   83,  107,   83,  108,   76,   76,
      109,   76,   76,   76,   83,  102,  106,  110,    0,  103,

        0,  108,    0,  111,  109,   76,   76,  113,    0,   76,
       76,  110,   76,   80,   80,   80,   80,  111,  116,  117,
      107,  113,  115,  130,  118,  121,   80,   80,  122,   80,
       80,   80,  116,  117,    0,    0,  115,  130,  118,  121,
      106,  108,  122,   80,   80,  110,    0,   80,   80,  109,
       80,   81,    0,   81,   81,   81,   81,  111,  115,    0,
      113,  119,  120,  123,    0,  118,   81,  116,  118,   81,
       81,   81,   81,  117,    0,  119,  120,  123,  118,  124,
      121,  122,  125,   81,    0,    0,  128,   81,   81,    0,
       81,  126,  127,  124,    0,    0,  125,  131,   81,  105,

      128,  134,  119,  129,    0,  126,  127,  132,  119,  120,
      133,  131,  135,  105,  136,  134,  139,  129,  123,    0,
        0,  132,    0,    0,  133,    0,  135,    0,  136,    0,
      139,    0,  137,  124,  125,  105,  105,  105,  105,  105,
      128,  126,  138,  105,  127,  132,  137,    0,  131,    0,
      134,  105,  105,  105,  132,  105,  138,  129,  139,  140,
      135,  132,    0,  133,  141,  139,  142,  143,    0,  139,
      139,  136,  144,  140,  145,  148,  137,  146,  141,  138,
      142,  143,  137,  147,  149,  151,  144,  150,  145,  148,
      152,  146,  164,  164,  164,  164,  153,  147,  149,  151,

        0,  150,    0,  143,  152,    0,  143,    0,  142,  144,
      153,  171,    0,  140,  141,    0,  172,  143,  145,  143,
        0,  146,  184,    0,  148,  171,  142,    0,  149,  151,
      172,  173,  151,    0,  147,    0,  184,  149,    0,  150,
      153,  158,  176,  158,  152,  173,  158,  158,  158,  158,
      159,  189,  159,  159,  159,  161,  176,  161,  171,    0,
      161,  161,  161,  161,    0,  189,  172,  159,    0,  179,
      159,  159,  184,  159,  160,  160,  160,  160,  162,  173,
      162,  162,  162,  179,    0,    0,  174,  160,  160,  177,
      160,  160,  160,    0,    0,  162,    0,  176,  162,  162,

      174,  162,  180,  177,  160,  160,    0,  178,  160,  160,
      175,  160,  163,  163,  163,  163,  180,  166,  166,  166,
      166,  178,  174,  186,  175,    0,  181,  179,  177,    0,
      163,  163,    0,  163,  182,  166,  166,  186,  166,  177,
      181,  163,  165,  165,  165,  165,  166,  178,  182,    0,
        0,  180,    0,  183,  185,  187,  165,  175,  165,  165,
      165,  190,    0,  175,  175,    0,  181,  183,  185,  187,
      186,  188,  193,  165,    0,  190,  165,  165,  182,  165,
        0,  191,    0,  192,  194,  188,  193,  195,  182,  196,
      197,  199,    0,  198,  187,  191,  183,  192,  194,  200,

        0,  195,  203,  196,  197,  199,  188,  198,  185,    0,
        0,  190,  183,  200,  201,  202,  203,  191,  204,  205,
        0,    0,  206,  192,  193,  196,    0,  199,  201,  202,
      207,  209,  204,  205,  197,  200,  206,  194,  208,  203,
      195,  195,  198,  200,  207,  209,  210,  211,    0,  212,
      213,  214,  208,    0,  201,  202,    0,    0,  204,  202,
      210,  211,  206,  212,  213,  214,  215,  205,  216,  217,
      207,  219,  218,  220,  208,  221,  222,  223,  224,  215,
      215,  219,  216,  217,  225,  219,  218,  220,    0,  221,
      222,  223,  224,  226,    0,  214,  227,  211,  225,  212,

      228,  229,  213,  230,    0,  231,  232,  226,  216,    0,
      227,  217,  218,  233,  228,  229,  234,  230,  224,  231,
      232,  223,  235,  222,    0,  236,  221,  233,  237,  220,
      234,  239,  238,  240,    0,  242,  235,  243,  225,  236,
      241,  244,  237,  230,  232,  239,  238,  240,  226,  242,
      229,  243,  228,  245,  241,  244,  246,    0,    0,  231,
      235,  256,    0,    0,  233,    0,  257,  245,  280,    0,
      246,  234,  238,  259,  263,  256,  243,  244,    0,  236,
      257,  237,  280,  240,  241,  239,    0,  259,  263,  242,
      268,  245,  247,  247,  247,  247,  248,  248,  248,  248,

      249,    0,  249,  246,  268,  249,  249,  249,  249,  248,
      250,    0,  250,  250,  250,  251,  251,  251,  251,  252,
      252,  252,  252,    0,  259,  258,  248,  250,  263,    0,
      250,  250,  252,  250,  253,    0,  253,  253,  253,  258,
      254,  254,  254,  254,  268,    0,  260,    0,  261,  252,
      262,  253,  264,  265,  253,  253,  266,  253,  254,  254,
      260,  254,  261,  267,  262,  269,  264,  265,  270,  254,
      266,  271,  258,  273,    0,  272,  274,  267,    0,  269,
      276,  275,  270,    0,    0,  271,  277,  273,  260,  272,
      274,    0,  261,  265,  276,  275,  264,  278,  262,    0,

      277,  267,  279,  281,  282,  266,    0,    0,  283,  284,
      285,  278,  269,  271,  272,  286,  279,  281,  282,  269,
      276,  270,  283,  284,  285,  273,  287,  274,  275,  286,
      277,  288,  290,  289,  291,  278,  292,  293,    0,  294,
      287,  296,  295,  297,  298,  288,  290,  289,  291,  281,
      292,  293,  279,  294,  299,  296,  295,  297,  298,  286,
      300,  301,  284,  287,  285,  302,  303,  304,  299,  290,
      305,  288,  289,  307,  300,  301,    0,    0,  308,  302,
      303,  304,  306,    0,  305,  292,  309,  307,  296,  291,
      295,  293,  308,    0,  306,  310,  306,  294,  311,  313,

      309,    0,  312,    0,    0,    0,  299,  304,  314,  310,
      315,  316,  311,  313,  317,  301,  312,  300,  303,  305,
        0,  318,  314,  320,  315,  316,  322,  307,  317,    0,
      319,  323,  321,  324,  311,  318,  325,  320,  328,  309,
      322,  326,  312,  313,  319,  323,  321,  324,    0,    0,
      325,  327,  328,    0,  329,  326,    0,    0,  330,    0,
      331,  314,  322,  316,  332,  327,  317,  315,  329,    0,
      319,  324,  330,  320,  331,  318,  321,  328,  332,  326,
      333,  334,  335,  325,  336,  339,  341,  340,  323,  327,
      337,  337,  337,  337,  333,  334,  335,  342,  336,  339,

      341,  340,  331,  338,  338,  338,  338,  330,  343,  344,
        0,  342,  345,  346,  347,  348,  338,  349,    0,  332,
        0,    0,  343,  344,  336,  335,  345,  346,  347,  348,
      341,  349,  350,  338,  340,  334,  351,    0,  352,  342,
      353,  354,  355,  343,  356,    0,  350,    0,    0,  351,
      351,  346,  352,    0,  353,  354,  355,  349,  356,  345,
      357,  344,  348,  358,  359,    0,  360,  347,    0,  361,
        0,  362,  363,  364,  357,    0,  350,  358,  359,  354,
      360,  365,  355,  361,  356,  362,  363,  364,    0,  353,
      366,  367,  352,    0,  368,  365,  357,  369,    0,    0,

      370,  371,  360,  372,  366,  367,  361,  363,  368,  373,
      374,  369,  358,  359,  370,  371,    0,  372,  375,  376,
        0,  377,  378,  373,  374,  379,  366,    0,  380,    0,
      365,  381,  375,  376,  368,  377,  378,  382,  367,  379,
      383,  371,  380,  372,  369,  381,    0,  370,  384,  385,
      386,  382,  387,  388,  383,    0,    0,  377,  375,  391,
      373,  374,  384,  385,  386,    0,  387,  388,  376,  380,
      389,  381,  390,  391,  392,  393,    0,  394,  396,  379,
      389,  395,  398,    0,  389,    0,  390,  397,  392,  393,
      387,  394,  396,    0,    0,  395,  398,  399,  400,  384,

        0,  397,  386,  385,    0,    0,  401,  388,  391,    0,
      402,  399,  400,  403,  393,  404,  390,  406,  394,  395,
      401,  405,    0,  397,  402,  396,  407,  403,  408,  404,
      409,  406,  410,  399,  411,  405,  398,  412,  413,    0,
      407,  400,  408,    0,  409,  402,  410,    0,  411,  414,
      402,  412,  413,  401,  415,  416,    0,  405,    0,  417,
        0,  406,  407,  414,  404,  418,  419,    0,  415,  416,
      409,  421,  412,  417,  420,  423,  422,  424,  425,  418,
      419,  410,  413,  411,  426,  421,  420,    0,  420,  423,
      422,  424,  425,  427,  428,    0,  429,    0,  426,    0,

        0,  415,    0,  414,  430,  432,  431,  427,  428,  416,
      429,  423,  417,  424,  418,  419,  422,  433,  430,  432,
      431,  435,  434,  421,    0,  436,  437,  438,  425,    0,
      439,  433,    0,    0,  428,  435,  434,  440,  426,  436,
      437,  438,  441,  429,  439,  431,  427,  431,  442,  430,
      443,  440,  444,  445,  446,  431,  441,  431,  447,  448,
      432,  434,  442,  449,  443,  436,  444,  445,  446,  450,
      433,  451,  447,  448,  452,  453,  455,  449,    0,  435,
      437,    0,  454,  450,  456,  451,  457,  440,  452,  453,
      455,  458,  441,  459,  460,  448,  454,  461,  456,  462,

      457,  463,  464,  449,  465,  458,  444,  459,  460,    0,
      466,  461,  468,  462,  452,  463,  464,  467,  465,  469,
      454,  470,  471,  450,  466,  472,  468,  473,  474,  476,
      475,  467,  477,  469,    0,  470,  471,    0,  464,  472,
      459,  473,  474,  476,  475,    0,  477,    0,  460,  478,
      479,  466,  462,    0,  465,  480,  481,  467,  470,  468,
      482,  472,  483,  478,  479,  484,  469,  475,  485,  480,
      481,  486,  487,  476,  482,  488,  483,  473,  489,  484,
      471,  490,  485,  491,  492,  486,  487,    0,  494,  488,
        0,  493,  489,  495,    0,  490,  481,  491,  492,    0,

      496,  479,  494,  499,  484,  493,  483,  495,  480,  497,
      486,  498,  500,  487,  496,  485,    0,  499,    0,  488,
      501,  502,  489,  497,  492,  498,  500,  493,  503,    0,
      491,  493,  494,  504,  501,  502,  505,    0,    0,  506,
      507,  508,  503,  495,  509,  510,  511,  504,  512,  497,
      505,  498,  496,  506,  507,  508,  513,  514,  509,  510,
      511,  515,  512,    0,  516,  517,    0,  518,  519,  520,
      513,  514,    0,  521,  505,  515,  522,  506,  516,  517,
      503,  518,  519,  520,    0,  504,  512,  521,  523,  524,
      522,  525,  526,  527,    0,    0,  509,  529,  515,  510,

      508,  528,  523,  524,  517,  525,  526,  527,  519,  513,
      514,  529,  530,  531,    0,  528,  520,  532,    0,  533,
      534,    0,    0,    0,  535,  536,  530,  531,  522,  523,
        0,  532,  526,  533,  534,  529,  528,  527,  535,  536,
      525,  537,  538,  540,  524,  539,    0,  530,  541,  542,
      543,  545,  544,    0,  546,  537,  538,  540,  549,  539,
      531,  547,  541,  542,  543,  545,  544,  534,  546,    0,
      548,  550,  549,    0,  535,  547,  551,  552,  553,  537,
      554,  555,    0,  541,  548,  550,  539,  544,  556,  557,
      551,  552,  553,  549,  554,  555,  538,  558,  539,  542,

      559,  540,  556,  557,  547,  545,    0,  560,  546,  561,
      548,  558,    0,  562,  559,  563,  564,  565,  566,    0,
      552,  560,  567,  561,  569,  568,  555,  562,    0,  563,
      564,  565,  566,  554,    0,  570,  567,  558,  569,  568,
      571,  572,  560,    0,  573,    0,    0,  574,  562,  570,
        0,    0,  565,  563,  571,  572,  575,  567,  573,  559,
      568,  574,  576,  561,  569,  577,  564,  578,  579,  580,
      575,  581,  566,  582,  583,  584,  576,  572,  585,  577,
      573,  578,  579,  580,  570,  581,  586,  582,  583,  584,
      587,  574,  585,  588,  571,  589,  575,    0,    0,  590,

      586,  591,  576,    0,  587,    0,  592,  588,  592,  589,
      593,  581,  583,  590,  594,  591,  577,  578,  595,  584,
      592,  596,  600,  597,  593,    0,  586,  598,  594,  599,
      589,  601,  595,  602,  603,  596,  600,  597,  604,  590,
      605,  598,  606,  599,    0,  601,  607,  602,  603,  608,
        0,  609,  604,  595,  605,  610,  606,  591,  597,  593,
      607,  611,  598,  608,  599,  609,  612,  613,    0,  610,
      614,  618,  616,    0,    0,  611,  603,  604,  617,  619,
      612,  613,  606,    0,  614,  618,  616,  609,  602,  620,
        0,  621,  617,  619,  622,  623,  624,  607,  605,  611,

        0,  608,  613,  620,  610,  621,  614,  616,  622,  623,
      624,  625,  626,  617,  619,  627,  628,  629,  630,  631,
      632,  635,  636,  637,    0,  625,  626,  638,  640,  627,
      628,  629,  630,  631,  632,  635,  636,  637,  621,  639,
        0,  638,  640,  622,    0,    0,  641,  624,  642,    0,
        0,  643,  626,  639,  631,  632,  635,  645,  631,  629,
      641,  644,  642,  625,  640,  643,  646,    0,  627,  647,
      628,  645,  630,  648,  649,  644,  650,  651,  652,  639,
      646,  638,  653,  647,  654,  655,    0,  648,  649,  657,
      650,  651,  652,  656,  658,  659,  653,  642,  654,  655,

      641,  644,  660,  657,  661,  662,  663,  656,  658,  659,
      649,  664,  651,  648,  665,  666,  660,    0,  661,  662,
      663,  649,  667,  669,  668,  664,    0,  670,  665,  666,
      652,  653,    0,  671,  672,  656,  667,  669,  668,  659,
      657,  670,  673,  654,    0,  674,  658,  671,  672,  675,
      676,  677,    0,  660,  678,  679,  673,  666,  662,  674,
      681,  664,    0,  675,  676,  677,  665,  669,  678,  679,
      680,  682,  683,  671,  681,  667,  668,  684,  685,  670,
      687,    0,    0,  686,  680,  682,  683,  688,  689,  677,
      690,  684,  685,    0,  687,  674,  673,  686,    0,  675,

      692,  688,  689,  691,  690,    0,  679,  682,  693,  676,
      694,    0,  683,    0,  692,    0,    0,  691,    0,  680,
      687,    0,  693,    0,  694,    0,    0,  689,    0,    0,
        0,    0,  685,    0,    0,  686,    0,    0,  691,    0,
        0,  688,    0,  693,    0,    0,    0,    0,    0,  690,
      696,  696,  696,  696,  696,  696,  696,  697,  697,    0,
      697,  697,  697,  697,  698,    0,    0,  698,  698,  698,
      699,  699,  700,  700,  701,  701,  701,  702,  702,  703,
      703,  703,  703,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,

      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define INITIAL 0
#line 10 "lexer.l"
import "ecdefs"
#define YYLTYPE Location
#define YY_NEVER_INTERACTIVE 1    // Avoid calling isatty on eC File object

#include "grammar.h"

bool echoOn = true;
public void SetEchoOn(bool b) { echoOn = b; }

extern YYLTYPE type_yylloc;
extern YYLTYPE expression_yylloc;

extern File fileInput;
int preprocessor();
int comment();

void TESTTTT()
{
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   type_yylloc.end.charPos += yyleng;
   type_yylloc.end.pos += yyleng;
   expression_yylloc.end.charPos += yyleng;
   expression_yylloc.end.pos += yyleng;
}

#define YY_USER_ACTION  \
   TESTTTT();

   /*
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   */

#define YY_INPUT(buf,result,max_size) \
   result = fileInput.Read(buf, 1, max_size) \

YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
File fileStack[MAX_INCLUDE_DEPTH];
char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
public void SetSomeSourceFileStack(char * fileName, int index) { strcpy(sourceFileStack[index], fileName); }
YYLTYPE locStack[MAX_INCLUDE_DEPTH];
AccessMode declModeStack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

#define uint _uint
default:

#line 1191 "lexer.ec"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 60 "lexer.l"



   yylloc.start = yylloc.end;
   type_yylloc.start = type_yylloc.end;
   expression_yylloc.start = expression_yylloc.end;


#line 1362 "lexer.ec"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 696 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2384 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 68 "lexer.l"
{ preprocessor(); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 69 "lexer.l"
{ comment(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 70 "lexer.l"
{ commentCPP(); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 72 "lexer.l"
{ return(AUTO); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 73 "lexer.l"
{ return(BREAK); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 74 "lexer.l"
{ return(CASE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 75 "lexer.l"
{ return(CHAR); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 76 "lexer.l"
{ return(CONST); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 77 "lexer.l"
{ return(CONTINUE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 78 "lexer.l"
{ return(DEFAULT); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 79 "lexer.l"
{ return(DO); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 80 "lexer.l"
{ return(DOUBLE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 81 "lexer.l"
{ return(ELSE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 82 "lexer.l"
{ return(ENUM); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 83 "lexer.l"
{ return(EXTERN); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 84 "lexer.l"
{ return(FLOAT); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 85 "lexer.l"
{ return(FOR); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 86 "lexer.l"
{ return(GOTO); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 87 "lexer.l"
{ return(IF); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 88 "lexer.l"
{ return(INT); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 89 "lexer.l"
{ return(UINT); }
	YY_BREAK
/* "uint16"            { return(UINT16); } */
/* "uint32"            { return(UINT32); } */
/* "bool"              { return(BOOL_TOKEN); } */
case 22:
YY_RULE_SETUP
#line 93 "lexer.l"
{ return(LONG); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 94 "lexer.l"
{ return(REGISTER); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 95 "lexer.l"
{ return(RETURN); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 96 "lexer.l"
{ return(SHORT); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 97 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 98 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 99 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 100 "lexer.l"
{ return(SIZEOF); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 101 "lexer.l"
{ return(ALIGNOF); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 102 "lexer.l"
{ return(STATIC); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 103 "lexer.l"
{ return(THREAD); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 104 "lexer.l"
{ return(STRUCT); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 105 "lexer.l"
{ return(SWITCH); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 106 "lexer.l"
{ return(TYPEDEF); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 107 "lexer.l"
{ return(UNION); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 108 "lexer.l"
{ return(UNSIGNED); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 109 "lexer.l"
{ return(VOID); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 110 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 111 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 112 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 113 "lexer.l"
{ return(WHILE); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 115 "lexer.l"
{ return(PROPERTY); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 116 "lexer.l"
{ return(SETPROP); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 117 "lexer.l"
{ return(GETPROP); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 118 "lexer.l"
{ return(ISPROPSET); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 119 "lexer.l"
{ return(CLASS); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 120 "lexer.l"
{ return(THISCLASS); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 121 "lexer.l"
{ return(VIRTUAL); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 122 "lexer.l"
{ return(DELETE); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 123 "lexer.l"
{ return(NEWOP); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 124 "lexer.l"
{ return(NEW0OP); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 125 "lexer.l"
{ return(RENEW); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 126 "lexer.l"
{ return(RENEW0); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 127 "lexer.l"
{ return(IMPORT); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 128 "lexer.l"
{ return(DEFINE); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 129 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 130 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 131 "lexer.l"
{ return(VALIST); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 132 "lexer.l"
{ return(VAARG); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 133 "lexer.l"
{ return(BOOL); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 134 "lexer.l"
{ return(_BOOL); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 135 "lexer.l"
{ return(_COMPLEX); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 136 "lexer.l"
{ return(_IMAGINARY); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 137 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
/* "__attribute__".?"(("({D}|{L})*"))" { return(EXT_ATTRIB); } */
/* DID I MEAN? "__attribute__"" "*"(("" "*({D}|{L})*" "*("("({D}|{L})*(" "*","" "*({D}|{L})*)*" "*")")?" "*"))" { return(EXT_ATTRIB); } */
/*
 "__attribute_deprecated__"(" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute__"           (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute"             (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 */
/*
 [__attribute__] [spaces]
   [((] [spaces]
      [digits | letters] [spaces]
         ( [(]  [digits or letters or "]  ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces]  [)] )?
      [spaces]
      ( [,] [spaces]  [digits or letters]  [spaces]
         ( [(]  [digits or letters or "]
            ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces] [)]
         )? [spaces]
      )*
   [))]
 */
/* "__attribute__".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); } */
/* "__attribute".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); }*/
case 66:
YY_RULE_SETUP
#line 164 "lexer.l"
{ return ATTRIB_DEP; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 165 "lexer.l"
{ return ATTRIB; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 166 "lexer.l"
{ return __ATTRIB; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 168 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 169 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 170 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 171 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 172 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 173 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 174 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 175 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 176 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 177 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 178 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 179 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 180 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 181 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 182 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 183 "lexer.l"
{ return(PUBLIC); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 184 "lexer.l"
{ return(PRIVATE); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 185 "lexer.l"
{ return(TYPED_OBJECT); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 186 "lexer.l"
{ return(ANY_OBJECT); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 187 "lexer.l"
{ return(_INCREF); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 188 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 189 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 190 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 191 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 192 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 193 "lexer.l"
{ return(TYPEOF); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 194 "lexer.l"
{ return(WATCH); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 195 "lexer.l"
{ return(STOPWATCHING); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 196 "lexer.l"
{ return(FIREWATCHERS); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 197 "lexer.l"
{ return(WATCHABLE); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 198 "lexer.l"
{ return(CLASS_DESIGNER); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 199 "lexer.l"
{ return(CLASS_NO_EXPANSION); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 200 "lexer.l"
{ return(CLASS_FIXED); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 201 "lexer.l"
{ return(CLASS_DEFAULT_PROPERTY); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 202 "lexer.l"
{ return(PROPERTY_CATEGORY); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 203 "lexer.l"
{ return(CLASS_DATA); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 204 "lexer.l"
{ return(CLASS_PROPERTY); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 205 "lexer.l"
{ return(SUBCLASS); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 206 "lexer.l"
{ return(NAMESPACE); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 207 "lexer.l"
{ return(DBTABLE); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 208 "lexer.l"
{ return(DBFIELD); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 209 "lexer.l"
{ return(DBINDEX); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 210 "lexer.l"
{ return(DATABASE_OPEN); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 212 "lexer.l"
{ return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); }  // ("::"|(({IDENT}"::")*)){IDENT}  { return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 214 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 215 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 216 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 217 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 219 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 220 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 221 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 223 "lexer.l"
{ return(STRING_LITERAL); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 225 "lexer.l"
{ return(ELLIPSIS); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 226 "lexer.l"
{ return(RIGHT_ASSIGN); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 227 "lexer.l"
{ return(LEFT_ASSIGN); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 228 "lexer.l"
{ return(ADD_ASSIGN); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 229 "lexer.l"
{ return(SUB_ASSIGN); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 230 "lexer.l"
{ return(MUL_ASSIGN); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 231 "lexer.l"
{ return(DIV_ASSIGN); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 232 "lexer.l"
{ return(MOD_ASSIGN); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 233 "lexer.l"
{ return(AND_ASSIGN); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 234 "lexer.l"
{ return(XOR_ASSIGN); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 235 "lexer.l"
{ return(OR_ASSIGN); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 236 "lexer.l"
{ return(RIGHT_OP); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 237 "lexer.l"
{ return(LEFT_OP); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 238 "lexer.l"
{ return(INC_OP); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 239 "lexer.l"
{ return(DEC_OP); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 240 "lexer.l"
{ return(PTR_OP); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 241 "lexer.l"
{ return(AND_OP); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 242 "lexer.l"
{ return(OR_OP); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 243 "lexer.l"
{ return(LE_OP); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 244 "lexer.l"
{ return(GE_OP); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 245 "lexer.l"
{ return(EQ_OP); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 246 "lexer.l"
{ return(NE_OP); }
	YY_BREAK
/* "::"        { return(CLASS_OP); } */
case 143:
YY_RULE_SETUP
#line 248 "lexer.l"
{ return(';'); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 249 "lexer.l"
{ return('{'); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 250 "lexer.l"
{ return('}'); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 251 "lexer.l"
{ return(','); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 252 "lexer.l"
{ return(':'); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 253 "lexer.l"
{ return('='); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 254 "lexer.l"
{ return('('); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 255 "lexer.l"
{ return(')'); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 256 "lexer.l"
{ return('['); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 257 "lexer.l"
{ return(']'); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 258 "lexer.l"
{ return('.'); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 259 "lexer.l"
{ return('&'); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 260 "lexer.l"
{ return('!'); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 261 "lexer.l"
{ return('~'); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 262 "lexer.l"
{ return('-'); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 263 "lexer.l"
{ return('+'); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 264 "lexer.l"
{ return('*'); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 265 "lexer.l"
{ return('/'); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 266 "lexer.l"
{ return('%'); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 267 "lexer.l"
{ return('<'); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 268 "lexer.l"
{ return('>'); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 269 "lexer.l"
{ return('^'); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 270 "lexer.l"
{ return('|'); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 271 "lexer.l"
{ return('?'); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 272 "lexer.l"
{ return('$'); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 274 "lexer.l"
{
      while(include_stack_ptr && !fileStack[include_stack_ptr-1])
      {
         --include_stack_ptr;
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }

      if ( --include_stack_ptr < 0 )
      {
         include_stack_ptr = 0;
         yyterminate();
      }
      else
      {
         delete fileInput;
         yy_delete_buffer( YY_CURRENT_BUFFER );
         fileInput = fileStack[include_stack_ptr];
         yylloc = locStack[include_stack_ptr];
         type_yylloc = locStack[include_stack_ptr];
         expression_yylloc = locStack[include_stack_ptr];
         yy_switch_to_buffer(include_stack[include_stack_ptr] );
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }
   }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 300 "lexer.l"
{ yylloc.start = yylloc.end; type_yylloc.start = type_yylloc.end; expression_yylloc.start = expression_yylloc.end;}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 301 "lexer.l"
{
   yylloc.end.charPos = 1; yylloc.end.line += yyleng; yylloc.start = yylloc.end;
   type_yylloc.end.charPos = 1; type_yylloc.end.line += yyleng; type_yylloc.start = type_yylloc.end;
   expression_yylloc.end.charPos = 1; expression_yylloc.end.line += yyleng; expression_yylloc.start = expression_yylloc.end;
   }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 306 "lexer.l"
{
   yylloc.start.charPos++ /*= 3 - (yylloc.start.col % 3)*/; yylloc.end.charPos = yylloc.start.charPos; yylloc.start.pos = yylloc.end.pos;
   expression_yylloc.start.charPos++ /*= 3 - (expression_yylloc.start.col % 3)*/; expression_yylloc.end.charPos = expression_yylloc.start.charPos; expression_yylloc.start.pos = expression_yylloc.end.pos;
   type_yylloc.start.charPos++ /*= 3 - (type_yylloc.start.col % 3)*/; type_yylloc.end.charPos = type_yylloc.start.charPos; type_yylloc.start.pos = type_yylloc.end.pos;
   }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 312 "lexer.l"
{ yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end; yyerror(); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 314 "lexer.l"
ECHO;
	YY_BREAK
#line 2366 "lexer.ec"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 696 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 696 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 695);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef _WIN32
#include <unistd.h>
#else
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 314 "lexer.l"


private:

yywrap()
{
   return(1);
}

int comment()
{
   int c, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      if(c == '/' && last == '*')
         break;
      last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int commentCPP()
{
   int c, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         break;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int preprocessor()
{
   int c, last = 0;
   int count = 0;
   char line[1024];

   line[0] = '\0';

   for(;;)
   {
      c = input();
      if(c == EOF) break;

      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         if(last != '\\')
         {
            char * pointer = line + 1;
            int lineNumber;
            line[count] = 0;
            lineNumber = GetValue(&pointer);
            if(lineNumber)
            {
               char fileName[MAX_LOCATION];

               int inOut;

               fileName[0] = 0;
               GetString(&pointer, fileName, MAX_LOCATION);
               inOut = GetValue(&pointer);

               if(inOut == 1)
               {
                  char extension[MAX_EXTENSION];

                  defaultDeclMode = declModeStack[include_stack_ptr] = declMode;

                  GetExtension(fileName, extension);
                  if(!strcmp(extension, "c") || !strcmp(extension, "h"))
                     declMode = defaultDeclMode = structDeclMode = defaultAccess;

                  fileStack[include_stack_ptr] = null;
                  include_stack_ptr++;
               }
               else if(inOut == 2)
               {
                  include_stack_ptr--;
                  defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
               }

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               //yylloc.end.pos -= count;

               if(include_stack_ptr > 0 || (lineNumber && fileName[0]))
                  yylloc.end.included = GetIncludeFileID(fileName);
               else
                  yylloc.end.included = 0;
            }
            /*
            int lineNumber = strtol(line+1, &endPtr, 0);
            if(lineNumber)
            {
               GetString(&
               endPtr

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               yylloc.end.pos -= count;
            }
            */
            break;
         }
         count = 0;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
         line[count++] = c;
      }
      else
      {
         yylloc.end.pos++;
         if(c != '\r')
         {
            yylloc.end.charPos++;
            line[count++] = c;
         }
      }
      last = c;
   }
   yylloc.start = yylloc.end;
   line[count] = 0;

   TrimLSpaces(line, line);
   for(c = 0; line[c] && line[c] != ' '; c++);
   if(!strncmp(line, "include", c))
   {
      char includeFile[MAX_LOCATION] = "";

      memmove(line, line+c, strlen(line+c)+1);
      TrimLSpaces(line, line);
      if(line[0] == '\"')
      {
         for(c = 1; line[c]; c++)
         {
            if(line[c] == '\"')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
         }
      }
      else if(line[0] == '<')
      {
         for(c = 1; line[c]; c++)
            if(line[c] == '>')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
      }

      if ( include_stack_ptr >= MAX_INCLUDE_DEPTH )
      {
         fprintf( stderr, $"Includes nested too deeply" );
         exit( 1 );
      }

      if(inCompiler || !FindIncludeFileID(includeFile))
      {
         File file = OpenIncludeFile(includeFile);
         if(file)
         {
            char extension[MAX_EXTENSION];

            fileStack[include_stack_ptr] = fileInput;
            locStack[include_stack_ptr] = yylloc;
            defaultDeclMode = declModeStack[include_stack_ptr] = declMode;
            include_stack[include_stack_ptr++] = YY_CURRENT_BUFFER;

            yylloc.start.charPos = yylloc.end.charPos = 1;
            yylloc.start.line = yylloc.end.line = 1;
            yylloc.start.pos = yylloc.end.pos = 0;
            yylloc.start.included = yylloc.end.included = GetIncludeFileID(includeFile);

            GetExtension(includeFile, extension);
            if(!strcmp(extension, "c") || !strcmp(extension, "h"))
               declMode = defaultDeclMode = structDeclMode = defaultAccess;

            fileInput = file;
            yy_switch_to_buffer( yy_create_buffer( fileInput, YY_BUF_SIZE ) );
            BEGIN(INITIAL);
         }
         else
            printf("");
      }
   }
   return 0;
}

public void resetScanner()
{
   YY_FLUSH_BUFFER;
   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;
}

void resetScannerPos(CodePosition pos)
{
   YY_FLUSH_BUFFER;
   yylloc.start = yylloc.end = pos;
   type_yylloc.start = type_yylloc.end = pos;
   expression_yylloc.start = expression_yylloc.end = pos;
}

class LexerBackup
{
   YYLTYPE yylloc;
   YYLTYPE type_yylloc;
   YYLTYPE expression_yylloc;

   AccessMode declMode;
   AccessMode defaultDeclMode;

   File fileInput;
   YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
   File fileStack[MAX_INCLUDE_DEPTH];
   char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
   YYLTYPE locStack[MAX_INCLUDE_DEPTH];
   AccessMode declModeStack[MAX_INCLUDE_DEPTH];
   int include_stack_ptr;
   YY_BUFFER_STATE buffer;

   int yy_n_chars;
   char * yytext_ptr;
   char * yy_c_buf_p;
   FILE * yyin;
   char yy_hold_char;
   int yychar;
   int yy_init;
   int yy_start;

};

LexerBackup pushLexer()
{
   LexerBackup backup { };

   backup.yylloc = yylloc;
   backup.type_yylloc = type_yylloc;
   backup.expression_yylloc = expression_yylloc;
   backup.fileInput = fileInput;
   memcpy(backup.include_stack, include_stack, sizeof(include_stack));
   memcpy(backup.fileStack, fileStack, sizeof(fileStack));
   memcpy(backup.sourceFileStack, sourceFileStack, sizeof(sourceFileStack));
   memcpy(backup.locStack, locStack, sizeof(locStack));
   memcpy(backup.declModeStack, declModeStack, sizeof(declModeStack));
   backup.include_stack_ptr = include_stack_ptr;
   backup.defaultDeclMode = defaultDeclMode;
   backup.declMode = declMode;
   backup.buffer = yy_current_buffer;

   backup.yy_n_chars = yy_n_chars;
   backup.yytext_ptr = yytext_ptr;
   backup.yy_c_buf_p = yy_c_buf_p;
   backup.yyin = yyin;
   backup.yy_hold_char = yy_hold_char;
   backup.yychar = yychar;
   backup.yy_init = yy_init;
   backup.yy_start = yy_start;

   yy_init = 1;

   yy_current_buffer = 0;

   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;

   return backup;
}

void popLexer(LexerBackup backup)
{
   yylloc = backup.yylloc;
   type_yylloc = backup.type_yylloc;
   expression_yylloc = backup.expression_yylloc;
   fileInput = backup.fileInput;
   memcpy(include_stack, backup.include_stack, sizeof(include_stack));
   memcpy(fileStack, backup.fileStack, sizeof(fileStack));
   memcpy(sourceFileStack, backup.sourceFileStack, sizeof(sourceFileStack));
   memcpy(locStack, backup.locStack, sizeof(locStack));
   memcpy(declModeStack, backup.declModeStack, sizeof(declModeStack));
   include_stack_ptr = backup.include_stack_ptr;
   defaultDeclMode = backup.defaultDeclMode;
   declMode = structDeclMode = backup.declMode;

   // yy_switch_to_buffer(backup.buffer);
   yy_current_buffer = backup.buffer;
   yy_n_chars = backup.yy_n_chars;
   yytext_ptr = backup.yytext_ptr;
   yy_c_buf_p = backup.yy_c_buf_p;
   yyin = backup.yyin;
   yy_hold_char = backup.yy_hold_char;
   yychar = backup.yychar;
   yy_init = backup.yy_init;
   yy_start = backup.yy_start;

   delete backup;
}
