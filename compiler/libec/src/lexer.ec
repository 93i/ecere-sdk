#line 2 "lexer.ec"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 176
#define YY_END_OF_BUFFER 177
static yyconst short int yy_accept[720] =
    {   0,
      112,  112,  177,  175,  173,  172,  171,  174,  158,  175,
        1,  170,  164,  157,  175,  152,  153,  162,  161,  149,
      160,  156,  163,  118,  118,  150,  146,  165,  151,  166,
      169,  112,  112,  112,  154,  155,  167,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  147,  168,  148,  159,  145,
        0,  123,    0,  131,  148,  140,  132,    0,    0,  129,
      137,  127,  138,  128,  139,    0,  121,    2,    3,  130,
      122,  117,    0,  118,    0,  118,  112,  155,  147,  154,
      136,  142,  144,  143,  135,    0,  112,    0,  112,    0,

        0,  133,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,   11,  112,  112,  112,  112,  112,  112,  112,  112,
       19,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  134,  141,  119,  124,    0,  121,
      121,    0,  122,  117,    0,  120,    0,  113,  112,  126,
      125,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
       92,  112,  112,  112,  112,  112,  112,  112,  112,  112,

      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
       17,   45,  112,  112,  112,  112,   20,  112,  112,  112,
       51,  112,  112,  112,  112,  112,  112,  112,   44,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,    0,  121,
        0,  121,    0,  122,  120,  115,  116,  113,    0,  112,
      112,   61,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,    4,  112,    6,    7,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,

      112,   13,   14,  112,  112,  112,   18,  112,  112,  112,
      112,  112,   22,  112,   52,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,   21,  112,  112,  112,   38,  112,  112,
      112,    0,  121,  115,  115,    0,  115,  115,  116,    0,
        0,  114,   62,  112,  112,  112,   93,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,    5,   47,    8,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,   16,  112,  112,  112,   58,   46,  112,  112,  112,

      112,  112,   53,  112,  112,   25,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,   36,  112,  112,  112,
       95,   42,    0,  115,  115,  115,    0,    0,  116,  114,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,   56,
       50,  112,  112,   12,   15,  112,   55,   88,   72,  112,
      112,  112,   84,  112,   54,  112,   24,   26,   29,   31,
      112,  112,   33,  112,   34,  112,  112,  112,  112,  112,
      112,  112,    0,  115,  112,  112,  112,   91,  112,  112,

       76,   82,  112,  112,  112,   57,  112,  112,  112,  112,
      112,  112,  112,   70,  112,  112,  112,  112,  112,  112,
      112,  112,  109,  110,  108,   10,  112,  112,  112,  112,
       85,  112,  112,  112,   80,  112,  112,  112,  112,   35,
      112,   49,  112,  112,   63,  112,  112,  112,  112,  112,
      112,   71,  112,   27,  112,   32,   94,  112,  112,   79,
      112,  112,  112,  112,  112,  112,    9,  112,  112,  112,
      112,  112,   43,   23,   65,  112,  106,  112,  112,   37,
       39,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,   77,  112,  112,  112,  112,  112,  112,  112,  112,

      112,  112,   74,   75,  112,  107,  112,  112,   48,  112,
       98,   64,  112,  112,  112,  112,  112,   69,   81,   28,
      112,   41,  112,   87,  104,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,   30,   68,  112,    0,  112,
      112,   78,  112,   90,  112,  112,  101,  112,  112,  112,
      112,  112,  112,  112,  112,  112,   73,    0,  112,   83,
       40,  112,  112,  112,  112,  112,   97,  112,   96,   86,
       67,  112,  112,   89,  112,  112,  112,  112,  111,  112,
      112,  112,  112,  112,   99,  112,  105,  112,  112,  112,
      112,  112,  112,  112,  112,   60,  112,  112,  112,  112,

      112,   59,  112,  112,  103,  112,  112,  100,  112,  112,
      112,  112,  112,  112,  112,  102,  112,   66,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
       22,   23,   22,   24,   22,   22,   22,   25,   26,   27,
       28,   29,   30,    1,   31,   32,   33,   31,   34,   35,
       36,   36,   37,   38,   36,   39,   36,   36,   36,   40,
       36,   36,   36,   36,   41,   36,   36,   42,   36,   36,
       43,   44,   45,   46,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   36,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[77] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    3,    1,    4,    1,    1,    1,    1,    5,    1,
        6,    6,    6,    6,    2,    1,    1,    1,    1,    1,
        7,    7,    7,    7,    7,    8,    8,    8,    8,    8,
        8,    8,    1,    1,    1,    1,    8,    7,    7,    7,
        7,    7,    7,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[729] =
    {   0,
        0,    0,  247, 2557, 2557, 2557, 2557, 2557,  217,   70,
     2557, 2557,   50,   69,  183, 2557, 2557,  194,   65, 2557,
       66,   64,   76,   96,   79,   80, 2557,   97,  183,   61,
     2557,   81,   88,  116, 2557, 2557,  159,  132,  115,   87,
      143,  147,  131,  148,  156,  160,  121,  164,  136,  203,
      204,  206,  208,  212,  224, 2557,   88, 2557, 2557, 2557,
      101, 2557,  175, 2557, 2557, 2557, 2557,  182,  174, 2557,
     2557, 2557, 2557, 2557, 2557,  151,  259, 2557, 2557, 2557,
      298,  339,  218,  247,  125,    0,    0, 2557, 2557, 2557,
      111, 2557, 2557, 2557,  108,  106,  149,  104,  213,  186,

       67, 2557,  233,  237,  232,  396,  221,  240,  241,  242,
      265,  298,  313,  306,  318,  319,  323,  315,  316,  334,
      331,  363,  364,  372,  328,  374,  375,  390,  391,  392,
      393,  400,  409,  401,  394,  411,  398,  416,  424,  431,
      399,  458,  459,  463,  466,  465,  468,  469,  475,  470,
      476,  478,  487,  491, 2557, 2557, 2557, 2557,  527,  517,
      556,  541,  546,  530,  483,  595,    0,  601,    0, 2557,
     2557,    0,  533,  498,  550,  403,  596,  589,  612,  618,
      611,  624,  620,  642,  517,  648,  600,  654,  658,  664,
      497,  665,  666,  667,  669,  671,  675,  676,  571,  677,

      682,  695,  692,  693,  701,  704,  710,  712,  714,  717,
      508,  721,  723,  736,  742,  743,  747,  744,  748,  749,
      765,  752,  764,  767,  768,  769,  770,  772,  780,  789,
      793,  792,  797,  798,  804,  805,  800,  808,  817,  821,
      820,  826,  824,  827,  830,  836,  845,  832,  854,  875,
      884,  875,  894,  899,  900,  905,  948,  936,  992,    0,
      854,  858,  860,  878,  876,  935,  965,  900,  938,  995,
      998,  879, 1001, 1006, 1008, 1007, 1011,  925, 1013, 1010,
     1016, 1018, 1028, 1017, 1019, 1023, 1026, 1029, 1035, 1038,
     1039, 1041, 1045, 1060, 1064, 1066, 1069, 1071, 1073, 1076,

     1081, 1077, 1082, 1092, 1094, 1098, 1097, 1101, 1099, 1107,
     1104, 1103, 1109, 1110, 1114, 1130, 1120, 1127, 1133, 1135,
     1136, 1137, 1142, 1155, 1148, 1146, 1163, 1159, 1165, 1166,
     1168, 1170, 1171, 1174, 1178, 1181, 1194, 1198, 1201, 1202,
     1206, 1219, 1225,    0, 1215, 1257, 1247,    0, 1255, 1297,
     1241, 1301, 1205, 1258, 1245, 1277, 1213, 1280, 1284, 1226,
     1305, 1316, 1317, 1321, 1323, 1324, 1326, 1334, 1339, 1341,
     1351, 1342, 1354, 1357, 1360, 1361, 1363, 1367, 1369, 1370,
     1372, 1387, 1389, 1391, 1395, 1397, 1396, 1400, 1402, 1408,
     1412, 1413, 1415, 1417, 1421, 1418, 1430, 1433, 1440, 1441,

     1442, 1446, 1451, 1453, 1450, 1457, 1463, 1466, 1468, 1469,
     1472, 1473, 1474, 1475, 1476, 1479, 1478, 1491, 1496, 1499,
     1502, 1504, 1275, 1535,    0, 1508, 1559, 1563, 1574, 1564,
     1526, 1529, 1568, 1589, 1551, 1523, 1593, 1594, 1597, 1613,
     1614, 1617, 1621, 1624, 1623, 1630, 1626, 1632, 1634, 1639,
     1633, 1636, 1643, 1642, 1645, 1652, 1654, 1655, 1661, 1538,
     1658, 1670, 1676, 1686, 1689, 1691, 1694, 1697, 1701, 1704,
     1706, 1709, 1710, 1712, 1714, 1717, 1719, 1722, 1725, 1729,
     1730, 1734, 1735, 1737, 1738, 1740, 1745, 1755, 1757, 1758,
     1760, 1761, 1755, 1799, 1762, 1770, 1773, 1779, 1780, 1786,

     1781, 1788, 1790, 1801, 1805, 1803, 1814, 1816, 1820, 1822,
     1829, 1835, 1837, 1838, 1839, 1840, 1858, 1860, 1850, 1861,
     1863, 1865, 1869, 1870, 1876, 1878, 1886, 1888, 1889, 1893,
     1894, 1896, 1897, 1898, 1909, 1913, 1915, 1916, 1917, 1919,
     1920, 1921, 1922, 1924, 1926, 1937, 1943, 1944, 1945, 1947,
     1948, 1965, 1964, 1966, 1967, 1954, 1973, 1975, 1977, 1982,
     1983, 1984, 1992, 1994, 1999, 2004, 2005, 2007, 2010, 2011,
     2012, 2016, 2027, 2017, 2033, 2036, 2037, 2038, 2040, 2044,
     2045, 2048, 2060, 2061, 2064, 2067, 2068, 2070, 2069, 2071,
     2073, 2076, 2077, 2079, 2088, 2094, 2096, 2099, 2100, 2101,

     2111, 2116, 2122, 2123, 2124, 2132, 2134, 2135, 2139, 2140,
     2145, 2147, 2150, 2152, 2155, 2156, 2157, 2160, 2162, 2168,
     2175, 2177, 2178, 2183, 2185, 2187, 2188, 2190, 2194, 2195,
     2196, 2203, 2205, 2215, 2206, 2218, 2221, 2223,   96, 2225,
     2226, 2224, 2227, 2233, 2244, 2250, 2252, 2254, 2255, 2270,
     2259, 2267, 2271, 2272, 2276, 2274, 2557,   68, 2279, 2275,
     2277, 2280, 2282, 2283, 2287, 2295, 2303, 2305, 2304, 2307,
     2324, 2325, 2326, 2329, 2333, 2330, 2334, 2336, 2337, 2354,
     2341, 2353, 2356, 2357, 2358, 2359, 2361, 2364, 2365, 2362,
     2377, 2380, 2381, 2385, 2386, 2388, 2389, 2390, 2398, 2407,

     2408, 2410, 2411, 2414, 2416, 2420, 2429, 2423, 2432, 2436,
     2439, 2440, 2442, 2445, 2448, 2451, 2452, 2455, 2557, 2516,
     2524, 2531, 2535, 2536, 2539, 2541, 2543, 2548
    } ;

static yyconst short int yy_def[729] =
    {   0,
      719,    1,  719,  719,  719,  719,  719,  719,  719,  720,
      719,  719,  719,  719,  721,  719,  719,  719,  719,  719,
      719,  719,  719,  719,   24,  719,  719,  719,  719,  719,
      719,  722,  722,  722,  719,  719,  719,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  719,  719,  719,  719,  719,
      720,  719,  720,  719,  719,  719,  719,  721,  721,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  723,   25,  724,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  722,  719,  722,  720,

      721,  719,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  725,  723,  726,  719,
      719,  727,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,

      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  719,   77,
      719,  719,  719,   81,  719,  725,  719,  719,  719,  726,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,

      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  719,  161,  256,  719,  719,  257,  347,  719,  719,
      719,  719,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,

      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  719,  719,  347,  719,  719,  719,  719,  719,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  719,  719,  722,  722,  722,  722,  722,  722,

      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,

      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  728,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  719,  728,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,

      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,    0,  719,
      719,  719,  719,  719,  719,  719,  719,  719
    } ;

static yyconst short int yy_nxt[2634] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   25,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   32,   32,   32,   32,   32,   32,   34,   32,
       32,   32,   35,    4,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   32,   46,   32,   32,   47,   32,
       48,   32,   49,   50,   51,   52,   53,   54,   55,   32,
       32,   32,   56,   57,   58,   59,   62,   64,   65,   66,
       71,  657,   76,   73,   77,   77,   77,   77,   94,   95,
       78,   96,   72,   74,   75,   79,   67,   96,   96,   86,

       86,   86,   86,   80,   87,   98,   89,   62,   88,  657,
       69,   98,   98,   63,   81,  155,   82,   82,   82,   82,
      719,   90,  100,   91,   92,   96,   96,  101,  172,   83,
       98,   96,   84,   84,   84,  171,   84,   85,  170,   98,
       98,   96,   96,  167,   63,   98,   96,   83,  719,   99,
      113,   84,   84,   96,   84,   98,   98,   96,   96,   96,
       98,  156,   84,  103,  104,   85,   96,   98,  105,  158,
       96,   98,   98,   98,   96,  110,  719,  719,  106,  111,
       98,  112,  135,  107,   98,   68,  102,  108,   98,  123,
      114,  124,   62,  157,  118,  119,  109,  115,  120,  138,

      125,  116,  139,  126,  117,  121,  127,  129,  122,  128,
       93,  136,  131,   96,   96,  137,   96,  130,   96,  132,
      133,   70,   96,   96,  134,   69,   69,   98,   98,   63,
       98,   96,   98,  165,   96,  165,   98,   98,  166,  166,
      166,  166,   96,   96,   60,   98,  719,   96,   98,  719,
       96,   96,   96,  719,  140,  141,   98,   98,  142,  143,
      147,   98,  719,  149,   98,   98,   98,  151,  150,  144,
      145,  153,  146,  152,  173,   96,  148,  719,  154,   77,
       77,   77,   77,   84,   84,   84,  719,   84,  719,   98,
      187,  176,  159,  160,  174,  160,  160,  160,  175,  719,

      188,  719,   84,   84,  719,   84,  189,  719,   96,  719,
      159,  160,  190,   84,  160,  160,   96,  160,  161,  161,
      161,  161,   98,   96,  191,   96,   96,  719,   96,   96,
       98,  162,  163,   96,  163,  163,  163,   98,   96,   98,
       98,   96,   98,   98,   96,  719,  719,   98,  719,  162,
      163,  719,   98,  163,  163,   98,  163,   81,   98,   82,
       82,   82,   82,  192,  193,  195,  196,  719,  199,  719,
      194,  200,   83,   96,   96,  164,  164,  164,  719,  164,
      198,  201,   96,  197,   96,   96,  202,   98,   98,  204,
       83,  719,  203,  208,  164,  164,   98,  164,   98,   98,

       96,   96,   96,   96,   96,  164,   96,  719,   96,   96,
       96,   96,  719,   96,   98,   98,   98,   98,   98,   96,
       98,   96,   98,   98,   98,   98,   96,   98,  206,  205,
      719,  719,  719,   98,   96,   98,  210,  209,  207,  719,
       98,   96,  719,  177,  178,  179,  180,  181,   98,  719,
      265,  182,  719,  211,  219,   98,  212,  213,  215,  183,
      184,  185,  214,  186,  229,  218,  221,  216,   96,   96,
      220,  222,  224,   96,  217,   96,   96,  223,   96,   96,
       96,  719,   98,   98,  225,   96,   96,   98,   96,   98,
       98,  226,   98,   98,   98,  227,  228,   96,  719,   98,

       98,   96,   98,  166,  166,  166,  166,   96,   96,  719,
      233,   98,  231,  234,  237,   98,  719,  719,   96,  230,
      238,   98,   98,  239,  235,  242,  236,   96,  719,  719,
      232,  240,   98,  245,  243,  241,  246,  719,  719,  244,
      719,   98,  249,   96,  249,  719,  248,  250,  250,  250,
      250,  160,  247,  160,  160,  160,  253,   98,  253,  263,
       96,  254,  254,  254,  254,  719,  164,  164,  164,  160,
      164,  278,  160,  160,   98,  160,  161,  161,  161,  161,
      163,   96,  163,  163,  163,  164,  164,  279,  164,  251,
      252,  262,  252,  252,  252,   98,  164,  719,  163,   96,

      719,  163,  163,  719,  163,  719,   96,  251,  252,  264,
       96,  252,  252,   98,  252,  166,  166,  166,  166,  257,
       98,   96,   96,  719,   98,  719,  293,  719,   96,  255,
       96,  255,  255,  255,   96,   98,   98,  258,  258,  258,
      259,  258,   98,  719,   98,  719,  719,  255,   98,  719,
      255,  255,   96,  255,  266,  269,  258,  258,   96,  258,
      267,  268,  270,  259,   96,  281,   98,  258,   96,  272,
      719,  275,   98,  271,   96,   96,   96,   96,   98,   96,
      273,   96,   98,  719,  274,   96,   96,   96,   98,   98,
       98,   98,   96,   98,  719,   98,  719,  276,  719,   98,

       98,   98,   96,   96,  719,   96,   98,  277,  283,  280,
      284,   96,  282,  286,   96,  719,   98,   98,  287,   98,
       96,  719,   96,  292,   96,   98,  285,   96,   98,  295,
      719,   96,  288,   96,   98,  289,   98,  294,   98,  290,
      291,   98,  296,  298,  299,   98,   96,   98,  300,  301,
      297,  719,   96,   96,   96,  302,  719,   96,   96,   96,
       98,  719,   96,  304,  306,  305,   98,   98,   98,  303,
      311,   98,   98,   98,   96,   96,   98,   96,   96,   96,
       96,  719,   96,  719,  307,  315,  719,  719,   98,   98,
       96,   98,   98,   98,   98,  312,   98,  308,  310,   96,

      314,  313,   96,   96,   98,  309,  719,   96,   96,  719,
       96,  719,  719,   98,   96,   96,   98,   98,   96,  316,
      320,   98,   98,  319,   98,  318,  317,   96,   98,   98,
       96,   96,   98,  719,   96,  321,   96,   96,  322,  719,
       96,   98,   96,  325,   98,   98,   96,  327,   98,  330,
       98,   98,  323,  324,   98,   96,   98,  719,  719,  719,
       98,  719,  326,  719,   96,  719,  328,  719,   96,   98,
       96,  329,  333,  331,  250,  250,  250,  250,   98,  336,
      338,  332,   98,  339,   98,  334,   96,  335,   96,   96,
      341,  719,  337,  719,  340,  250,  250,  250,  250,  342,

       98,  342,   98,   98,  343,  343,  343,  343,  719,  252,
       96,  252,  252,  252,  254,  254,  254,  254,  353,  254,
      254,  254,  254,  719,   98,  719,  719,  252,  362,  355,
      252,  252,  719,  252,  255,   96,  255,  255,  255,  344,
      354,  345,  345,  345,  346,   96,  719,  719,   96,   98,
      719,  719,  255,  719,  719,  255,  255,  344,  255,   98,
      345,  345,   98,  345,  719,  358,  719,  346,  347,  347,
      347,  347,  258,  258,  258,   96,  258,  719,  347,  347,
      347,  347,  348,  719,  349,  349,  349,  350,  369,   98,
      356,  258,  258,  359,  258,  347,  347,  347,  347,  347,

      348,  719,  258,  349,  349,   96,  349,  351,   96,  351,
      350,   96,  352,  352,  352,  352,   96,   96,   96,   98,
       96,   96,   98,   96,  357,   98,   96,   96,   96,   96,
       98,   98,   98,   96,   98,   98,   96,   98,   96,   96,
       98,   98,   98,   98,  719,   96,  360,   98,   96,   96,
       98,   96,   98,   98,  719,   96,  719,  719,  361,   98,
      367,  368,   98,   98,  364,   98,  363,  372,  371,   98,
       96,  365,  366,  373,   96,  370,   96,  374,  375,   96,
      376,   96,  719,   96,   98,  719,   96,   96,   98,  380,
       98,   96,   96,   98,  379,   98,  381,   98,  719,  377,

       98,   98,   96,  378,   96,   98,   98,   96,   96,   96,
      382,   96,  383,   96,   96,  719,   98,   96,   98,   96,
       96,   98,   98,   98,   96,   98,  396,   98,   98,  385,
       96,   98,  384,   98,   98,  388,  386,   96,   98,  389,
       96,  719,  387,   96,   98,   96,   96,   96,  719,  719,
      394,   98,   96,  719,   98,  390,   96,   98,   96,   98,
       98,   98,  391,  392,  393,   96,   98,  395,  397,   96,
       98,  400,   98,   96,  398,   96,   96,  399,   96,   98,
       96,   96,  401,   98,   96,  719,  719,   98,   96,   98,
       98,   96,   98,  719,   98,   98,  719,  402,   98,  404,

      405,  409,   98,  403,   96,   98,  407,  406,   96,  408,
      410,   96,   96,  719,  412,   96,   96,  414,   98,  415,
      719,  416,   98,   96,  413,   98,   98,  411,  719,   98,
       98,  719,  719,  719,  418,  719,   96,   98,  417,  343,
      343,  343,  343,  719,  719,  343,  343,  343,  343,  345,
       98,  345,  345,  345,  719,   96,  421,  422,  719,  434,
      419,  352,  352,  352,  352,  719,  420,  345,   96,   98,
      345,  345,  423,  345,  423,  437,  719,  424,  424,  424,
      424,  425,   98,  426,  426,  426,  427,   96,  719,  349,
       96,  349,  349,  349,   96,  424,  424,  424,  424,  425,

      432,   98,  426,  426,   98,  426,  719,  349,   98,  427,
      349,  349,  428,  349,  428,   96,  431,  429,  429,  429,
      429,  352,  352,  352,  352,  719,   96,   96,  719,   98,
      433,   96,  719,   96,   96,  430,   96,  430,  430,  430,
       98,   98,  436,  435,   96,   98,  442,   98,   98,   96,
       98,   96,   96,  430,  719,  719,  430,  430,   98,  430,
      719,   96,  719,   98,   96,   98,   98,   96,  440,  438,
       96,   96,  719,   96,  439,   98,  441,   96,   98,   96,
       96,   98,   96,  445,   98,   98,  444,   98,  719,  443,
      446,   98,  447,   98,   98,  719,   98,   96,  448,   96,

      719,   96,  449,  719,  451,   96,   96,   96,  452,  453,
       96,   98,   96,   98,  450,   98,  719,  455,   96,   98,
       98,   98,   96,   96,   98,   96,   98,   96,   96,  454,
      456,   96,   98,  719,  719,  719,   98,   98,  457,   98,
       96,   98,   98,   96,  719,   98,  460,  458,  461,  459,
       96,   96,   96,  464,   98,  719,   96,   98,  462,  466,
       96,   96,  463,   96,   98,   98,   98,   96,  465,  468,
       98,  475,  469,   96,   98,   98,   96,   98,   96,   96,
      467,   98,   96,   96,   96,   96,   96,   98,   96,   96,
       98,  473,   98,   98,  719,  470,   98,   98,   98,   98,

       98,   96,   98,   98,  472,  471,   96,  719,  476,   96,
      477,  474,   96,  478,   96,   98,  719,  480,  479,  482,
       98,  484,  719,   98,  719,  487,   98,  481,   98,  485,
      488,  719,  719,   96,  486,  719,   96,  719,  483,   96,
      719,  719,  426,  490,  426,  426,  426,   98,   96,  492,
       98,  489,  719,   98,  491,  424,  424,  424,  424,  719,
      426,   96,   98,  426,  426,  719,  426,  719,  719,  345,
      719,  345,  345,  345,  493,   98,  493,  495,   96,  494,
      494,  494,  494,  429,  429,  429,  429,  345,  500,  496,
      345,  345,   98,  345,  429,  429,  429,  429,  430,   96,

      430,  430,  430,   96,   96,  719,  499,   96,  349,  719,
      349,  349,  349,   98,  719,  719,  430,   98,   98,  430,
      430,   98,  430,   96,   96,  719,  349,   96,  497,  349,
      349,   96,  349,   96,   96,  498,   96,   98,   98,  506,
       96,   98,   96,   96,   96,   98,   96,   98,   98,   96,
       98,  501,   96,   96,   98,   96,   98,   98,   98,  502,
       98,  503,   96,   98,   96,   96,   98,   98,   96,   98,
      509,   96,  719,  504,  505,  508,   98,  510,   98,   98,
       96,  719,   98,  719,  507,   98,   96,  511,  719,  719,
      514,  515,  516,  517,   98,  518,   96,  512,  513,   96,

       98,   96,  523,  519,   96,  520,  525,   96,  521,  522,
       98,   96,  719,   98,   96,   98,   96,  719,   98,   96,
       96,   98,   96,  524,   96,   98,  526,   96,   98,   96,
       98,  527,   96,   98,   98,   96,   98,  528,   98,   96,
       96,   98,  719,   98,   96,   96,   98,   96,   96,   98,
       96,  530,  719,   98,   98,   96,  529,  531,   98,   98,
      719,   98,   98,  533,   98,   96,  534,   96,   96,   98,
       96,   96,   96,  719,  532,  494,  494,  494,  494,   98,
       96,   98,   98,   96,   98,   98,   98,  538,  535,   96,
       96,   96,  719,  719,   98,  719,   96,   98,   96,  536,

       96,  537,  719,   98,   98,   98,  539,  540,  541,  544,
       98,   96,   98,   96,   98,   96,  542,  546,  543,  494,
      494,  494,  494,  719,   96,   98,   96,   98,  548,   98,
       96,  545,   96,  426,  547,  426,  426,  426,   98,   96,
       98,  549,  719,  719,   98,   96,   98,   96,   96,   96,
       96,  426,  550,   98,  426,  426,  552,  426,  719,   98,
       96,   98,   98,   98,   98,  551,  554,  719,   96,  553,
       96,   96,  556,   96,   98,   96,  719,  719,  555,   96,
       96,  557,   98,  719,   98,   98,   96,   98,   96,   98,
      558,  561,  559,   98,   98,  719,   96,  560,   96,   96,

       98,  719,   98,   96,   96,  562,   96,   96,   96,  563,
       98,  565,   98,   98,  567,  564,  568,   98,   98,   96,
       98,   98,   98,   96,  566,   96,   96,   96,  719,   96,
       96,   96,   96,   98,   96,  719,   96,   98,  571,   98,
       98,   98,  572,   98,   98,   98,   98,   96,   98,  569,
       98,  570,  719,   96,   96,   96,  719,   96,   96,  719,
      574,   98,  576,  575,   96,  579,  573,   98,   98,   98,
      580,   98,   98,  581,   96,   96,   96,   96,   98,  577,
      578,  719,  582,   96,  719,   96,  719,   96,   98,   98,
       98,   98,   96,   96,   96,  584,  719,   98,  587,   98,

      583,   98,   96,  588,   96,  586,   98,   98,   98,   96,
      585,  589,  591,  590,   96,   96,   98,   96,   98,  719,
       96,   96,   96,   98,  719,  592,   96,   96,   98,   98,
      719,   98,  595,  593,   98,   98,   98,   96,  594,  719,
       98,   98,  719,   96,  597,  600,   96,   96,   96,  596,
       96,   98,  719,  602,   96,   96,  598,   98,   96,  719,
       98,   98,   98,  599,   98,  601,  605,  606,   98,   98,
       96,   96,   98,  607,   96,  603,  604,   96,   96,   96,
       96,   96,  719,   96,   98,   98,   96,   96,   98,   96,
      608,   98,   98,   98,   98,   98,  610,   98,   96,  611,

       98,   98,  609,   98,   96,  719,   96,  613,  719,   96,
       96,   96,   98,  615,  719,  618,  719,  616,   98,  620,
       98,   96,  621,   98,   98,   98,   96,  719,  622,  614,
      612,  617,   96,   96,   96,   98,  619,  719,  719,  623,
       98,  625,   96,  626,   96,   96,   98,   98,   98,   96,
       96,  628,  629,  624,  627,   96,   98,   96,   98,   98,
       96,  719,   96,   98,   98,   96,   96,   96,  639,   98,
       96,   98,   96,  630,   98,  632,   98,  631,   96,   98,
       98,   98,  719,  633,   98,   96,   98,   96,   96,  719,
      634,  635,   98,   96,  719,   96,  636,   96,   96,   98,

       96,   98,   98,  637,   96,   96,   96,   98,  641,   98,
      719,   98,   98,   96,   98,   96,   96,  640,   98,   98,
       98,  642,  638,  643,  644,   96,  719,   98,   96,   98,
       98,   96,  719,   96,   96,   96,   96,   96,  719,   98,
      647,  646,   98,   96,  719,   98,  649,   98,   98,   98,
       98,   98,  652,  645,   96,  654,  719,   98,  650,  719,
       96,  719,   96,  648,   96,   96,  651,  655,   98,   96,
      656,  659,  660,  661,   98,  653,   98,   96,   98,   98,
       96,   96,   96,   98,   96,   96,   96,   96,  719,   96,
       96,   98,   96,   96,   98,   98,   98,   96,   98,   98,

       98,   98,  662,   98,   98,   96,   98,   98,  719,  719,
      663,   98,  719,   96,   96,   96,  664,   96,  665,   98,
      673,  666,  671,  667,  669,  674,  672,   98,   98,   98,
      677,   98,  668,  676,   96,   96,   96,  670,  719,   96,
       96,  719,  719,   96,   96,  675,   96,   96,   98,   98,
       98,   96,  678,   98,   98,  679,  680,   98,   98,  719,
       98,   98,  719,   96,   96,   98,   96,   96,   96,   96,
      719,   96,   96,  682,   96,   96,  681,   98,   98,  684,
       98,   98,   98,   98,  683,   98,   98,   96,   98,   98,
       96,   96,  719,  685,  686,   96,   96,  719,   96,   96,

       96,   98,  719,  689,   98,   98,  687,  688,   96,   98,
       98,  691,   98,   98,   98,  696,  690,   96,   96,  692,
       96,   96,   98,  693,   96,  694,   96,  719,  695,  719,
       96,   98,   98,   96,   98,   98,  699,  701,   98,   96,
       98,  697,   96,  698,   98,  719,   96,   98,  700,   96,
       96,  703,   96,   98,  702,   96,   98,  706,   96,  704,
       98,   96,   96,   98,   98,   96,   98,  709,  719,   98,
      719,  719,   98,  707,  708,   98,   98,  705,  719,   98,
      710,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      713,  719,  715,  719,  717,  719,  719,  711,  718,  712,

      719,  719,  719,  719,  719,  714,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  716,   61,   61,   61,   61,
       61,   61,   61,   61,   68,   68,  719,   68,   68,   68,
       68,   68,   97,  719,  719,  719,   97,   97,   97,  168,
      168,  168,  169,  169,  256,  256,  260,  260,  260,  261,
      261,  658,  719,  658,  658,  658,    3,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,

      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719
    } ;

static yyconst short int yy_chk[2634] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   10,   13,   13,   14,
       19,  658,   22,   21,   22,   22,   22,   22,   30,   30,
       23,   32,   19,   21,   21,   23,   14,   40,   33,   25,

       25,   25,   25,   23,   26,   32,   28,   61,   26,  639,
      101,   40,   33,   10,   24,   57,   24,   24,   24,   24,
       25,   28,   34,   28,   28,   39,   34,   34,   98,   24,
       96,   47,   24,   24,   24,   95,   24,   24,   91,   39,
       34,   43,   38,   85,   61,   47,   49,   24,   25,   33,
       40,   24,   24,   41,   24,   43,   38,   42,   44,   97,
       49,   57,   24,   38,   38,   24,   45,   41,   38,   76,
       46,   42,   44,   97,   48,   39,   69,   63,   38,   39,
       45,   39,   47,   38,   46,   69,   37,   38,   48,   43,
       41,   43,  100,   68,   42,   42,   38,   41,   42,   49,

       43,   41,   49,   44,   41,   42,   44,   45,   42,   44,
       29,   48,   46,   50,   51,   48,   52,   45,   53,   46,
       46,   18,   54,   99,   46,   68,   15,   50,   51,  100,
       52,  107,   53,   83,   55,   83,   54,   99,   83,   83,
       83,   83,  105,  103,    9,  107,    3,  104,   55,    0,
      108,  109,  110,    0,   50,   51,  105,  103,   51,   51,
       52,  104,    0,   53,  108,  109,  110,   54,   53,   51,
       51,   55,   51,   54,   99,  111,   52,    0,   55,   77,
       77,   77,   77,   84,   84,   84,    0,   84,    0,  111,
      107,  105,   77,   77,  103,   77,   77,   77,  104,    0,

      108,    0,   84,   84,    0,   84,  109,    0,  112,    0,
       77,   77,  110,   84,   77,   77,  114,   77,   81,   81,
       81,   81,  112,  113,  111,  118,  119,    0,  115,  116,
      114,   81,   81,  117,   81,   81,   81,  113,  125,  118,
      119,  121,  115,  116,  120,    0,    0,  117,    0,   81,
       81,    0,  125,   81,   81,  121,   81,   82,  120,   82,
       82,   82,   82,  112,  113,  115,  116,    0,  119,    0,
      114,  119,   82,  122,  123,   82,   82,   82,    0,   82,
      118,  119,  124,  117,  126,  127,  120,  122,  123,  121,
       82,    0,  120,  125,   82,   82,  124,   82,  126,  127,

      128,  129,  130,  131,  135,   82,  106,    0,  137,  141,
      132,  134,    0,  176,  128,  129,  130,  131,  135,  133,
      106,  136,  137,  141,  132,  134,  138,  176,  123,  122,
        0,    0,    0,  133,  139,  136,  127,  126,  124,    0,
      138,  140,    0,  106,  106,  106,  106,  106,  139,    0,
      176,  106,    0,  128,  135,  140,  129,  130,  133,  106,
      106,  106,  132,  106,  141,  134,  137,  133,  142,  143,
      136,  138,  139,  144,  133,  146,  145,  138,  147,  148,
      150,    0,  142,  143,  140,  149,  151,  144,  152,  146,
      145,  140,  147,  148,  150,  140,  140,  153,    0,  149,

      151,  154,  152,  165,  165,  165,  165,  191,  174,    0,
      144,  153,  143,  144,  145,  154,    0,    0,  211,  142,
      146,  191,  174,  147,  144,  150,  144,  185,    0,    0,
      143,  148,  211,  152,  150,  149,  152,    0,    0,  151,
        0,  185,  159,  173,  159,    0,  154,  159,  159,  159,
      159,  160,  153,  160,  160,  160,  162,  173,  162,  174,
      175,  162,  162,  162,  162,    0,  164,  164,  164,  160,
      164,  185,  160,  160,  175,  160,  161,  161,  161,  161,
      163,  199,  163,  163,  163,  164,  164,  185,  164,  161,
      161,  173,  161,  161,  161,  199,  164,    0,  163,  178,

        0,  163,  163,    0,  163,    0,  177,  161,  161,  175,
      187,  161,  161,  178,  161,  166,  166,  166,  166,  168,
      177,  181,  179,    0,  187,    0,  199,    0,  180,  166,
      183,  166,  166,  166,  182,  181,  179,  168,  168,  168,
      168,  168,  180,    0,  183,    0,    0,  166,  182,    0,
      166,  166,  184,  166,  177,  178,  168,  168,  186,  168,
      177,  177,  179,  168,  188,  187,  184,  168,  189,  180,
        0,  183,  186,  179,  190,  192,  193,  194,  188,  195,
      181,  196,  189,    0,  182,  197,  198,  200,  190,  192,
      193,  194,  201,  195,    0,  196,    0,  184,    0,  197,

      198,  200,  203,  204,    0,  202,  201,  184,  189,  186,
      190,  205,  188,  193,  206,    0,  203,  204,  194,  202,
      207,    0,  208,  198,  209,  205,  192,  210,  206,  201,
        0,  212,  195,  213,  207,  196,  208,  200,  209,  197,
      197,  210,  202,  203,  204,  212,  214,  213,  204,  205,
      202,    0,  215,  216,  218,  206,    0,  217,  219,  220,
      214,    0,  222,  208,  210,  209,  215,  216,  218,  207,
      217,  217,  219,  220,  223,  221,  222,  224,  225,  226,
      227,    0,  228,    0,  213,  221,    0,    0,  223,  221,
      229,  224,  225,  226,  227,  218,  228,  214,  216,  230,

      220,  219,  232,  231,  229,  215,    0,  233,  234,    0,
      237,    0,    0,  230,  235,  236,  232,  231,  238,  222,
      226,  233,  234,  225,  237,  224,  223,  239,  235,  236,
      241,  240,  238,    0,  243,  227,  242,  244,  228,    0,
      245,  239,  248,  232,  241,  240,  246,  234,  243,  237,
      242,  244,  230,  231,  245,  247,  248,    0,    0,    0,
      246,    0,  233,    0,  261,    0,  235,    0,  262,  247,
      263,  236,  240,  238,  249,  249,  249,  249,  261,  243,
      245,  239,  262,  246,  263,  241,  265,  242,  264,  272,
      248,    0,  244,    0,  247,  250,  250,  250,  250,  251,

      265,  251,  264,  272,  251,  251,  251,  251,  250,  252,
      268,  252,  252,  252,  253,  253,  253,  253,  263,  254,
      254,  254,  254,    0,  268,    0,  250,  252,  272,  265,
      252,  252,  254,  252,  255,  278,  255,  255,  255,  256,
      264,  256,  256,  256,  256,  266,    0,    0,  269,  278,
      254,    0,  255,    0,    0,  255,  255,  256,  255,  266,
      256,  256,  269,  256,    0,  268,    0,  256,  257,  257,
      257,  257,  258,  258,  258,  267,  258,    0,  257,  257,
      257,  257,  257,    0,  257,  257,  257,  257,  278,  267,
      266,  258,  258,  269,  258,  257,  257,  257,  257,  257,

      257,    0,  258,  257,  257,  270,  257,  259,  271,  259,
      257,  273,  259,  259,  259,  259,  274,  276,  275,  270,
      280,  277,  271,  279,  267,  273,  281,  284,  282,  285,
      274,  276,  275,  286,  280,  277,  287,  279,  283,  288,
      281,  284,  282,  285,    0,  289,  270,  286,  290,  291,
      287,  292,  283,  288,    0,  293,    0,    0,  271,  289,
      276,  277,  290,  291,  274,  292,  273,  281,  280,  293,
      294,  274,  275,  282,  295,  279,  296,  283,  284,  297,
      286,  298,    0,  299,  294,    0,  300,  302,  295,  292,
      296,  301,  303,  297,  291,  298,  293,  299,    0,  289,

      300,  302,  304,  290,  305,  301,  303,  307,  306,  309,
      294,  308,  295,  312,  311,    0,  304,  310,  305,  313,
      314,  307,  306,  309,  315,  308,  311,  312,  311,  297,
      317,  310,  296,  313,  314,  300,  298,  318,  315,  301,
      316,    0,  299,  319,  317,  320,  321,  322,    0,    0,
      309,  318,  323,    0,  316,  304,  326,  319,  325,  320,
      321,  322,  305,  306,  308,  324,  323,  310,  312,  328,
      326,  317,  325,  327,  314,  329,  330,  316,  331,  324,
      332,  333,  318,  328,  334,    0,    0,  327,  335,  329,
      330,  336,  331,    0,  332,  333,    0,  319,  334,  321,

      322,  326,  335,  320,  337,  336,  324,  323,  338,  325,
      327,  339,  340,    0,  329,  353,  341,  331,  337,  332,
        0,  333,  338,  357,  330,  339,  340,  328,    0,  353,
      341,    0,    0,    0,  336,    0,  360,  357,  335,  342,
      342,  342,  342,    0,    0,  343,  343,  343,  343,  345,
      360,  345,  345,  345,    0,  355,  340,  341,  343,  357,
      337,  351,  351,  351,  351,    0,  339,  345,  354,  355,
      345,  345,  346,  345,  346,  360,  343,  346,  346,  346,
      346,  347,  354,  347,  347,  347,  347,  356,    0,  349,
      358,  349,  349,  349,  359,  423,  423,  423,  423,  347,

      355,  356,  347,  347,  358,  347,    0,  349,  359,  347,
      349,  349,  350,  349,  350,  361,  354,  350,  350,  350,
      350,  352,  352,  352,  352,    0,  362,  363,    0,  361,
      356,  364,    0,  365,  366,  352,  367,  352,  352,  352,
      362,  363,  359,  358,  368,  364,  365,  365,  366,  369,
      367,  370,  372,  352,    0,    0,  352,  352,  368,  352,
        0,  371,    0,  369,  373,  370,  372,  374,  363,  361,
      375,  376,    0,  377,  362,  371,  364,  378,  373,  379,
      380,  374,  381,  368,  375,  376,  367,  377,    0,  366,
      369,  378,  370,  379,  380,    0,  381,  382,  371,  383,

        0,  384,  372,    0,  374,  385,  387,  386,  375,  377,
      388,  382,  389,  383,  373,  384,    0,  380,  390,  385,
      387,  386,  391,  392,  388,  393,  389,  394,  396,  379,
      381,  395,  390,    0,    0,    0,  391,  392,  382,  393,
      397,  394,  396,  398,    0,  395,  385,  383,  386,  384,
      399,  400,  401,  389,  397,    0,  402,  398,  387,  391,
      405,  403,  388,  404,  399,  400,  401,  406,  390,  394,
      402,  403,  395,  407,  405,  403,  408,  404,  409,  410,
      393,  406,  411,  412,  413,  414,  415,  407,  417,  416,
      408,  401,  409,  410,    0,  398,  411,  412,  413,  414,

      415,  418,  417,  416,  400,  399,  419,    0,  404,  420,
      405,  402,  421,  407,  422,  418,    0,  409,  408,  411,
      419,  413,    0,  420,    0,  416,  421,  410,  422,  414,
      416,    0,    0,  436,  415,    0,  431,    0,  412,  432,
        0,    0,  426,  419,  426,  426,  426,  436,  460,  421,
      431,  418,    0,  432,  420,  424,  424,  424,  424,    0,
      426,  435,  460,  426,  426,    0,  426,    0,    0,  424,
        0,  424,  424,  424,  427,  435,  427,  431,  433,  427,
      427,  427,  427,  428,  428,  428,  428,  424,  436,  432,
      424,  424,  433,  424,  429,  429,  429,  429,  430,  434,

      430,  430,  430,  437,  438,    0,  435,  439,  429,    0,
      429,  429,  429,  434,    0,    0,  430,  437,  438,  430,
      430,  439,  430,  440,  441,    0,  429,  442,  433,  429,
      429,  443,  429,  445,  444,  434,  447,  440,  441,  442,
      446,  442,  448,  451,  449,  443,  452,  445,  444,  450,
      447,  437,  454,  453,  446,  455,  448,  451,  449,  438,
      452,  439,  456,  450,  457,  458,  454,  453,  461,  455,
      445,  459,    0,  440,  441,  444,  456,  446,  457,  458,
      462,    0,  461,    0,  443,  459,  463,  447,    0,    0,
      450,  451,  452,  453,  462,  453,  464,  448,  449,  465,

      463,  466,  456,  453,  467,  453,  458,  468,  454,  455,
      464,  469,    0,  465,  470,  466,  471,    0,  467,  472,
      473,  468,  474,  457,  475,  469,  459,  476,  470,  477,
      471,  462,  478,  472,  473,  479,  474,  463,  475,  480,
      481,  476,    0,  477,  482,  483,  478,  484,  485,  479,
      486,  470,    0,  480,  481,  487,  466,  471,  482,  483,
        0,  484,  485,  474,  486,  488,  476,  489,  490,  487,
      491,  492,  495,    0,  472,  493,  493,  493,  493,  488,
      496,  489,  490,  497,  491,  492,  495,  486,  481,  498,
      499,  501,    0,    0,  496,    0,  500,  497,  502,  482,

      503,  484,    0,  498,  499,  501,  487,  488,  489,  492,
      500,  504,  502,  506,  503,  505,  490,  496,  491,  494,
      494,  494,  494,    0,  507,  504,  508,  506,  499,  505,
      509,  495,  510,  494,  497,  494,  494,  494,  507,  511,
      508,  500,    0,    0,  509,  512,  510,  513,  514,  515,
      516,  494,  503,  511,  494,  494,  505,  494,    0,  512,
      519,  513,  514,  515,  516,  504,  508,    0,  517,  507,
      518,  520,  510,  521,  519,  522,    0,    0,  509,  523,
      524,  511,  517,    0,  518,  520,  525,  521,  526,  522,
      512,  516,  513,  523,  524,    0,  527,  515,  528,  529,

      525,    0,  526,  530,  531,  517,  532,  533,  534,  517,
      527,  519,  528,  529,  521,  518,  522,  530,  531,  535,
      532,  533,  534,  536,  520,  537,  538,  539,    0,  540,
      541,  542,  543,  535,  544,    0,  545,  536,  529,  537,
      538,  539,  530,  540,  541,  542,  543,  546,  544,  527,
      545,  528,    0,  547,  548,  549,    0,  550,  551,    0,
      533,  546,  536,  534,  556,  539,  532,  547,  548,  549,
      541,  550,  551,  543,  553,  552,  554,  555,  556,  537,
      538,    0,  544,  557,    0,  558,    0,  559,  553,  552,
      554,  555,  560,  561,  562,  547,    0,  557,  550,  558,

      546,  559,  563,  551,  564,  549,  560,  561,  562,  565,
      548,  552,  554,  553,  566,  567,  563,  568,  564,    0,
      569,  570,  571,  565,    0,  555,  572,  574,  566,  567,
        0,  568,  561,  558,  569,  570,  571,  573,  559,    0,
      572,  574,    0,  575,  563,  565,  576,  577,  578,  562,
      579,  573,    0,  568,  580,  581,  563,  575,  582,    0,
      576,  577,  578,  564,  579,  566,  571,  572,  580,  581,
      583,  584,  582,  573,  585,  569,  570,  586,  587,  589,
      588,  590,    0,  591,  583,  584,  592,  593,  585,  594,
      576,  586,  587,  589,  588,  590,  579,  591,  595,  582,

      592,  593,  578,  594,  596,    0,  597,  584,    0,  598,
      599,  600,  595,  586,    0,  589,    0,  587,  596,  591,
      597,  601,  592,  598,  599,  600,  602,    0,  593,  585,
      583,  588,  603,  604,  605,  601,  590,    0,    0,  594,
      602,  596,  606,  597,  607,  608,  603,  604,  605,  609,
      610,  599,  600,  595,  598,  611,  606,  612,  607,  608,
      613,    0,  614,  609,  610,  615,  616,  617,  616,  611,
      618,  612,  619,  601,  613,  605,  614,  602,  620,  615,
      616,  617,    0,  607,  618,  621,  619,  622,  623,    0,
      608,  610,  620,  624,    0,  625,  613,  626,  627,  621,

      628,  622,  623,  614,  629,  630,  631,  624,  619,  625,
        0,  626,  627,  632,  628,  633,  635,  617,  629,  630,
      631,  621,  615,  622,  623,  634,    0,  632,  636,  633,
      635,  637,    0,  638,  642,  640,  641,  643,    0,  634,
      628,  627,  636,  644,    0,  637,  630,  638,  642,  640,
      641,  643,  633,  626,  645,  635,    0,  644,  631,    0,
      646,    0,  647,  629,  648,  649,  632,  637,  645,  651,
      638,  640,  641,  643,  646,  634,  647,  652,  648,  649,
      650,  653,  654,  651,  656,  660,  655,  661,    0,  659,
      662,  652,  663,  664,  650,  653,  654,  665,  656,  660,

      655,  661,  645,  659,  662,  666,  663,  664,    0,    0,
      646,  665,    0,  667,  669,  668,  648,  670,  649,  666,
      656,  650,  655,  651,  653,  659,  655,  667,  669,  668,
      664,  670,  652,  663,  671,  672,  673,  654,    0,  674,
      676,    0,    0,  675,  677,  662,  678,  679,  671,  672,
      673,  681,  665,  674,  676,  666,  668,  675,  677,    0,
      678,  679,    0,  682,  680,  681,  683,  684,  685,  686,
        0,  687,  690,  673,  688,  689,  672,  682,  680,  675,
      683,  684,  685,  686,  673,  687,  690,  691,  688,  689,
      692,  693,    0,  676,  677,  694,  695,    0,  696,  697,

      698,  691,    0,  681,  692,  693,  678,  680,  699,  694,
      695,  683,  696,  697,  698,  690,  682,  700,  701,  684,
      702,  703,  699,  686,  704,  688,  705,    0,  689,    0,
      706,  700,  701,  708,  702,  703,  693,  695,  704,  707,
      705,  691,  709,  692,  706,    0,  710,  708,  694,  711,
      712,  698,  713,  707,  697,  714,  709,  701,  715,  699,
      710,  716,  717,  711,  712,  718,  713,  706,    0,  714,
        0,    0,  715,  703,  704,  716,  717,  700,    0,  718,
      707,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      711,    0,  713,    0,  715,    0,    0,  709,  717,  710,

        0,    0,    0,    0,    0,  712,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  714,  720,  720,  720,  720,
      720,  720,  720,  720,  721,  721,    0,  721,  721,  721,
      721,  721,  722,    0,    0,    0,  722,  722,  722,  723,
      723,  723,  724,  724,  725,  725,  726,  726,  726,  727,
      727,  728,    0,  728,  728,  728,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,

      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define INITIAL 0
#define YY_NO_UNPUT 1
#line 13 "lexer.l"
import "ecdefs"
#define YYLTYPE Location
#define YY_NEVER_INTERACTIVE 1    // Avoid calling isatty on eC File object

#include "grammar.h"

bool echoOn = true;
public void SetEchoOn(bool b) { echoOn = b; }

extern YYLTYPE type_yylloc;
extern YYLTYPE expression_yylloc;

extern File fileInput;
int preprocessor();
int comment();

void TESTTTT()
{
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   type_yylloc.end.charPos += yyleng;
   type_yylloc.end.pos += yyleng;
   expression_yylloc.end.charPos += yyleng;
   expression_yylloc.end.pos += yyleng;
}

#define YY_USER_ACTION  \
   TESTTTT();

   /*
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   */

#define YY_INPUT(buf,result,max_size) \
   result = fileInput.Read(buf, 1, max_size) \

YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
File fileStack[MAX_INCLUDE_DEPTH];
char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
public void SetSomeSourceFileStack(const char * fileName, int index) { strcpy(sourceFileStack[index], fileName); }
YYLTYPE locStack[MAX_INCLUDE_DEPTH];
AccessMode declModeStack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

#define uint _uint
default:

#line 1235 "lexer.ec"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 63 "lexer.l"



   yylloc.start = yylloc.end;
   type_yylloc.start = type_yylloc.end;
   expression_yylloc.start = expression_yylloc.end;


#line 1395 "lexer.ec"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 720 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2557 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 71 "lexer.l"
{ preprocessor(); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 72 "lexer.l"
{ comment(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 73 "lexer.l"
{ commentCPP(); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 75 "lexer.l"
{ return(AUTO); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 76 "lexer.l"
{ return(BREAK); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 77 "lexer.l"
{ return(CASE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 78 "lexer.l"
{ return(CHAR); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 79 "lexer.l"
{ return(CONST); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 80 "lexer.l"
{ return(CONTINUE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 81 "lexer.l"
{ return(DEFAULT); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 82 "lexer.l"
{ return(DO); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 83 "lexer.l"
{ return(DOUBLE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 84 "lexer.l"
{ return(ELSE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 85 "lexer.l"
{ return(ENUM); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 86 "lexer.l"
{ return(EXTERN); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 87 "lexer.l"
{ return(FLOAT); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 88 "lexer.l"
{ return(FOR); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 89 "lexer.l"
{ return(GOTO); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 90 "lexer.l"
{ return(IF); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 91 "lexer.l"
{ return(INT); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 92 "lexer.l"
{ return(UINT); }
	YY_BREAK
/* "uint16"            { return(UINT16); } */
/* "uint32"            { return(UINT32); } */
/* "bool"              { return(BOOL_TOKEN); } */
case 22:
YY_RULE_SETUP
#line 96 "lexer.l"
{ return(LONG); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 97 "lexer.l"
{ return(REGISTER); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 98 "lexer.l"
{ return(RETURN); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 99 "lexer.l"
{ return(SHORT); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 100 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 101 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 102 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 103 "lexer.l"
{ return(SIZEOF); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 104 "lexer.l"
{ return(ALIGNOF); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 105 "lexer.l"
{ return(STATIC); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 106 "lexer.l"
{ return(THREAD); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 107 "lexer.l"
{ return(STRUCT); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 108 "lexer.l"
{ return(SWITCH); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 109 "lexer.l"
{ return(TYPEDEF); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 110 "lexer.l"
{ return(UNION); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 111 "lexer.l"
{ return(UNSIGNED); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 112 "lexer.l"
{ return(VOID); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 113 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 114 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 115 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 116 "lexer.l"
{ return(WHILE); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 118 "lexer.l"
{ return(PROPERTY); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 119 "lexer.l"
{ return(SETPROP); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "lexer.l"
{ return(GETPROP); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "lexer.l"
{ return(ISPROPSET); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "lexer.l"
{ return(CLASS); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "lexer.l"
{ return(THISCLASS); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 124 "lexer.l"
{ return(VIRTUAL); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 125 "lexer.l"
{ return(DELETE); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 126 "lexer.l"
{ return(NEWOP); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 127 "lexer.l"
{ return(NEW0OP); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 128 "lexer.l"
{ return(RENEW); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 129 "lexer.l"
{ return(RENEW0); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 130 "lexer.l"
{ return(IMPORT); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 131 "lexer.l"
{ return(DEFINE); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 132 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 133 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 134 "lexer.l"
{ return(VALIST); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 135 "lexer.l"
{ return(VAARG); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 136 "lexer.l"
{ return(BOOL); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 137 "lexer.l"
{ return(_BOOL); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 138 "lexer.l"
{ return(_COMPLEX); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 139 "lexer.l"
{ return(_IMAGINARY); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 140 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
/* "__attribute__".?"(("({D}|{L})*"))" { return(EXT_ATTRIB); } */
/* DID I MEAN? "__attribute__"" "*"(("" "*({D}|{L})*" "*("("({D}|{L})*(" "*","" "*({D}|{L})*)*" "*")")?" "*"))" { return(EXT_ATTRIB); } */
/*
 "__attribute_deprecated__"(" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute__"           (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute"             (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 */
/*
 [__attribute__] [spaces]
   [((] [spaces]
      [digits | letters] [spaces]
         ( [(]  [digits or letters or "]  ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces]  [)] )?
      [spaces]
      ( [,] [spaces]  [digits or letters]  [spaces]
         ( [(]  [digits or letters or "]
            ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces] [)]
         )? [spaces]
      )*
   [))]
 */
/* "__attribute__".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); } */
/* "__attribute".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); }*/
case 66:
YY_RULE_SETUP
#line 167 "lexer.l"
{ return ATTRIB_DEP; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 168 "lexer.l"
{ return ATTRIB; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 169 "lexer.l"
{ return __ATTRIB; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 171 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 172 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 173 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 174 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 175 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 176 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 177 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 178 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 179 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 180 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 181 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 182 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 183 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 184 "lexer.l"
{ return(CONST /*EXT_DECL*/); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 185 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 186 "lexer.l"
{ return(PUBLIC); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 187 "lexer.l"
{ return(PRIVATE); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 188 "lexer.l"
{ return(TYPED_OBJECT); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 189 "lexer.l"
{ return(ANY_OBJECT); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 190 "lexer.l"
{ return(_INCREF); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 191 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 192 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 193 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 194 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 195 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 196 "lexer.l"
{ return(TYPEOF); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 197 "lexer.l"
{ return(WATCH); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 198 "lexer.l"
{ return(STOPWATCHING); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 199 "lexer.l"
{ return(FIREWATCHERS); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 200 "lexer.l"
{ return(WATCHABLE); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 201 "lexer.l"
{ return(CLASS_DESIGNER); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 202 "lexer.l"
{ return(CLASS_NO_EXPANSION); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 203 "lexer.l"
{ return(CLASS_FIXED); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 204 "lexer.l"
{ return(CLASS_DEFAULT_PROPERTY); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 205 "lexer.l"
{ return(PROPERTY_CATEGORY); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 206 "lexer.l"
{ return(CLASS_DATA); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 207 "lexer.l"
{ return(CLASS_PROPERTY); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 208 "lexer.l"
{ return(SUBCLASS); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 209 "lexer.l"
{ return(NAMESPACE); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 210 "lexer.l"
{ return(DBTABLE); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 211 "lexer.l"
{ return(DBFIELD); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 212 "lexer.l"
{ return(DBINDEX); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 213 "lexer.l"
{ return(DATABASE_OPEN); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 215 "lexer.l"
{ return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); }  // ("::"|(({IDENT}"::")*)){IDENT}  { return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 217 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 219 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 220 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 221 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 223 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 224 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 225 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 227 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 228 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 229 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 231 "lexer.l"
{ return(STRING_LITERAL); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 233 "lexer.l"
{ return(ELLIPSIS); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 234 "lexer.l"
{ return(RIGHT_ASSIGN); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 235 "lexer.l"
{ return(LEFT_ASSIGN); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 236 "lexer.l"
{ return(ADD_ASSIGN); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 237 "lexer.l"
{ return(SUB_ASSIGN); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 238 "lexer.l"
{ return(MUL_ASSIGN); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 239 "lexer.l"
{ return(DIV_ASSIGN); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 240 "lexer.l"
{ return(MOD_ASSIGN); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 241 "lexer.l"
{ return(AND_ASSIGN); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 242 "lexer.l"
{ return(XOR_ASSIGN); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 243 "lexer.l"
{ return(OR_ASSIGN); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 244 "lexer.l"
{ return(RIGHT_OP); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 245 "lexer.l"
{ return(LEFT_OP); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 246 "lexer.l"
{ return(INC_OP); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 247 "lexer.l"
{ return(DEC_OP); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 248 "lexer.l"
{ return(PTR_OP); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 249 "lexer.l"
{ return(AND_OP); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 250 "lexer.l"
{ return(OR_OP); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 251 "lexer.l"
{ return(LE_OP); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 252 "lexer.l"
{ return(GE_OP); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 253 "lexer.l"
{ return(EQ_OP); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 254 "lexer.l"
{ return(NE_OP); }
	YY_BREAK
/* "::"        { return(CLASS_OP); } */
case 146:
YY_RULE_SETUP
#line 256 "lexer.l"
{ return(';'); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 257 "lexer.l"
{ return('{'); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 258 "lexer.l"
{ return('}'); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 259 "lexer.l"
{ return(','); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 260 "lexer.l"
{ return(':'); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 261 "lexer.l"
{ return('='); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 262 "lexer.l"
{ return('('); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 263 "lexer.l"
{ return(')'); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 264 "lexer.l"
{ return('['); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 265 "lexer.l"
{ return(']'); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 266 "lexer.l"
{ return('.'); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 267 "lexer.l"
{ return('&'); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 268 "lexer.l"
{ return('!'); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 269 "lexer.l"
{ return('~'); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 270 "lexer.l"
{ return('-'); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 271 "lexer.l"
{ return('+'); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 272 "lexer.l"
{ return('*'); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 273 "lexer.l"
{ return('/'); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 274 "lexer.l"
{ return('%'); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 275 "lexer.l"
{ return('<'); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 276 "lexer.l"
{ return('>'); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 277 "lexer.l"
{ return('^'); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 278 "lexer.l"
{ return('|'); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 279 "lexer.l"
{ return('?'); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 280 "lexer.l"
{ return('$'); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 282 "lexer.l"
{
      while(include_stack_ptr && !fileStack[include_stack_ptr-1])
      {
         --include_stack_ptr;
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }

      if ( --include_stack_ptr < 0 )
      {
         include_stack_ptr = 0;
         yyterminate();
      }
      else
      {
         delete fileInput;
         yy_delete_buffer( YY_CURRENT_BUFFER );
         fileInput = fileStack[include_stack_ptr];
         yylloc = locStack[include_stack_ptr];
         type_yylloc = locStack[include_stack_ptr];
         expression_yylloc = locStack[include_stack_ptr];
         yy_switch_to_buffer(include_stack[include_stack_ptr] );
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }
   }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 308 "lexer.l"
{ yylloc.start = yylloc.end; type_yylloc.start = type_yylloc.end; expression_yylloc.start = expression_yylloc.end;}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 309 "lexer.l"
{
   yylloc.end.charPos = 1; yylloc.end.line += yyleng; yylloc.start = yylloc.end;
   type_yylloc.end.charPos = 1; type_yylloc.end.line += yyleng; type_yylloc.start = type_yylloc.end;
   expression_yylloc.end.charPos = 1; expression_yylloc.end.line += yyleng; expression_yylloc.start = expression_yylloc.end;
   }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 314 "lexer.l"
{
   yylloc.start.charPos++ /*= 3 - (yylloc.start.col % 3)*/; yylloc.end.charPos = yylloc.start.charPos; yylloc.start.pos = yylloc.end.pos;
   expression_yylloc.start.charPos++ /*= 3 - (expression_yylloc.start.col % 3)*/; expression_yylloc.end.charPos = expression_yylloc.start.charPos; expression_yylloc.start.pos = expression_yylloc.end.pos;
   type_yylloc.start.charPos++ /*= 3 - (type_yylloc.start.col % 3)*/; type_yylloc.end.charPos = type_yylloc.start.charPos; type_yylloc.start.pos = type_yylloc.end.pos;
   }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 319 "lexer.l"
{ yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 320 "lexer.l"
{
   yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end;
   if(inCompiler)
      printf("lexer error: invalid char 0x%X at line %d, col %d\n", (unsigned char)yytext[0], yylloc.start.line, yylloc.start.charPos);
   yyerror();
   }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 327 "lexer.l"
ECHO;
	YY_BREAK
#line 2424 "lexer.ec"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 720 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 720 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 719);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 327 "lexer.l"


private:

int yywrap()
{
   return(1);
}

int comment()
{
   int c, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      if(c == '/' && last == '*')
         break;
      last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int commentCPP()
{
   int c; //, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         break;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      //last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int preprocessor()
{
   int c, last = 0;
   int count = 0;
   char line[1024];

   line[0] = '\0';

   for(;;)
   {
      c = input();
      if(c == EOF) break;

      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         if(last != '\\')
         {
            char * pointer = line + 1;
            int lineNumber;
            line[count] = 0;
            lineNumber = GetValue(&pointer);
            if(lineNumber)
            {
               char fileName[MAX_LOCATION];

               int inOut;

               fileName[0] = 0;
               GetString(&pointer, fileName, MAX_LOCATION);
               inOut = GetValue(&pointer);

               if(inOut == 1)
               {
                  char extension[MAX_EXTENSION];

                  defaultDeclMode = declModeStack[include_stack_ptr] = declMode;

                  GetExtension(fileName, extension);
                  if(!strcmp(extension, "c") || !strcmp(extension, "h"))
                     declMode = defaultDeclMode = structDeclMode = defaultAccess;

                  fileStack[include_stack_ptr] = null;
                  include_stack_ptr++;
               }
               else if(inOut == 2)
               {
                  include_stack_ptr--;
                  defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
               }

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               //yylloc.end.pos -= count;

               if(include_stack_ptr > 0 || (lineNumber && fileName[0]))
                  yylloc.end.included = GetIncludeFileID(fileName);
               else
                  yylloc.end.included = 0;
            }
            /*
            int lineNumber = strtol(line+1, &endPtr, 0);
            if(lineNumber)
            {
               GetString(&
               endPtr

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               yylloc.end.pos -= count;
            }
            */
            break;
         }
         count = 0;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
         line[count++] = c;
      }
      else
      {
         yylloc.end.pos++;
         if(c != '\r')
         {
            yylloc.end.charPos++;
            line[count++] = c;
         }
      }
      last = c;
   }
   yylloc.start = yylloc.end;
   line[count] = 0;

   TrimLSpaces(line, line);
   for(c = 0; line[c] && line[c] != ' '; c++);
   if(!strncmp(line, "include", c))
   {
      char includeFile[MAX_LOCATION] = "";

      memmove(line, line+c, strlen(line+c)+1);
      TrimLSpaces(line, line);
      if(line[0] == '\"')
      {
         for(c = 1; line[c]; c++)
         {
            if(line[c] == '\"')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
         }
      }
      else if(line[0] == '<')
      {
         for(c = 1; line[c]; c++)
            if(line[c] == '>')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
      }

      if ( include_stack_ptr >= MAX_INCLUDE_DEPTH )
      {
         fprintf( stderr, "%s", $"Includes nested too deeply" );
         exit( 1 );
      }

      if(inCompiler || !FindIncludeFileID(includeFile))
      {
         File file = OpenIncludeFile(includeFile);
         if(file)
         {
            char extension[MAX_EXTENSION];

            fileStack[include_stack_ptr] = fileInput;
            locStack[include_stack_ptr] = yylloc;
            defaultDeclMode = declModeStack[include_stack_ptr] = declMode;
            include_stack[include_stack_ptr++] = YY_CURRENT_BUFFER;

            yylloc.start.charPos = yylloc.end.charPos = 1;
            yylloc.start.line = yylloc.end.line = 1;
            yylloc.start.pos = yylloc.end.pos = 0;
            yylloc.start.included = yylloc.end.included = GetIncludeFileID(includeFile);

            GetExtension(includeFile, extension);
            if(!strcmp(extension, "c") || !strcmp(extension, "h"))
               declMode = defaultDeclMode = structDeclMode = defaultAccess;

            fileInput = file;
            yy_switch_to_buffer( yy_create_buffer( fileInput, YY_BUF_SIZE ) );
            BEGIN(INITIAL);
         }
      }
   }
   return 0;
}

public void resetScanner()
{
   YY_FLUSH_BUFFER;
   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;
}

void resetScannerPos(CodePosition pos)
{
   YY_FLUSH_BUFFER;
   yylloc.start = yylloc.end = pos;
   type_yylloc.start = type_yylloc.end = pos;
   expression_yylloc.start = expression_yylloc.end = pos;
}

class LexerBackup
{
   YYLTYPE yylloc;
   YYLTYPE type_yylloc;
   YYLTYPE expression_yylloc;

   AccessMode declMode;
   AccessMode defaultDeclMode;

   File fileInput;
   YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
   File fileStack[MAX_INCLUDE_DEPTH];
   char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
   YYLTYPE locStack[MAX_INCLUDE_DEPTH];
   AccessMode declModeStack[MAX_INCLUDE_DEPTH];
   int include_stack_ptr;
   YY_BUFFER_STATE buffer;

   int yy_n_chars;
   char * yytext_ptr;
   char * yy_c_buf_p;
   FILE * yyin;
   char yy_hold_char;
   int yychar;
   int yy_init;
   int yy_start;

};

LexerBackup pushLexer()
{
   LexerBackup backup { };

   backup.yylloc = yylloc;
   backup.type_yylloc = type_yylloc;
   backup.expression_yylloc = expression_yylloc;
   backup.fileInput = fileInput;
   memcpy(backup.include_stack, include_stack, sizeof(include_stack));
   memcpy(backup.fileStack, fileStack, sizeof(fileStack));
   memcpy(backup.sourceFileStack, sourceFileStack, sizeof(sourceFileStack));
   memcpy(backup.locStack, locStack, sizeof(locStack));
   memcpy(backup.declModeStack, declModeStack, sizeof(declModeStack));
   backup.include_stack_ptr = include_stack_ptr;
   backup.defaultDeclMode = defaultDeclMode;
   backup.declMode = declMode;
   backup.buffer = yy_current_buffer;

   backup.yy_n_chars = yy_n_chars;
   backup.yytext_ptr = yytext_ptr;
   backup.yy_c_buf_p = yy_c_buf_p;
   backup.yyin = yyin;
   backup.yy_hold_char = yy_hold_char;
   backup.yychar = yychar;
   backup.yy_init = yy_init;
   backup.yy_start = yy_start;

   yy_init = 1;

   yy_current_buffer = 0;

   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;

   return backup;
}

void popLexer(LexerBackup backup)
{
   yylloc = backup.yylloc;
   type_yylloc = backup.type_yylloc;
   expression_yylloc = backup.expression_yylloc;
   fileInput = backup.fileInput;
   memcpy(include_stack, backup.include_stack, sizeof(include_stack));
   memcpy(fileStack, backup.fileStack, sizeof(fileStack));
   memcpy(sourceFileStack, backup.sourceFileStack, sizeof(sourceFileStack));
   memcpy(locStack, backup.locStack, sizeof(locStack));
   memcpy(declModeStack, backup.declModeStack, sizeof(declModeStack));
   include_stack_ptr = backup.include_stack_ptr;
   defaultDeclMode = backup.defaultDeclMode;
   declMode = structDeclMode = backup.declMode;

   // yy_switch_to_buffer(backup.buffer);
   yy_current_buffer = backup.buffer;
   yy_n_chars = backup.yy_n_chars;
   yytext_ptr = backup.yytext_ptr;
   yy_c_buf_p = backup.yy_c_buf_p;
   yyin = backup.yyin;
   yy_hold_char = backup.yy_hold_char;
   yychar = backup.yychar;
   yy_init = backup.yy_init;
   yy_start = backup.yy_start;

   delete backup;
}
