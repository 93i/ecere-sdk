#line 2 "lexer.ec"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 173
#define YY_END_OF_BUFFER 174
static yyconst short int yy_accept[697] =
    {   0,
      112,  112,  174,  172,  170,  169,  168,  171,  155,  172,
        1,  167,  161,  154,  172,  149,  150,  159,  158,  146,
      157,  153,  160,  115,  115,  147,  143,  162,  148,  163,
      166,  112,  112,  112,  151,  152,  164,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  144,  165,  145,  156,  142,
        0,  120,    0,  128,  145,  137,  129,    0,    0,  126,
      134,  124,  135,  125,  136,    0,  118,    2,    3,  127,
      119,  114,    0,  115,    0,  115,  112,  152,  144,  151,
      133,  139,  141,  140,  132,    0,  112,    0,  112,    0,

        0,  130,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,   11,  112,  112,  112,  112,  112,  112,  112,  112,
       19,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  131,  138,  116,  121,    0,  118,
      118,    0,  119,  114,    0,  117,  113,  112,  123,  122,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,   92,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,

      112,  112,  112,  112,  112,  112,  112,  112,  112,   17,
       45,  112,  112,  112,  112,   20,  112,  112,  112,   51,
      112,  112,  112,  112,  112,  112,  112,   44,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,    0,  118,    0,
      118,    0,  119,  117,  113,  112,  112,   61,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
        4,  112,    6,    7,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,   13,   14,  112,

      112,  112,   18,  112,  112,  112,  112,  112,   22,  112,
       52,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,   21,
      112,  112,  112,   38,  112,  112,  112,    0,  118,   62,
      112,  112,  112,   93,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,    5,   47,    8,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,   16,  112,
      112,  112,   58,   46,  112,  112,  112,  112,  112,   53,
      112,  112,   25,  112,  112,  112,  112,  112,  112,  112,

      112,  112,  112,   36,  112,  112,  112,   95,   42,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,   56,   50,
      112,  112,   12,   15,  112,   55,   88,   72,  112,  112,
      112,   84,  112,   54,  112,   24,   26,   29,   31,  112,
      112,   33,  112,   34,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,   91,  112,  112,   76,   82,  112,
      112,  112,   57,  112,  112,  112,  112,  112,  112,  112,
       70,  112,  112,  112,  112,  112,  112,  112,  112,  109,

      110,  108,   10,  112,  112,  112,  112,   85,  112,  112,
      112,   80,  112,  112,  112,  112,   35,  112,   49,  112,
      112,   63,  112,  112,  112,  112,  112,  112,   71,  112,
       27,  112,   32,   94,  112,  112,   79,  112,  112,  112,
      112,  112,  112,    9,  112,  112,  112,  112,  112,   43,
       23,   65,  112,  106,  112,  112,   37,   39,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,   77,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,   74,
       75,  112,  107,  112,  112,   48,  112,   98,   64,  112,
      112,  112,  112,  112,   69,   81,   28,  112,   41,  112,

       87,  104,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,   30,   68,  112,    0,  112,  112,   78,  112,
       90,  112,  112,  101,  112,  112,  112,  112,  112,  112,
      112,  112,  112,   73,    0,  112,   83,   40,  112,  112,
      112,  112,  112,   97,  112,   96,   86,   67,  112,  112,
       89,  112,  112,  112,  112,  111,  112,  112,  112,  112,
      112,   99,  112,  105,  112,  112,  112,  112,  112,  112,
      112,  112,   60,  112,  112,  112,  112,  112,   59,  112,
      112,  103,  112,  112,  100,  112,  112,  112,  112,  112,
      112,  112,  102,  112,   66,    0

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
       22,   23,   22,   24,   22,   22,   22,   25,   26,   27,
       28,   29,   30,    1,   31,   32,   33,   31,   34,   35,
       36,   36,   37,   38,   36,   39,   36,   36,   36,   36,
       36,   36,   36,   36,   40,   36,   36,   41,   36,   36,
       42,   43,   44,   45,   46,    1,   47,   48,   49,   50,

       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   36,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[76] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    3,    1,    4,    1,    1,    1,    1,    1,    1,
        5,    5,    5,    5,    2,    1,    1,    1,    1,    1,
        6,    6,    6,    6,    6,    7,    7,    7,    7,    7,
        7,    1,    1,    1,    1,    7,    6,    6,    6,    6,
        6,    6,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[705] =
    {   0,
        0,    0,  229, 2412, 2412, 2412, 2412, 2412,  200,   69,
     2412, 2412,   49,   68,  156, 2412, 2412,  167,   64, 2412,
       65,   63,   75,   94,   78,   79, 2412,   95,  164,   60,
     2412,   86,   96,  118, 2412, 2412,  160,  129,  113,  126,
      144,  153,  116,  157,  145,  161,  133,  156,  172,  197,
      198,  205,  216,  199,  208, 2412,   53, 2412, 2412, 2412,
       99, 2412,  184, 2412, 2412, 2412, 2412,  147,  136, 2412,
     2412, 2412, 2412, 2412, 2412,  152,  256, 2412, 2412, 2412,
      294,  334,  221,  230,    0,    0,    0, 2412, 2412, 2412,
      137, 2412, 2412, 2412,  125,  111,  206,   89,  221,  103,

       66, 2412,  236,  240,  215,  390,  273,  262,  278,  281,
      288,  294,  309,  298,  225,  314,  310,  299,  329,  352,
      354,  316,  319,  355,  377,  380,  386,  388,  384,  395,
      382,  397,  403,  392,  405,  407,  408,  423,  425,  433,
      452,  458,  456,  460,  463,  469,  471,  476,  479,  478,
      480,  489,  481,  497, 2412, 2412, 2412, 2412,  513,  516,
      554,  540,  544,  576,  402,  622,  581,    0, 2412, 2412,
        0,  491,  534,  507,  576,  600,  569,  579,  573,  488,
      592,  597,  616,  638,  642,  644,  643,  645,  651,  661,
      662,  664,  668,  671,  673,  674,  677,  680,  689,  679,

      695,  696,  702,  704,  705,  706,  707,  711,  729,  730,
      734,  735,  750,  752,  753,  755,  756,  757,  758,  763,
      760,  761,  762,  778,  779,  780,  781,  787,  788,  789,
      791,  806,  807,  810,  811,  813,  814,  818,  815,  823,
      830,  835,  833,  839,  848,  843,  842,  862,  880,  889,
      880,  899,  903,  904,  908,    0,  850,  869,  919,  940,
      942,  944,  946,  947,  959,  950,  957,  962,  965,  967,
      969,  968,  972,  975,  978,  985,  993,  995,  998, 1002,
     1004, 1017, 1020, 1023, 1024, 1026, 1028, 1030, 1035, 1043,
     1041, 1045, 1046, 1047, 1048, 1050, 1056, 1051, 1054, 1069,

     1071, 1073, 1074, 1079, 1076, 1091, 1096, 1097, 1099, 1104,
     1109, 1112, 1115, 1119, 1120, 1122, 1124, 1125, 1130, 1132,
     1135, 1142, 1145, 1147, 1150, 1152, 1153, 1154, 1169, 1160,
     1175, 1180, 1182, 1187, 1193, 1195, 1200, 1200, 1205, 1205,
     1206, 1221, 1225, 1227, 1229, 1230, 1232, 1234, 1236, 1242,
     1249, 1255, 1252, 1258, 1257, 1259, 1260, 1261, 1264, 1276,
     1280, 1284, 1288, 1289, 1291, 1296, 1301, 1304, 1308, 1309,
     1312, 1314, 1317, 1319, 1320, 1327, 1329, 1330, 1332, 1335,
     1336, 1339, 1338, 1347, 1355, 1358, 1362, 1360, 1368, 1373,
     1380, 1381, 1385, 1386, 1388, 1390, 1391, 1396, 1393, 1397,

     1401, 1403, 1413, 1409, 1420, 1421, 1426, 1431, 1437, 1441,
     1442, 1446, 1449, 1452, 1454, 1458, 1459, 1461, 1462, 1471,
     1465, 1464, 1483, 1474, 1486, 1480, 1487, 1489, 1492, 1490,
     1493, 1512, 1515, 1519, 1517, 1521, 1525, 1534, 1536, 1540,
     1543, 1544, 1545, 1546, 1552, 1555, 1562, 1564, 1567, 1568,
     1571, 1573, 1575, 1577, 1583, 1584, 1586, 1590, 1595, 1596,
     1599, 1602, 1605, 1612, 1614, 1617, 1618, 1620, 1622, 1623,
     1624, 1627, 1630, 1633, 1635, 1640, 1642, 1648, 1651, 1657,
     1664, 1673, 1668, 1674, 1675, 1676, 1680, 1679, 1681, 1684,
     1691, 1692, 1696, 1697, 1701, 1702, 1707, 1724, 1726, 1727,

     1729, 1730, 1732, 1734, 1735, 1742, 1747, 1751, 1753, 1754,
     1755, 1757, 1758, 1760, 1762, 1763, 1770, 1775, 1778, 1779,
     1781, 1783, 1788, 1790, 1791, 1794, 1807, 1810, 1803, 1811,
     1816, 1818, 1820, 1822, 1823, 1827, 1839, 1842, 1844, 1848,
     1845, 1850, 1852, 1855, 1857, 1860, 1861, 1867, 1868, 1872,
     1873, 1876, 1879, 1883, 1891, 1895, 1899, 1904, 1906, 1911,
     1912, 1917, 1916, 1919, 1923, 1921, 1924, 1927, 1928, 1929,
     1934, 1936, 1939, 1945, 1952, 1954, 1958, 1960, 1965, 1977,
     1985, 1986, 1987, 1989, 1988, 1992, 1993, 1995, 2004, 2005,
     2008, 2010, 2014, 2020, 2017, 2021, 2023, 2025, 2029, 2030,

     2036, 2038, 2041, 2045, 2047, 2049, 2053, 2054, 2057, 2058,
     2062, 2070, 2074, 2075, 2077,   84, 2081, 2083, 2078, 2085,
     2090, 2098, 2100, 2101, 2103, 2119, 2121, 2122, 2123, 2124,
     2125, 2128, 2127, 2412,   77, 2129, 2126, 2130, 2132, 2134,
     2151, 2155, 2156, 2158, 2159, 2168, 2176, 2178, 2180, 2181,
     2183, 2184, 2188, 2189, 2193, 2196, 2200, 2204, 2201, 2212,
     2208, 2211, 2213, 2216, 2221, 2223, 2231, 2229, 2232, 2233,
     2234, 2236, 2244, 2249, 2251, 2254, 2260, 2264, 2267, 2269,
     2279, 2280, 2285, 2291, 2292, 2295, 2296, 2297, 2298, 2300,
     2308, 2315, 2313, 2316, 2318, 2412, 2378, 2385, 2391, 2394,

     2395, 2398, 2400, 2404
    } ;

static yyconst short int yy_def[705] =
    {   0,
      696,    1,  696,  696,  696,  696,  696,  696,  696,  697,
      696,  696,  696,  696,  698,  696,  696,  696,  696,  696,
      696,  696,  696,  696,   24,  696,  696,  696,  696,  696,
      696,  699,  699,  699,  696,  696,  696,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  696,  696,  696,  696,  696,
      697,  696,  697,  696,  696,  696,  696,  698,  698,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  700,   25,  701,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  699,  696,  699,  697,

      698,  696,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  700,  702,  696,  696,
      703,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,

      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  696,   77,  696,
      696,  696,   81,  696,  696,  702,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,

      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  696,  161,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,

      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,

      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,

      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  704,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  696,  704,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,    0,  696,  696,  696,  696,

      696,  696,  696,  696
    } ;

static yyconst short int yy_nxt[2488] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   25,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   32,   32,   32,   32,   32,   32,   34,   32,
       32,   35,    4,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   32,   46,   32,   32,   47,   32,   48,
       32,   49,   50,   51,   52,   53,   54,   55,   32,   32,
       32,   56,   57,   58,   59,   62,   64,   65,   66,   71,
      155,   76,   73,   77,   77,   77,   77,   94,   95,   78,
      634,   72,   74,   75,   79,   67,   96,  634,   86,   86,

       86,   86,   80,   87,   89,   62,   96,   88,   69,   62,
       98,   63,   81,  171,   82,   82,   82,   82,  696,   90,
       98,   91,   92,   96,  100,  156,   96,   83,   96,  101,
       84,   84,   84,   84,   85,   98,   96,   98,  696,   96,
       98,   63,   98,   96,   83,   63,  696,   68,   84,   84,
       98,   84,  170,   98,   96,   96,   99,   98,  157,   84,
      103,  104,   85,   96,  169,  105,   96,   96,   98,   98,
      158,   96,  110,  123,  106,  124,  111,   98,  112,  107,
       98,   98,   96,  108,  125,   98,  696,  102,  113,   69,
      114,   93,  109,  135,   70,  129,   98,  115,   69,  118,

      119,  116,  136,  120,  117,  130,  137,   96,   96,   96,
      121,  126,  131,  122,  127,   96,   96,  128,   96,  132,
      133,   98,   98,   98,  134,   96,   96,   60,  696,   98,
       98,   96,   98,  696,  138,   96,  165,  139,  165,   98,
       98,  166,  166,  166,  166,   98,   96,  140,  141,   98,
       96,  142,  143,  151,  153,  696,  696,  696,  147,  152,
       98,  154,  144,  145,   98,  146,   84,   84,   84,   84,
      149,  194,   96,  175,  148,  150,   77,   77,   77,   77,
      696,  172,  696,   96,   84,   84,   98,   84,   96,  159,
      160,   96,  160,  160,  160,   84,  173,   98,   96,  696,

      174,  696,   98,  696,   96,   98,  159,  160,   96,   96,
      160,  160,   98,  160,  161,  161,  161,  161,   98,   96,
       96,  187,   98,   98,   96,  696,   96,  162,  163,   96,
      163,  163,  163,   98,   98,  696,  696,  696,   98,   96,
       98,  186,  188,   98,  162,  163,  190,  696,  163,  163,
      189,  163,   81,   98,   82,   82,   82,   82,  191,  192,
      195,  193,   96,  197,   96,   96,  696,   83,  696,  196,
      164,  164,  164,  164,  696,  696,   98,  696,   98,   98,
      198,  204,  205,  199,   83,  696,  696,   96,  164,  164,
       96,  164,   96,  200,   96,  696,   96,  696,   96,  164,

       96,   98,   96,  201,   98,   96,   98,   96,   98,  202,
       98,  203,   98,   96,   98,   96,   98,   96,   96,   98,
      206,   98,  166,  166,  166,  166,  696,   98,  696,   98,
      696,   98,   98,   96,  696,   96,  176,  177,  178,  179,
      180,  207,  208,   96,  181,  696,  209,   98,  211,   98,
      210,  214,  182,  183,  184,  217,  185,   98,  213,  212,
      215,  696,   96,  696,  218,  219,   96,  216,   96,  696,
       96,  696,  223,   96,  696,  220,   98,  221,  696,   96,
       98,   96,   98,  222,   98,  224,   96,   98,   96,   96,
       96,   96,  225,   98,  696,   98,  226,  227,   96,   96,

       98,   96,   98,   98,   98,   98,  232,   96,  230,  233,
      236,  696,   98,   98,  696,   98,  228,   96,  229,  696,
      234,   98,  235,  237,  696,  238,  231,  696,  248,  696,
      248,   98,  241,  249,  249,  249,  249,  239,  240,  696,
      696,  242,  243,  244,   96,  246,  245,  696,  258,  696,
      160,  247,  160,  160,  160,  252,  269,  252,   98,  696,
      253,  253,  253,  253,  696,  260,  696,  160,  696,  696,
      160,  160,  696,  160,  161,  161,  161,  161,  163,   96,
      163,  163,  163,   96,  696,  696,   96,  250,  251,   96,
      251,  251,  251,   98,  259,  163,  696,   98,  163,  163,

       98,  163,   96,   98,  250,  251,  696,   96,  251,  251,
       96,  251,  164,  164,  164,  164,   98,  255,  255,  255,
      255,   98,  261,  268,   98,  696,   96,  696,  266,  696,
      164,  164,  696,  164,  265,  255,  255,  696,  255,  267,
       98,  164,  166,  166,  166,  166,  255,  271,   96,  696,
      696,  270,   96,   96,   96,   96,  254,  262,  254,  254,
      254,   96,   98,  263,  264,  696,   98,   98,   98,   98,
      272,   96,   96,  254,   96,   98,  254,  254,   96,  254,
      273,   96,  696,   96,   96,   98,   98,   96,   98,   96,
       96,  274,   98,  696,  279,   98,  280,   98,   98,   96,

      278,   98,  276,   98,   98,   96,   96,  275,  277,  696,
      282,  696,   96,   98,   96,   96,   96,   96,  283,   98,
       98,   96,  281,  288,  696,  291,   98,  696,   98,   98,
       98,   98,  696,  284,  289,   98,  285,  286,  287,   96,
       96,  292,  696,  696,   96,   96,  294,  696,  290,  293,
      696,  297,  295,   98,   98,  298,  296,  300,   98,   98,
       96,  301,   96,   96,  299,   96,   96,   96,   96,  696,
       96,   96,   96,   96,   98,  302,   98,   98,  307,   98,
       98,   98,   98,  311,   98,   98,   98,   98,   96,   96,
       96,   96,  696,  696,  696,  303,  696,   96,   96,   96,

      696,   96,   98,   98,   98,   98,  308,  306,  310,  309,
      304,   98,   98,   98,  305,   98,   96,   96,  696,  314,
       96,   96,  313,   96,   96,   96,  312,  696,   96,  316,
       98,   98,  315,   96,   98,   98,  696,   98,   98,   98,
       96,  321,   98,   96,  317,   96,  318,   98,  320,   96,
      319,  696,   96,   96,   98,  323,  696,   98,   96,   98,
       96,  326,  696,   98,  696,  329,   98,   98,  696,  696,
      322,  324,   98,  696,   98,  696,  325,  696,  327,   96,
      696,  328,  249,  249,  249,  249,  696,  330,  334,  332,
      331,  336,  696,   98,  335,  696,  696,  333,  696,  337,

      249,  249,  249,  249,  338,  696,  338,  696,  696,  339,
      339,  339,  339,  696,  251,  696,  251,  251,  251,  253,
      253,  253,  253,  253,  253,  253,  253,  696,  696,   96,
      696,  251,  696,  696,  251,  251,  696,  251,  254,  696,
      254,  254,  254,   98,  255,  255,  255,  255,  696,  696,
       96,  696,   96,  696,   96,  254,   96,   96,  254,  254,
       96,  254,  255,  255,   98,  255,   98,   96,   98,   96,
       98,   98,   96,  255,   98,   96,  340,   96,   96,   96,
      696,   98,   96,   98,  696,   96,   98,  696,   96,   98,
      696,   98,   98,   98,  342,   96,   98,  696,  343,   98,

      347,  341,   98,   96,  344,   96,  696,  696,   96,   98,
      349,  345,   96,  346,   96,  696,  348,   98,  696,   98,
      354,  355,   98,  696,  351,  696,   98,   96,   98,  350,
       96,  352,  353,   96,   96,  696,   96,  356,   96,  357,
       96,   98,  358,  359,   98,   96,  361,   98,   98,  360,
       98,   96,   98,   96,   98,   96,   96,   96,   96,   98,
       96,   96,  362,  696,   96,   98,   96,   98,  696,   98,
       98,   98,   98,  363,   98,   98,  696,  367,   98,   96,
       98,   96,  366,   96,   96,  368,   96,  364,  370,   96,
      365,  696,  369,   98,  696,   98,  696,   98,   98,  696,

       98,   96,  696,   98,  696,  372,   96,   96,  375,   96,
      371,  373,  696,  376,   96,   98,  374,  696,  383,   96,
       98,   98,   96,   98,  696,   96,  381,  696,   98,   96,
       96,  377,   96,   98,   96,   96,   98,  379,  378,   98,
       96,  380,   96,   98,   98,   96,   98,  696,   98,   98,
      382,  696,   96,  696,   98,   96,   98,   96,  386,   98,
       96,  384,   96,   96,   96,  387,   98,  385,  696,   98,
       96,   98,  696,  388,   98,  696,   98,   98,   98,   96,
      696,  696,  394,  389,   98,   96,  391,  392,  696,  390,
       96,  397,   96,   98,  393,  395,  396,   96,  399,   98,

      696,  401,  402,   96,   98,   96,   98,  696,  696,  400,
       96,   98,  696,  696,  398,   96,   96,   98,  403,   98,
      339,  339,  339,  339,   98,  339,  339,  339,  339,   98,
       98,   96,  405,  696,  404,   96,  696,   96,  696,   96,
       96,  696,   96,  696,   96,   98,   96,  406,  408,   98,
      409,   98,   96,   98,   98,  696,   98,  407,   98,   96,
       98,  696,   96,  410,  696,   96,   98,   96,   96,   96,
       96,   96,  413,   98,   96,  411,   98,  412,  421,   98,
      416,   98,   98,   98,   98,   98,   96,  415,   98,  696,
       96,  414,  419,  418,   96,  696,  696,  417,   96,   96,

       98,   96,  696,  420,   98,  424,   96,  427,   98,  425,
      426,   96,   98,   98,   96,   98,  422,  423,   96,   96,
       98,  696,   96,  428,   96,   98,  430,   96,   98,   96,
       96,  431,   98,   98,  432,  429,   98,   96,   98,   96,
       96,   98,   96,   98,   98,   96,   96,  434,   96,   96,
      696,   98,  696,   98,   98,  433,   98,   96,  436,   98,
       98,  435,   98,   98,  439,   96,  437,  440,   96,  438,
       96,   98,   96,  696,  696,  696,  445,  443,   96,   98,
      441,  442,   98,   96,   98,  696,   98,  447,  444,  448,
       96,   96,   98,  454,  696,   96,   96,   98,   96,  446,

       96,   96,  696,   96,   98,   98,   96,   96,  452,   98,
       98,   96,   98,   96,   98,   98,  449,   98,  696,   96,
       98,   98,  450,   96,  451,   98,  696,   98,  696,  696,
       96,   96,  453,   98,  455,  457,   96,   98,  459,  458,
      456,   96,  461,  463,   98,   98,  696,   96,  460,  696,
       98,   96,   96,  696,  464,   98,   96,  462,  466,   96,
      465,   98,   96,  467,   96,   98,   98,  469,   96,   96,
       98,   96,   96,   98,   96,   96,   98,  471,   98,  468,
      470,   96,   98,   98,   96,   98,   98,  483,   98,   98,
       96,  472,  696,   96,  475,   98,   96,   96,   98,   96,

       96,  473,   96,   96,   98,  474,  476,   98,  696,  696,
       98,   98,  696,   98,   98,  478,   98,   98,  477,  696,
      486,  481,   96,  479,  480,   96,  484,   96,  696,   96,
      482,   96,  487,  485,  696,   96,   98,  696,  696,   98,
      488,   98,  491,   98,   96,   98,   96,  492,  493,   98,
       96,  489,  490,   96,   96,   96,   96,  696,   98,  696,
       98,  494,   96,  495,   98,   96,  500,   98,   98,   98,
       98,  496,   96,  497,   96,  502,   98,   96,   96,   98,
      498,   96,  499,   96,  696,   96,   98,   96,   98,  501,
      696,   98,   98,   96,   96,   98,   96,   98,  503,   98,

       96,   98,  696,  504,  505,   96,   96,   98,   98,   96,
       98,  696,   96,  507,   98,   96,  506,  696,  508,   98,
       98,  696,   96,   98,   96,  510,   98,   96,   96,   98,
       96,  511,   96,   96,   96,  509,   98,   96,   98,  696,
       96,   98,   98,   96,   98,   96,   98,   98,   98,  696,
       96,   98,   96,  512,   98,  696,  696,   98,   96,   98,
      515,   96,  696,  513,   98,  696,   98,   96,  514,  517,
      518,  521,   98,  696,   96,   98,  523,  516,   96,  519,
      520,   98,  696,   96,   96,   96,   96,  525,   98,   96,
       96,   96,   98,  524,   96,  522,  526,   98,   98,   98,

       98,   96,   96,   98,   98,   98,   96,   96,   98,  696,
      696,   96,   96,  696,  696,   98,   98,   96,  527,  696,
       98,   98,  696,  529,  531,   98,   98,  528,  530,  533,
      534,   98,  696,  532,   96,  535,   96,   96,  536,   96,
       96,  696,   96,  539,   96,   96,  538,  540,   98,  537,
       98,   98,   96,   98,   98,  541,   98,   96,   98,   98,
      696,   96,  542,   96,   96,   96,   98,   96,   96,  543,
       96,   98,   96,   96,  544,   98,  545,   98,   98,   98,
       96,   98,   98,  696,   98,   96,   98,   98,   96,   96,
      548,   96,  696,   96,   98,  549,  546,  547,   96,   98,

       96,   96,   98,   98,   96,   98,  553,   98,  696,  696,
      556,  696,   98,   96,   98,   98,  551,   96,   98,  552,
       96,   96,  550,  554,  557,  555,   96,   98,   96,  558,
       96,   98,   96,   96,   98,   98,  696,   96,  559,  696,
       98,  561,   98,  696,   98,  696,   98,   98,  566,   96,
      560,   98,   96,  563,   96,   96,  562,  564,   96,  567,
       96,  568,   96,   98,  565,   96,   98,   96,   98,   98,
       96,   96,   98,  696,   98,  569,   98,   96,   96,   98,
      570,   98,   96,   96,   98,   98,   96,  571,  696,   96,
      572,   98,   98,   96,  696,  577,   98,   98,  696,  574,

       98,   96,  579,   98,  696,   96,  696,   98,  573,   96,
      696,  575,  578,  576,   96,   98,   96,  584,  583,   98,
      582,   96,   96,   98,  580,  581,   96,   96,   98,   96,
       98,   96,  585,   96,   96,   98,   98,   96,   96,   96,
       98,   98,  696,   98,   96,   98,   96,   98,   98,   96,
      587,   98,   98,   98,  586,   96,  588,  590,   98,  696,
       98,  592,   96,   98,   96,  696,  595,  593,   96,   98,
       96,  696,  597,  598,  696,   96,   98,  696,   98,  599,
      589,  591,   98,  594,   98,  602,  696,   96,  596,   98,
      696,  603,  696,  600,  696,   96,   96,   96,   96,   96,

      601,   98,   96,   96,  605,   96,  604,  696,  606,   98,
       98,   98,   98,   98,   96,   96,   98,   98,   96,   98,
       96,  607,  696,  696,   96,  608,  616,   96,   98,   98,
       96,   96,   98,   96,   98,   96,  609,  610,   98,   96,
       96,   98,  611,  612,   98,   98,   96,   98,   96,   98,
      613,   96,  696,   98,   98,   96,  696,   96,  614,   96,
       98,  696,   98,   96,   96,   98,  618,   96,   96,   98,
      619,   98,   96,   98,  620,  621,  615,   98,   98,  617,
       96,   98,   98,  696,   96,   96,   98,   96,   96,  696,
      696,   96,  696,   96,   98,   96,  624,  623,   98,   98,

       96,   98,   98,  626,  629,   98,  622,   98,   96,   98,
       96,   96,  696,   96,   98,  627,  696,  625,  631,  628,
      632,  630,   98,  633,   98,   98,  636,   98,  637,   96,
      638,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,  696,   96,   98,   96,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,  639,   98,  696,   98,  640,
      696,   96,  696,  696,  641,   96,   96,  696,   96,   96,
      696,  643,  650,  648,  651,   98,  646,  649,   96,   98,
       98,  642,   98,   98,  653,  644,   96,  645,   96,  647,
       96,   96,   98,   96,   96,  696,  652,  654,   96,   96,

       98,  696,   98,   96,   98,   98,   96,   98,   98,  657,
       96,   96,   98,   98,   96,  656,  696,   98,   96,  655,
       98,   96,   96,   96,   98,   98,   96,  659,   98,  661,
      658,   96,   98,   96,  696,   98,   98,   98,  660,   96,
       98,   96,   96,   96,   96,   98,   96,   98,  663,  696,
      662,  696,  665,   98,   96,   98,   98,   98,   98,   96,
       98,   96,  664,  667,   96,  666,  668,  696,   98,  669,
       96,  696,  696,   98,   96,   98,  670,   96,   98,   96,
      696,  671,  696,  673,   98,  672,  678,  676,   98,   96,
       96,   98,  674,   98,  675,   96,  677,  696,  696,  696,

      696,   96,   96,   98,   98,   96,   96,   96,   96,   98,
       96,  680,  683,  679,  681,   98,   98,  696,   96,   98,
       98,   98,   98,   96,   98,   96,   96,  696,   96,  682,
      684,  686,   98,  696,  696,  696,  696,   98,  685,   98,
       98,  687,   98,  696,  696,  696,  696,  690,  696,  692,
      696,  696,  696,  696,  696,  696,  696,  696,  689,  688,
      694,  695,  691,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  693,   61,   61,
       61,   61,   61,   61,   61,   68,   68,  696,   68,   68,
       68,   68,   97,  696,  696,   97,   97,   97,  167,  167,

      168,  168,  256,  256,  256,  257,  257,  635,  635,  635,
      635,    3,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696
    } ;

static yyconst short int yy_chk[2488] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   10,   13,   13,   14,   19,
       57,   22,   21,   22,   22,   22,   22,   30,   30,   23,
      635,   19,   21,   21,   23,   14,   32,  616,   25,   25,

       25,   25,   23,   26,   28,   61,   33,   26,  101,  100,
       32,   10,   24,   98,   24,   24,   24,   24,   25,   28,
       33,   28,   28,   39,   34,   57,   43,   24,   34,   34,
       24,   24,   24,   24,   24,   96,   40,   39,   69,   38,
       43,   61,   34,   47,   24,  100,   25,   69,   24,   24,
       40,   24,   95,   38,   41,   45,   33,   47,   68,   24,
       38,   38,   24,   42,   91,   38,   48,   44,   41,   45,
       76,   46,   39,   43,   38,   43,   39,   42,   39,   38,
       48,   44,   49,   38,   43,   46,   63,   37,   40,   68,
       41,   29,   38,   47,   18,   45,   49,   41,   15,   42,

       42,   41,   48,   42,   41,   45,   48,   50,   51,   54,
       42,   44,   46,   42,   44,   52,   97,   44,   55,   46,
       46,   50,   51,   54,   46,  105,   53,    9,    3,   52,
       97,   99,   55,    0,   49,  115,   83,   49,   83,  105,
       53,   83,   83,   83,   83,   99,  103,   50,   51,  115,
      104,   51,   51,   54,   55,    0,    0,    0,   52,   54,
      103,   55,   51,   51,  104,   51,   84,   84,   84,   84,
       53,  115,  108,  105,   52,   53,   77,   77,   77,   77,
        0,   99,    0,  107,   84,   84,  108,   84,  109,   77,
       77,  110,   77,   77,   77,   84,  103,  107,  111,    0,

      104,    0,  109,    0,  112,  110,   77,   77,  114,  118,
       77,   77,  111,   77,   81,   81,   81,   81,  112,  113,
      117,  108,  114,  118,  116,    0,  122,   81,   81,  123,
       81,   81,   81,  113,  117,    0,    0,    0,  116,  119,
      122,  107,  109,  123,   81,   81,  111,    0,   81,   81,
      110,   81,   82,  119,   82,   82,   82,   82,  112,  113,
      116,  114,  120,  118,  121,  124,    0,   82,    0,  117,
       82,   82,   82,   82,    0,    0,  120,    0,  121,  124,
      119,  122,  123,  119,   82,    0,    0,  125,   82,   82,
      126,   82,  131,  119,  129,    0,  127,    0,  128,   82,

      106,  125,  134,  120,  126,  130,  131,  132,  129,  120,
      127,  121,  128,  133,  106,  135,  134,  136,  137,  130,
      124,  132,  165,  165,  165,  165,    0,  133,    0,  135,
        0,  136,  137,  138,    0,  139,  106,  106,  106,  106,
      106,  125,  126,  140,  106,    0,  127,  138,  129,  139,
      128,  133,  106,  106,  106,  134,  106,  140,  132,  130,
      133,    0,  141,    0,  135,  136,  143,  133,  142,    0,
      144,    0,  139,  145,    0,  137,  141,  138,    0,  146,
      143,  147,  142,  138,  144,  140,  148,  145,  150,  149,
      151,  153,  140,  146,    0,  147,  140,  140,  180,  152,

      148,  172,  150,  149,  151,  153,  144,  154,  143,  144,
      145,    0,  180,  152,    0,  172,  141,  174,  142,    0,
      144,  154,  144,  146,    0,  147,  143,    0,  159,    0,
      159,  174,  150,  159,  159,  159,  159,  148,  149,    0,
        0,  150,  151,  152,  173,  153,  152,    0,  172,    0,
      160,  154,  160,  160,  160,  162,  180,  162,  173,    0,
      162,  162,  162,  162,    0,  174,    0,  160,    0,    0,
      160,  160,    0,  160,  161,  161,  161,  161,  163,  177,
      163,  163,  163,  179,    0,    0,  175,  161,  161,  178,
      161,  161,  161,  177,  173,  163,    0,  179,  163,  163,

      175,  163,  181,  178,  161,  161,    0,  182,  161,  161,
      176,  161,  164,  164,  164,  164,  181,  167,  167,  167,
      167,  182,  175,  179,  176,    0,  183,    0,  178,    0,
      164,  164,    0,  164,  177,  167,  167,    0,  167,  178,
      183,  164,  166,  166,  166,  166,  167,  182,  184,    0,
        0,  181,  185,  187,  186,  188,  166,  176,  166,  166,
      166,  189,  184,  176,  176,    0,  185,  187,  186,  188,
      183,  190,  191,  166,  192,  189,  166,  166,  193,  166,
      183,  194,    0,  195,  196,  190,  191,  197,  192,  200,
      198,  184,  193,    0,  188,  194,  189,  195,  196,  199,

      187,  197,  185,  200,  198,  201,  202,  184,  186,    0,
      192,    0,  203,  199,  204,  205,  206,  207,  193,  201,
      202,  208,  191,  197,    0,  200,  203,    0,  204,  205,
      206,  207,    0,  194,  198,  208,  195,  196,  196,  209,
      210,  201,    0,    0,  211,  212,  202,    0,  199,  201,
        0,  204,  203,  209,  210,  205,  203,  207,  211,  212,
      213,  208,  214,  215,  206,  216,  217,  218,  219,    0,
      221,  222,  223,  220,  213,  209,  214,  215,  216,  216,
      217,  218,  219,  220,  221,  222,  223,  220,  224,  225,
      226,  227,    0,    0,    0,  212,    0,  228,  229,  230,

        0,  231,  224,  225,  226,  227,  217,  215,  219,  218,
      213,  228,  229,  230,  214,  231,  232,  233,    0,  223,
      234,  235,  222,  236,  237,  239,  221,    0,  238,  225,
      232,  233,  224,  240,  234,  235,    0,  236,  237,  239,
      241,  231,  238,  243,  226,  242,  227,  240,  230,  244,
      229,    0,  247,  246,  241,  233,    0,  243,  245,  242,
      257,  236,    0,  244,    0,  239,  247,  246,    0,    0,
      232,  234,  245,    0,  257,    0,  235,    0,  237,  258,
        0,  238,  248,  248,  248,  248,    0,  240,  244,  242,
      241,  246,    0,  258,  245,    0,    0,  243,    0,  247,

      249,  249,  249,  249,  250,    0,  250,    0,    0,  250,
      250,  250,  250,  249,  251,    0,  251,  251,  251,  252,
      252,  252,  252,  253,  253,  253,  253,    0,    0,  259,
      249,  251,    0,    0,  251,  251,  253,  251,  254,    0,
      254,  254,  254,  259,  255,  255,  255,  255,    0,    0,
      260,    0,  261,  253,  262,  254,  263,  264,  254,  254,
      266,  254,  255,  255,  260,  255,  261,  267,  262,  265,
      263,  264,  268,  255,  266,  269,  259,  270,  272,  271,
        0,  267,  273,  265,    0,  274,  268,    0,  275,  269,
        0,  270,  272,  271,  261,  276,  273,    0,  262,  274,

      266,  260,  275,  277,  263,  278,    0,    0,  279,  276,
      268,  264,  280,  265,  281,    0,  267,  277,    0,  278,
      272,  273,  279,    0,  270,    0,  280,  282,  281,  269,
      283,  270,  271,  284,  285,    0,  286,  274,  287,  275,
      288,  282,  276,  277,  283,  289,  279,  284,  285,  278,
      286,  291,  287,  290,  288,  292,  293,  294,  295,  289,
      296,  298,  280,    0,  299,  291,  297,  290,    0,  292,
      293,  294,  295,  282,  296,  298,    0,  288,  299,  300,
      297,  301,  287,  302,  303,  289,  305,  285,  291,  304,
      286,    0,  290,  300,    0,  301,    0,  302,  303,    0,

      305,  306,    0,  304,    0,  293,  307,  308,  296,  309,
      292,  294,    0,  297,  310,  306,  295,    0,  307,  311,
      307,  308,  312,  309,    0,  313,  305,    0,  310,  314,
      315,  300,  316,  311,  317,  318,  312,  302,  301,  313,
      319,  304,  320,  314,  315,  321,  316,    0,  317,  318,
      306,    0,  322,    0,  319,  323,  320,  324,  312,  321,
      325,  308,  326,  327,  328,  313,  322,  310,    0,  323,
      330,  324,    0,  314,  325,    0,  326,  327,  328,  329,
        0,    0,  320,  315,  330,  331,  317,  318,    0,  316,
      332,  323,  333,  329,  319,  321,  322,  334,  325,  331,

        0,  327,  328,  335,  332,  336,  333,    0,    0,  326,
      337,  334,    0,    0,  324,  340,  341,  335,  329,  336,
      338,  338,  338,  338,  337,  339,  339,  339,  339,  340,
      341,  342,  332,    0,  331,  343,    0,  344,  339,  345,
      346,    0,  347,    0,  348,  342,  349,  333,  336,  343,
      337,  344,  350,  345,  346,  339,  347,  335,  348,  351,
      349,    0,  353,  341,    0,  352,  350,  355,  354,  356,
      357,  358,  344,  351,  359,  342,  353,  343,  352,  352,
      347,  355,  354,  356,  357,  358,  360,  346,  359,    0,
      361,  345,  350,  349,  362,    0,    0,  348,  363,  364,

      360,  365,    0,  351,  361,  355,  366,  358,  362,  356,
      357,  367,  363,  364,  368,  365,  353,  354,  369,  370,
      366,    0,  371,  359,  372,  367,  361,  373,  368,  374,
      375,  362,  369,  370,  364,  360,  371,  376,  372,  377,
      378,  373,  379,  374,  375,  380,  381,  367,  383,  382,
        0,  376,    0,  377,  378,  366,  379,  384,  369,  380,
      381,  368,  383,  382,  372,  385,  370,  373,  386,  371,
      388,  384,  387,    0,    0,    0,  378,  376,  389,  385,
      374,  375,  386,  390,  388,    0,  387,  381,  377,  382,
      391,  392,  389,  390,    0,  393,  394,  390,  395,  380,

      396,  397,    0,  399,  391,  392,  398,  400,  388,  393,
      394,  401,  395,  402,  396,  397,  385,  399,    0,  404,
      398,  400,  386,  403,  387,  401,    0,  402,    0,    0,
      405,  406,  389,  404,  391,  394,  407,  403,  396,  395,
      392,  408,  398,  400,  405,  406,    0,  409,  397,    0,
      407,  410,  411,    0,  401,  408,  412,  399,  403,  413,
      402,  409,  414,  403,  415,  410,  411,  406,  416,  417,
      412,  418,  419,  413,  422,  421,  414,  408,  415,  405,
      407,  420,  416,  417,  424,  418,  419,  421,  422,  421,
      426,  410,    0,  423,  413,  420,  425,  427,  424,  428,

      430,  411,  429,  431,  426,  412,  414,  423,    0,    0,
      425,  427,    0,  428,  430,  416,  429,  431,  415,    0,
      424,  419,  432,  417,  418,  433,  422,  435,    0,  434,
      420,  436,  425,  423,    0,  437,  432,    0,    0,  433,
      426,  435,  429,  434,  438,  436,  439,  430,  431,  437,
      440,  427,  428,  441,  442,  443,  444,    0,  438,    0,
      439,  432,  445,  432,  440,  446,  435,  441,  442,  443,
      444,  432,  447,  432,  448,  437,  445,  449,  450,  446,
      433,  451,  434,  452,    0,  453,  447,  454,  448,  436,
        0,  449,  450,  455,  456,  451,  457,  452,  438,  453,

      458,  454,    0,  441,  442,  459,  460,  455,  456,  461,
      457,    0,  462,  449,  458,  463,  445,    0,  450,  459,
      460,    0,  464,  461,  465,  453,  462,  466,  467,  463,
      468,  455,  469,  470,  471,  451,  464,  472,  465,    0,
      473,  466,  467,  474,  468,  475,  469,  470,  471,    0,
      476,  472,  477,  460,  473,    0,    0,  474,  478,  475,
      465,  479,    0,  461,  476,    0,  477,  480,  463,  467,
      468,  471,  478,    0,  481,  479,  473,  466,  483,  469,
      470,  480,    0,  482,  484,  485,  486,  476,  481,  488,
      487,  489,  483,  474,  490,  472,  477,  482,  484,  485,

      486,  491,  492,  488,  487,  489,  493,  494,  490,    0,
        0,  495,  496,    0,    0,  491,  492,  497,  480,    0,
      493,  494,    0,  482,  485,  495,  496,  481,  484,  487,
      488,  497,    0,  486,  498,  489,  499,  500,  490,  501,
      502,    0,  503,  494,  504,  505,  493,  494,  498,  492,
      499,  500,  506,  501,  502,  495,  503,  507,  504,  505,
        0,  508,  496,  509,  510,  511,  506,  512,  513,  497,
      514,  507,  515,  516,  498,  508,  499,  509,  510,  511,
      517,  512,  513,    0,  514,  518,  515,  516,  519,  520,
      506,  521,    0,  522,  517,  507,  504,  505,  523,  518,

      524,  525,  519,  520,  526,  521,  513,  522,    0,    0,
      516,    0,  523,  529,  524,  525,  510,  527,  526,  511,
      528,  530,  509,  514,  518,  515,  531,  529,  532,  520,
      533,  527,  534,  535,  528,  530,    0,  536,  521,    0,
      531,  524,  532,    0,  533,    0,  534,  535,  529,  537,
      523,  536,  538,  526,  539,  541,  525,  527,  540,  530,
      542,  531,  543,  537,  528,  544,  538,  545,  539,  541,
      546,  547,  540,    0,  542,  532,  543,  548,  549,  544,
      535,  545,  550,  551,  546,  547,  552,  536,    0,  553,
      538,  548,  549,  554,    0,  542,  550,  551,    0,  540,

      552,  555,  545,  553,    0,  556,    0,  554,  539,  557,
        0,  540,  543,  541,  558,  555,  559,  550,  549,  556,
      548,  560,  561,  557,  546,  547,  563,  562,  558,  564,
      559,  566,  553,  565,  567,  560,  561,  568,  569,  570,
      563,  562,    0,  564,  571,  566,  572,  565,  567,  573,
      556,  568,  569,  570,  555,  574,  559,  561,  571,    0,
      572,  563,  575,  573,  576,    0,  566,  564,  577,  574,
      578,    0,  568,  569,    0,  579,  575,    0,  576,  570,
      560,  562,  577,  565,  578,  573,    0,  580,  567,  579,
        0,  574,    0,  571,    0,  581,  582,  583,  585,  584,

      572,  580,  586,  587,  576,  588,  575,    0,  577,  581,
      582,  583,  585,  584,  589,  590,  586,  587,  591,  588,
      592,  578,    0,    0,  593,  579,  593,  595,  589,  590,
      594,  596,  591,  597,  592,  598,  582,  584,  593,  599,
      600,  595,  585,  587,  594,  596,  601,  597,  602,  598,
      590,  603,    0,  599,  600,  604,    0,  605,  591,  606,
      601,    0,  602,  607,  608,  603,  596,  609,  610,  604,
      598,  605,  611,  606,  599,  600,  592,  607,  608,  594,
      612,  609,  610,    0,  613,  614,  611,  615,  619,    0,
        0,  617,    0,  618,  612,  620,  605,  604,  613,  614,

      621,  615,  619,  607,  610,  617,  603,  618,  622,  620,
      623,  624,    0,  625,  621,  608,    0,  606,  612,  609,
      614,  611,  622,  615,  623,  624,  617,  625,  618,  626,
      620,  627,  628,  629,  630,  631,  637,  633,  632,  636,
      638,    0,  639,  626,  640,  627,  628,  629,  630,  631,
      637,  633,  632,  636,  638,  622,  639,    0,  640,  623,
        0,  641,    0,    0,  625,  642,  643,    0,  644,  645,
        0,  627,  633,  632,  636,  641,  630,  632,  646,  642,
      643,  626,  644,  645,  640,  628,  647,  629,  648,  631,
      649,  650,  646,  651,  652,    0,  639,  641,  653,  654,

      647,    0,  648,  655,  649,  650,  656,  651,  652,  645,
      657,  659,  653,  654,  658,  643,    0,  655,  661,  642,
      656,  662,  660,  663,  657,  659,  664,  650,  658,  652,
      649,  665,  661,  666,    0,  662,  660,  663,  650,  668,
      664,  667,  669,  670,  671,  665,  672,  666,  654,    0,
      653,    0,  657,  668,  673,  667,  669,  670,  671,  674,
      672,  675,  655,  659,  676,  658,  660,    0,  673,  661,
      677,    0,    0,  674,  678,  675,  663,  679,  676,  680,
        0,  665,    0,  667,  677,  666,  672,  670,  678,  681,
      682,  679,  668,  680,  669,  683,  671,    0,    0,    0,

        0,  684,  685,  681,  682,  686,  687,  688,  689,  683,
      690,  675,  678,  674,  676,  684,  685,    0,  691,  686,
      687,  688,  689,  693,  690,  692,  694,    0,  695,  677,
      680,  683,  691,    0,    0,    0,    0,  693,  681,  692,
      694,  684,  695,    0,    0,    0,    0,  688,    0,  690,
        0,    0,    0,    0,    0,    0,    0,    0,  687,  686,
      692,  694,  689,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  691,  697,  697,
      697,  697,  697,  697,  697,  698,  698,    0,  698,  698,
      698,  698,  699,    0,    0,  699,  699,  699,  700,  700,

      701,  701,  702,  702,  702,  703,  703,  704,  704,  704,
      704,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define INITIAL 0
#line 10 "lexer.l"
import "ecdefs"
#define YYLTYPE Location
#define YY_NEVER_INTERACTIVE 1    // Avoid calling isatty on eC File object

#include "grammar.h"

bool echoOn = true;
public void SetEchoOn(bool b) { echoOn = b; }

extern YYLTYPE type_yylloc;
extern YYLTYPE expression_yylloc;

extern File fileInput;
int preprocessor();
int comment();

void TESTTTT()
{
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   type_yylloc.end.charPos += yyleng;
   type_yylloc.end.pos += yyleng;
   expression_yylloc.end.charPos += yyleng;
   expression_yylloc.end.pos += yyleng;
}

#define YY_USER_ACTION  \
   TESTTTT();

   /*
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   */

#define YY_INPUT(buf,result,max_size) \
   result = fileInput.Read(buf, 1, max_size) \

YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
File fileStack[MAX_INCLUDE_DEPTH];
char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
public void SetSomeSourceFileStack(char * fileName, int index) { strcpy(sourceFileStack[index], fileName); }
YYLTYPE locStack[MAX_INCLUDE_DEPTH];
AccessMode declModeStack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

#define uint _uint
default:

#line 1194 "lexer.ec"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 60 "lexer.l"



   yylloc.start = yylloc.end;
   type_yylloc.start = type_yylloc.end;
   expression_yylloc.start = expression_yylloc.end;


#line 1354 "lexer.ec"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 697 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2412 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 68 "lexer.l"
{ preprocessor(); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 69 "lexer.l"
{ comment(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 70 "lexer.l"
{ commentCPP(); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 72 "lexer.l"
{ return(AUTO); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 73 "lexer.l"
{ return(BREAK); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 74 "lexer.l"
{ return(CASE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 75 "lexer.l"
{ return(CHAR); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 76 "lexer.l"
{ return(CONST); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 77 "lexer.l"
{ return(CONTINUE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 78 "lexer.l"
{ return(DEFAULT); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 79 "lexer.l"
{ return(DO); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 80 "lexer.l"
{ return(DOUBLE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 81 "lexer.l"
{ return(ELSE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 82 "lexer.l"
{ return(ENUM); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 83 "lexer.l"
{ return(EXTERN); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 84 "lexer.l"
{ return(FLOAT); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 85 "lexer.l"
{ return(FOR); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 86 "lexer.l"
{ return(GOTO); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 87 "lexer.l"
{ return(IF); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 88 "lexer.l"
{ return(INT); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 89 "lexer.l"
{ return(UINT); }
	YY_BREAK
/* "uint16"            { return(UINT16); } */
/* "uint32"            { return(UINT32); } */
/* "bool"              { return(BOOL_TOKEN); } */
case 22:
YY_RULE_SETUP
#line 93 "lexer.l"
{ return(LONG); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 94 "lexer.l"
{ return(REGISTER); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 95 "lexer.l"
{ return(RETURN); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 96 "lexer.l"
{ return(SHORT); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 97 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 98 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 99 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 100 "lexer.l"
{ return(SIZEOF); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 101 "lexer.l"
{ return(ALIGNOF); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 102 "lexer.l"
{ return(STATIC); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 103 "lexer.l"
{ return(THREAD); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 104 "lexer.l"
{ return(STRUCT); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 105 "lexer.l"
{ return(SWITCH); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 106 "lexer.l"
{ return(TYPEDEF); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 107 "lexer.l"
{ return(UNION); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 108 "lexer.l"
{ return(UNSIGNED); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 109 "lexer.l"
{ return(VOID); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 110 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 111 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 112 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 113 "lexer.l"
{ return(WHILE); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 115 "lexer.l"
{ return(PROPERTY); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 116 "lexer.l"
{ return(SETPROP); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 117 "lexer.l"
{ return(GETPROP); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 118 "lexer.l"
{ return(ISPROPSET); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 119 "lexer.l"
{ return(CLASS); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 120 "lexer.l"
{ return(THISCLASS); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 121 "lexer.l"
{ return(VIRTUAL); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 122 "lexer.l"
{ return(DELETE); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 123 "lexer.l"
{ return(NEWOP); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 124 "lexer.l"
{ return(NEW0OP); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 125 "lexer.l"
{ return(RENEW); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 126 "lexer.l"
{ return(RENEW0); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 127 "lexer.l"
{ return(IMPORT); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 128 "lexer.l"
{ return(DEFINE); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 129 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 130 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 131 "lexer.l"
{ return(VALIST); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 132 "lexer.l"
{ return(VAARG); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 133 "lexer.l"
{ return(BOOL); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 134 "lexer.l"
{ return(_BOOL); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 135 "lexer.l"
{ return(_COMPLEX); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 136 "lexer.l"
{ return(_IMAGINARY); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 137 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
/* "__attribute__".?"(("({D}|{L})*"))" { return(EXT_ATTRIB); } */
/* DID I MEAN? "__attribute__"" "*"(("" "*({D}|{L})*" "*("("({D}|{L})*(" "*","" "*({D}|{L})*)*" "*")")?" "*"))" { return(EXT_ATTRIB); } */
/*
 "__attribute_deprecated__"(" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute__"           (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute"             (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 */
/*
 [__attribute__] [spaces]
   [((] [spaces]
      [digits | letters] [spaces]
         ( [(]  [digits or letters or "]  ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces]  [)] )?
      [spaces]
      ( [,] [spaces]  [digits or letters]  [spaces]
         ( [(]  [digits or letters or "]
            ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces] [)]
         )? [spaces]
      )*
   [))]
 */
/* "__attribute__".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); } */
/* "__attribute".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); }*/
case 66:
YY_RULE_SETUP
#line 164 "lexer.l"
{ return ATTRIB_DEP; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 165 "lexer.l"
{ return ATTRIB; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 166 "lexer.l"
{ return __ATTRIB; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 168 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 169 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 170 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 171 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 172 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 173 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 174 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 175 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 176 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 177 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 178 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 179 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 180 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 181 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 182 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 183 "lexer.l"
{ return(PUBLIC); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 184 "lexer.l"
{ return(PRIVATE); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 185 "lexer.l"
{ return(TYPED_OBJECT); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 186 "lexer.l"
{ return(ANY_OBJECT); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 187 "lexer.l"
{ return(_INCREF); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 188 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 189 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 190 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 191 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 192 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 193 "lexer.l"
{ return(TYPEOF); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 194 "lexer.l"
{ return(WATCH); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 195 "lexer.l"
{ return(STOPWATCHING); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 196 "lexer.l"
{ return(FIREWATCHERS); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 197 "lexer.l"
{ return(WATCHABLE); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 198 "lexer.l"
{ return(CLASS_DESIGNER); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 199 "lexer.l"
{ return(CLASS_NO_EXPANSION); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 200 "lexer.l"
{ return(CLASS_FIXED); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 201 "lexer.l"
{ return(CLASS_DEFAULT_PROPERTY); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 202 "lexer.l"
{ return(PROPERTY_CATEGORY); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 203 "lexer.l"
{ return(CLASS_DATA); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 204 "lexer.l"
{ return(CLASS_PROPERTY); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 205 "lexer.l"
{ return(SUBCLASS); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 206 "lexer.l"
{ return(NAMESPACE); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 207 "lexer.l"
{ return(DBTABLE); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 208 "lexer.l"
{ return(DBFIELD); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 209 "lexer.l"
{ return(DBINDEX); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 210 "lexer.l"
{ return(DATABASE_OPEN); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 212 "lexer.l"
{ return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); }  // ("::"|(({IDENT}"::")*)){IDENT}  { return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 214 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 215 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 216 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 217 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 219 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 220 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 221 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 223 "lexer.l"
{ return(STRING_LITERAL); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 225 "lexer.l"
{ return(ELLIPSIS); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 226 "lexer.l"
{ return(RIGHT_ASSIGN); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 227 "lexer.l"
{ return(LEFT_ASSIGN); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 228 "lexer.l"
{ return(ADD_ASSIGN); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 229 "lexer.l"
{ return(SUB_ASSIGN); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 230 "lexer.l"
{ return(MUL_ASSIGN); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 231 "lexer.l"
{ return(DIV_ASSIGN); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 232 "lexer.l"
{ return(MOD_ASSIGN); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 233 "lexer.l"
{ return(AND_ASSIGN); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 234 "lexer.l"
{ return(XOR_ASSIGN); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 235 "lexer.l"
{ return(OR_ASSIGN); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 236 "lexer.l"
{ return(RIGHT_OP); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 237 "lexer.l"
{ return(LEFT_OP); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 238 "lexer.l"
{ return(INC_OP); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 239 "lexer.l"
{ return(DEC_OP); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 240 "lexer.l"
{ return(PTR_OP); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 241 "lexer.l"
{ return(AND_OP); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 242 "lexer.l"
{ return(OR_OP); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 243 "lexer.l"
{ return(LE_OP); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 244 "lexer.l"
{ return(GE_OP); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 245 "lexer.l"
{ return(EQ_OP); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 246 "lexer.l"
{ return(NE_OP); }
	YY_BREAK
/* "::"        { return(CLASS_OP); } */
case 143:
YY_RULE_SETUP
#line 248 "lexer.l"
{ return(';'); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 249 "lexer.l"
{ return('{'); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 250 "lexer.l"
{ return('}'); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 251 "lexer.l"
{ return(','); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 252 "lexer.l"
{ return(':'); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 253 "lexer.l"
{ return('='); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 254 "lexer.l"
{ return('('); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 255 "lexer.l"
{ return(')'); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 256 "lexer.l"
{ return('['); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 257 "lexer.l"
{ return(']'); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 258 "lexer.l"
{ return('.'); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 259 "lexer.l"
{ return('&'); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 260 "lexer.l"
{ return('!'); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 261 "lexer.l"
{ return('~'); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 262 "lexer.l"
{ return('-'); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 263 "lexer.l"
{ return('+'); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 264 "lexer.l"
{ return('*'); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 265 "lexer.l"
{ return('/'); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 266 "lexer.l"
{ return('%'); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 267 "lexer.l"
{ return('<'); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 268 "lexer.l"
{ return('>'); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 269 "lexer.l"
{ return('^'); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 270 "lexer.l"
{ return('|'); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 271 "lexer.l"
{ return('?'); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 272 "lexer.l"
{ return('$'); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 274 "lexer.l"
{
      while(include_stack_ptr && !fileStack[include_stack_ptr-1])
      {
         --include_stack_ptr;
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }

      if ( --include_stack_ptr < 0 )
      {
         include_stack_ptr = 0;
         yyterminate();
      }
      else
      {
         delete fileInput;
         yy_delete_buffer( YY_CURRENT_BUFFER );
         fileInput = fileStack[include_stack_ptr];
         yylloc = locStack[include_stack_ptr];
         type_yylloc = locStack[include_stack_ptr];
         expression_yylloc = locStack[include_stack_ptr];
         yy_switch_to_buffer(include_stack[include_stack_ptr] );
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }
   }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 300 "lexer.l"
{ yylloc.start = yylloc.end; type_yylloc.start = type_yylloc.end; expression_yylloc.start = expression_yylloc.end;}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 301 "lexer.l"
{
   yylloc.end.charPos = 1; yylloc.end.line += yyleng; yylloc.start = yylloc.end;
   type_yylloc.end.charPos = 1; type_yylloc.end.line += yyleng; type_yylloc.start = type_yylloc.end;
   expression_yylloc.end.charPos = 1; expression_yylloc.end.line += yyleng; expression_yylloc.start = expression_yylloc.end;
   }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 306 "lexer.l"
{
   yylloc.start.charPos++ /*= 3 - (yylloc.start.col % 3)*/; yylloc.end.charPos = yylloc.start.charPos; yylloc.start.pos = yylloc.end.pos;
   expression_yylloc.start.charPos++ /*= 3 - (expression_yylloc.start.col % 3)*/; expression_yylloc.end.charPos = expression_yylloc.start.charPos; expression_yylloc.start.pos = expression_yylloc.end.pos;
   type_yylloc.start.charPos++ /*= 3 - (type_yylloc.start.col % 3)*/; type_yylloc.end.charPos = type_yylloc.start.charPos; type_yylloc.start.pos = type_yylloc.end.pos;
   }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 311 "lexer.l"
{ yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 312 "lexer.l"
{
   yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end;
   if(inCompiler)
      printf("lexer error: invalid char 0x%X at line %d, col %d\n", (unsigned char)yytext[0], yylloc.start.line, yylloc.start.charPos);
   yyerror();
   }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 319 "lexer.l"
ECHO;
	YY_BREAK
#line 2368 "lexer.ec"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 697 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 697 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 696);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 319 "lexer.l"


private:

yywrap()
{
   return(1);
}

int comment()
{
   int c, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      if(c == '/' && last == '*')
         break;
      last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int commentCPP()
{
   int c, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         break;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int preprocessor()
{
   int c, last = 0;
   int count = 0;
   char line[1024];

   line[0] = '\0';

   for(;;)
   {
      c = input();
      if(c == EOF) break;

      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         if(last != '\\')
         {
            char * pointer = line + 1;
            int lineNumber;
            line[count] = 0;
            lineNumber = GetValue(&pointer);
            if(lineNumber)
            {
               char fileName[MAX_LOCATION];

               int inOut;

               fileName[0] = 0;
               GetString(&pointer, fileName, MAX_LOCATION);
               inOut = GetValue(&pointer);

               if(inOut == 1)
               {
                  char extension[MAX_EXTENSION];

                  defaultDeclMode = declModeStack[include_stack_ptr] = declMode;

                  GetExtension(fileName, extension);
                  if(!strcmp(extension, "c") || !strcmp(extension, "h"))
                     declMode = defaultDeclMode = structDeclMode = defaultAccess;

                  fileStack[include_stack_ptr] = null;
                  include_stack_ptr++;
               }
               else if(inOut == 2)
               {
                  include_stack_ptr--;
                  defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
               }

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               //yylloc.end.pos -= count;

               if(include_stack_ptr > 0 || (lineNumber && fileName[0]))
                  yylloc.end.included = GetIncludeFileID(fileName);
               else
                  yylloc.end.included = 0;
            }
            /*
            int lineNumber = strtol(line+1, &endPtr, 0);
            if(lineNumber)
            {
               GetString(&
               endPtr

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               yylloc.end.pos -= count;
            }
            */
            break;
         }
         count = 0;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
         line[count++] = c;
      }
      else
      {
         yylloc.end.pos++;
         if(c != '\r')
         {
            yylloc.end.charPos++;
            line[count++] = c;
         }
      }
      last = c;
   }
   yylloc.start = yylloc.end;
   line[count] = 0;

   TrimLSpaces(line, line);
   for(c = 0; line[c] && line[c] != ' '; c++);
   if(!strncmp(line, "include", c))
   {
      char includeFile[MAX_LOCATION] = "";

      memmove(line, line+c, strlen(line+c)+1);
      TrimLSpaces(line, line);
      if(line[0] == '\"')
      {
         for(c = 1; line[c]; c++)
         {
            if(line[c] == '\"')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
         }
      }
      else if(line[0] == '<')
      {
         for(c = 1; line[c]; c++)
            if(line[c] == '>')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
      }

      if ( include_stack_ptr >= MAX_INCLUDE_DEPTH )
      {
         fprintf( stderr, $"Includes nested too deeply" );
         exit( 1 );
      }

      if(inCompiler || !FindIncludeFileID(includeFile))
      {
         File file = OpenIncludeFile(includeFile);
         if(file)
         {
            char extension[MAX_EXTENSION];

            fileStack[include_stack_ptr] = fileInput;
            locStack[include_stack_ptr] = yylloc;
            defaultDeclMode = declModeStack[include_stack_ptr] = declMode;
            include_stack[include_stack_ptr++] = YY_CURRENT_BUFFER;

            yylloc.start.charPos = yylloc.end.charPos = 1;
            yylloc.start.line = yylloc.end.line = 1;
            yylloc.start.pos = yylloc.end.pos = 0;
            yylloc.start.included = yylloc.end.included = GetIncludeFileID(includeFile);

            GetExtension(includeFile, extension);
            if(!strcmp(extension, "c") || !strcmp(extension, "h"))
               declMode = defaultDeclMode = structDeclMode = defaultAccess;

            fileInput = file;
            yy_switch_to_buffer( yy_create_buffer( fileInput, YY_BUF_SIZE ) );
            BEGIN(INITIAL);
         }
         else
            printf("");
      }
   }
   return 0;
}

public void resetScanner()
{
   YY_FLUSH_BUFFER;
   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;
}

void resetScannerPos(CodePosition pos)
{
   YY_FLUSH_BUFFER;
   yylloc.start = yylloc.end = pos;
   type_yylloc.start = type_yylloc.end = pos;
   expression_yylloc.start = expression_yylloc.end = pos;
}

class LexerBackup
{
   YYLTYPE yylloc;
   YYLTYPE type_yylloc;
   YYLTYPE expression_yylloc;

   AccessMode declMode;
   AccessMode defaultDeclMode;

   File fileInput;
   YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
   File fileStack[MAX_INCLUDE_DEPTH];
   char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
   YYLTYPE locStack[MAX_INCLUDE_DEPTH];
   AccessMode declModeStack[MAX_INCLUDE_DEPTH];
   int include_stack_ptr;
   YY_BUFFER_STATE buffer;

   int yy_n_chars;
   char * yytext_ptr;
   char * yy_c_buf_p;
   FILE * yyin;
   char yy_hold_char;
   int yychar;
   int yy_init;
   int yy_start;

};

LexerBackup pushLexer()
{
   LexerBackup backup { };

   backup.yylloc = yylloc;
   backup.type_yylloc = type_yylloc;
   backup.expression_yylloc = expression_yylloc;
   backup.fileInput = fileInput;
   memcpy(backup.include_stack, include_stack, sizeof(include_stack));
   memcpy(backup.fileStack, fileStack, sizeof(fileStack));
   memcpy(backup.sourceFileStack, sourceFileStack, sizeof(sourceFileStack));
   memcpy(backup.locStack, locStack, sizeof(locStack));
   memcpy(backup.declModeStack, declModeStack, sizeof(declModeStack));
   backup.include_stack_ptr = include_stack_ptr;
   backup.defaultDeclMode = defaultDeclMode;
   backup.declMode = declMode;
   backup.buffer = yy_current_buffer;

   backup.yy_n_chars = yy_n_chars;
   backup.yytext_ptr = yytext_ptr;
   backup.yy_c_buf_p = yy_c_buf_p;
   backup.yyin = yyin;
   backup.yy_hold_char = yy_hold_char;
   backup.yychar = yychar;
   backup.yy_init = yy_init;
   backup.yy_start = yy_start;

   yy_init = 1;

   yy_current_buffer = 0;

   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;

   return backup;
}

void popLexer(LexerBackup backup)
{
   yylloc = backup.yylloc;
   type_yylloc = backup.type_yylloc;
   expression_yylloc = backup.expression_yylloc;
   fileInput = backup.fileInput;
   memcpy(include_stack, backup.include_stack, sizeof(include_stack));
   memcpy(fileStack, backup.fileStack, sizeof(fileStack));
   memcpy(sourceFileStack, backup.sourceFileStack, sizeof(sourceFileStack));
   memcpy(locStack, backup.locStack, sizeof(locStack));
   memcpy(declModeStack, backup.declModeStack, sizeof(declModeStack));
   include_stack_ptr = backup.include_stack_ptr;
   defaultDeclMode = backup.defaultDeclMode;
   declMode = structDeclMode = backup.declMode;

   // yy_switch_to_buffer(backup.buffer);
   yy_current_buffer = backup.buffer;
   yy_n_chars = backup.yy_n_chars;
   yytext_ptr = backup.yytext_ptr;
   yy_c_buf_p = backup.yy_c_buf_p;
   yyin = backup.yyin;
   yy_hold_char = backup.yy_hold_char;
   yychar = backup.yychar;
   yy_init = backup.yy_init;
   yy_start = backup.yy_start;

   delete backup;
}
