/* Code generated from Flex source file: lexer.l */
#line 2 "lexer.ec"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 166
#define YY_END_OF_BUFFER 167
static yyconst short int yy_accept[661] =
    {   0,
      106,  106,  167,  165,  164,  163,  162,  149,  165,    1,
      161,  155,  148,  165,  143,  144,  153,  152,  140,  151,
      147,  154,  109,  109,  141,  137,  156,  142,  157,  160,
      106,  106,  145,  146,  158,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  138,  159,  139,  150,  136,    0,  114,
        0,  122,  139,  131,  123,    0,    0,  120,  128,  118,
      129,  119,  130,    0,  112,    2,    3,  121,  113,  108,
        0,  109,    0,  109,  106,  146,  138,  145,  127,  133,
      135,  134,  126,    0,  106,    0,    0,    0,  124,  106,

      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,   11,  106,  106,  106,  106,
      106,  106,  106,  106,   19,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  125,  132,
      110,  115,    0,  112,  112,    0,  113,  108,    0,  111,
      107,  106,  117,  116,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,   86,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,   17,

       44,  106,  106,  106,  106,   20,  106,  106,  106,   50,
      106,  106,  106,  106,  106,  106,   43,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,    0,  112,    0,  112,
        0,  113,  111,  107,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,    4,  106,    6,    7,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,   13,   14,  106,  106,  106,   18,  106,  106,  106,
      106,  106,   22,  106,   51,  106,  106,  106,  106,  106,

      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,   21,  106,  106,  106,   37,  106,  106,  106,
        0,  112,  106,   87,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,    5,   46,    8,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,   16,  106,  106,
      106,   57,   45,  106,  106,  106,  106,  106,   52,  106,
       25,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,   35,  106,  106,  106,   89,   41,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,

      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,   55,   49,  106,  106,   12,   15,  106,
       54,   82,   66,  106,  106,  106,   78,  106,   53,   24,
       26,   29,   31,  106,  106,   32,  106,   33,  106,  106,
      106,  106,  106,  106,  106,  106,   85,  106,  106,   70,
       76,  106,  106,  106,   56,  106,  106,  106,  106,  106,
      106,   64,  106,  106,  106,  106,  106,  106,  106,  106,
      103,  104,  102,   10,  106,  106,  106,  106,   79,  106,
      106,   74,  106,  106,  106,  106,   34,  106,   48,  106,
      106,  106,  106,  106,  106,  106,   65,  106,   27,  106,

       88,  106,  106,   73,  106,  106,  106,  106,  106,  106,
        9,  106,  106,  106,  106,  106,   42,   23,  106,  100,
      106,  106,   36,   38,  106,  106,  106,  106,  106,  106,
      106,  106,  106,   71,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,   68,   69,  106,  101,  106,  106,
       47,  106,   92,  106,  106,  106,  106,  106,   63,   75,
       28,  106,   40,  106,   81,   98,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,   30,   62,  106,    0,
      106,  106,   72,  106,   84,  106,  106,   95,  106,  106,
      106,  106,  106,  106,  106,  106,  106,   67,    0,  106,

       77,   39,  106,  106,  106,  106,  106,   91,  106,   90,
       80,   61,  106,  106,   83,  106,  106,  106,  106,  105,
      106,  106,  106,  106,  106,   93,  106,   99,  106,  106,
      106,  106,  106,  106,  106,  106,   59,  106,  106,  106,
      106,  106,   58,  106,  106,   97,  106,  106,   94,  106,
      106,  106,  106,  106,  106,  106,   96,  106,   60,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   22,   21,   23,   21,   21,   21,   24,   25,   26,
       27,   28,   29,    1,   30,   30,   30,   30,   31,   32,
       33,   33,   33,   33,   33,   34,   33,   33,   33,   33,
       33,   33,   33,   33,   35,   33,   33,   36,   33,   33,
       37,   38,   39,   40,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   33,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[71] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        3,    1,    4,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    5,    2,    1,    1,    1,    1,    1,    6,
        6,    6,    7,    7,    7,    7,    1,    1,    1,    1,
        7,    6,    6,    6,    6,    6,    6,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[669] =
    {   0,
        0,    0,  216, 2195, 2195, 2195, 2195,  178,   65, 2195,
     2195,   45,   64,  158, 2195, 2195,  160,   60, 2195,   61,
       59,   71,   86,  133,   68, 2195,   75,  156,   66, 2195,
       73,  104, 2195, 2195,  150,  102,   76,  101,  120,  139,
      136,  148,  147,  160,  109,  164,  117,  156,  187,  189,
      202,  199,  211, 2195,   68, 2195, 2195, 2195,  107, 2195,
      139, 2195, 2195, 2195, 2195,  179,  113, 2195, 2195, 2195,
     2195, 2195, 2195,  122,  241, 2195, 2195, 2195,  245,  281,
      207,  236,    0,    0,    0, 2195, 2195, 2195,  111, 2195,
     2195, 2195,  107,  105,  208,   99,  202,   80, 2195,  333,

      210,  235,  259,  215,  232,  271,  272,  234,  290,  296,
      297,  298,  299,  300,  301,  320,  326,  327,  338,  316,
      331,  346,  356,  358,  362,  379,  384,  386,  387,  389,
      390,  391,  395,  402,  396,  399,  411,  407,  415,  422,
      424,  430,  451,  454,  456,  457,  458,  459, 2195, 2195,
     2195, 2195,  469, 2195,  499,  478, 2195,  462,  504,  515,
      505,    0, 2195, 2195,    0,  518,  492,  519,  524,  493,
      531,  541,  549,  550,  557,  484,  559,  566,  569,  461,
      570,  572,  574,  578,  579,  581,  582,  594,  597,  606,
      607,  609,  613,  615,  618,  619,  622,  637,  643,  598,

      641,  646,  650,  652,  662,  656,  665,  667,  668,  674,
      671,  672,  677,  689,  680,  683,  693,  695,  699,  710,
      698,  708,  711,  714,  717,  718,  721,  726,  727,  733,
      736,  738,  739,  749,  755,  757,  772,  780,  796, 2195,
      784,  800, 2195,  735,    0,  761,  805,  814,  766,  815,
      818,  820,  825,  821,  826,  830,  836,  827,  833,  838,
      842,  846,  849,  853,  773,  861,  868,  870,  873,  877,
      888,  890,  893,  895,  892,  894,  896,  897,  898,  900,
      905,  901,  917,  918,  920,  921,  924,  926,  936,  937,
      942,  939,  943,  946,  949,  955,  961,  962,  964,  965,

      967,  970,  980,  977,  985,  990,  986,  992,  993,  996,
      998, 1003, 1005, 1014, 1027, 1021, 1029, 1031, 1034, 1033,
     1039, 1064, 1040, 1053, 1042, 1044, 1046, 1057, 1068, 1079,
     1083, 1085, 1089, 1091, 1094, 1095, 1100, 1096, 1102, 1112,
     1104, 1113, 1119, 1120, 1121, 1124, 1129, 1140, 1145, 1146,
     1148, 1149, 1151, 1153, 1155, 1157, 1161, 1164, 1168, 1173,
     1180, 1181, 1183, 1190, 1192, 1199, 1201, 1203, 1209, 1207,
     1208, 1211, 1212, 1214, 1220, 1224, 1227, 1229, 1230, 1231,
     1236, 1240, 1251, 1257, 1259, 1262, 1264, 1266, 1270, 1268,
     1279, 1281, 1283, 1286, 1291, 1292, 1290, 1298, 1303, 1309,

     1307, 1313, 1316, 1314, 1318, 1326, 1331, 1320, 1338, 1342,
     1343, 1344, 1348, 1355, 1359, 1360, 1370, 1372, 1375, 1379,
     1381, 1382, 1385, 1388, 1390, 1391, 1394, 1400, 1401, 1403,
     1407, 1409, 1410, 1411, 1413, 1418, 1419, 1428, 1430, 1431,
     1434, 1437, 1435, 1438, 1439, 1443, 1446, 1447, 1450, 1455,
     1456, 1465, 1474, 1482, 1483, 1484, 1485, 1486, 1491, 1487,
     1492, 1493, 1494, 1495, 1502, 1503, 1511, 1519, 1522, 1526,
     1521, 1530, 1539, 1541, 1542, 1545, 1546, 1547, 1549, 1550,
     1551, 1552, 1554, 1569, 1570, 1571, 1572, 1573, 1575, 1577,
     1578, 1595, 1582, 1597, 1598, 1600, 1606, 1601, 1610, 1602,

     1603, 1622, 1625, 1629, 1630, 1638, 1646, 1647, 1648, 1653,
     1649, 1654, 1655, 1656, 1658, 1666, 1659, 1675, 1677, 1678,
     1682, 1684, 1686, 1693, 1694, 1703, 1704, 1709, 1710, 1712,
     1714, 1713, 1715, 1719, 1721, 1722, 1737, 1738, 1739, 1741,
     1742, 1747, 1748, 1759, 1760, 1765, 1766, 1768, 1772, 1775,
     1776, 1777, 1784, 1785, 1793, 1794, 1809, 1796, 1800, 1803,
     1804, 1812, 1819, 1821, 1822, 1824, 1825, 1828, 1830, 1831,
     1837, 1840, 1847, 1848, 1849, 1855, 1853, 1857, 1858,   92,
     1860, 1868, 1856, 1878, 1879, 1883, 1884, 1886, 1896, 1901,
     1902, 1903, 1904, 1906, 1905, 1911, 1908, 2195,   63, 1914,

     1907, 1913, 1923, 1933, 1934, 1936, 1951, 1953, 1956, 1957,
     1958, 1960, 1961, 1962, 1963, 1964, 1968, 1979, 1984, 1985,
     1987, 1988, 1989, 1990, 2000, 2006, 2007, 2008, 2009, 2012,
     2013, 2015, 2017, 2018, 2019, 2034, 2028, 2036, 2038, 2043,
     2040, 2045, 2049, 2061, 2062, 2066, 2068, 2069, 2071, 2073,
     2074, 2077, 2078, 2090, 2096, 2098, 2097, 2101, 2102, 2195,
     2161, 2168, 2174, 2177, 2178, 2181, 2183, 2187
    } ;

static yyconst short int yy_def[669] =
    {   0,
      660,    1,  660,  660,  660,  660,  660,  660,  661,  660,
      660,  660,  660,  662,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      663,  663,  660,  660,  660,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  660,  660,  660,  660,  660,  661,  660,
      661,  660,  660,  660,  660,  662,  662,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  664,   24,  665,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  663,  660,  661,  662,  660,  663,

      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      664,  666,  660,  660,  667,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,

      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  660,  660,  660,  660,
      660,  660,  660,  660,  666,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,

      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      660,  660,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,

      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,

      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  668,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  660,  668,  663,

      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  663,    0,
      660,  660,  660,  660,  660,  660,  660,  660
    } ;

static yyconst short int yy_nxt[2266] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   24,   24,   25,   26,   27,   28,   29,   30,   31,
       31,   31,   31,   32,   31,   31,   33,    4,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   31,   44,
       31,   31,   45,   31,   46,   31,   47,   48,   49,   50,
       51,   52,   53,   31,   31,   31,   54,   55,   56,   57,
       60,   62,   63,   64,   69,  598,   74,   71,   75,   75,
       75,   75,   94,   87,   76,   94,   70,   72,   73,   77,
       65,   85,   92,   93,  149,   86,   96,   78,   88,   96,

       89,   90,   61,   79,  598,   80,   80,   80,   80,   97,
       94,   94,   60,   94,   98,  660,   81,   67,   94,   82,
       82,   83,  165,   66,   96,   96,   94,   96,   96,   94,
      104,   81,   96,  164,  105,  150,  106,  163,   82,  152,
       96,  660,  100,   96,   61,   94,   82,  101,   94,   83,
       79,  102,   84,   84,   84,   84,   94,   94,  107,   96,
      103,  108,   96,   81,  129,   94,   82,   82,  109,   94,
       96,   96,  110,   94,  132,  111,   99,  133,   81,   96,
      112,  113,   91,   96,  114,   82,   68,   96,  117,  151,
      118,  115,  123,   82,  116,   67,   94,  120,   94,  119,

      121,  134,  124,  122,   58,  130,  125,   60,   94,  131,
       96,   94,   96,  126,  127,  660,   67,   94,  128,   94,
       94,  159,   96,  159,   94,   96,  160,  160,  160,  160,
      660,   96,  135,   96,   96,  136,  137,  141,   96,   61,
      660,   94,  660,   94,   94,  660,  138,  139,  145,  140,
      660,  143,  147,  142,  146,   96,  144,   96,   96,  148,
       75,   75,   75,   75,  155,  155,  155,  155,   94,   82,
       82,  153,  154,  176,  154,  156,  157,  660,  157,  179,
       94,   94,   96,  660,  660,  180,  153,  154,   82,  177,
      156,  157,  183,  154,   96,   96,   82,  157,   79,   94,

       80,   80,   80,   80,  660,   94,   94,   94,   94,   94,
       94,   81,  660,   96,  158,  158,  660,  182,  178,   96,
       96,   96,   96,   96,   96,   94,   81,  660,  660,   94,
      181,  184,  660,  158,  660,   94,   94,  185,  660,   96,
       94,  158,   94,   96,  660,  188,  191,   94,  189,   96,
       96,  186,  192,  193,   96,   94,   96,  187,  190,  660,
      660,   96,  660,  660,  660,   94,  660,   94,  660,   96,
      660,   94,  660,  198,  166,  167,  168,  169,  170,   96,
      194,   96,  171,  660,  195,   96,  199,  196,   94,  660,
      172,  173,  174,   94,  175,   94,   94,  197,   94,   94,

       94,  660,   96,  200,   94,   94,  660,   96,   94,   96,
       96,   94,   96,   96,   96,  201,   94,  202,   96,   96,
       94,  660,   96,  660,   94,   96,  660,  204,  660,  660,
       96,   94,  660,   94,   96,  203,  205,  213,   96,   94,
      211,  208,  209,  206,  207,   96,  212,   96,  221,  214,
      660,  222,  210,   96,  218,  217,  215,  225,  219,  660,
       94,  216,  223,   94,  224,   94,   94,   94,   94,  660,
       94,  226,  660,  227,   96,  660,  220,   96,  660,   96,
       96,   96,   96,  237,   96,  237,  228,  660,  238,  238,
      238,  238,  241,   94,  241,  158,  158,  242,  242,  242,

      242,   94,   94,  230,  660,  229,  233,   96,  236,  234,
      660,  660,  231,  232,  158,   96,   96,  235,  155,  155,
      155,  155,  158,  160,  160,  160,  160,   94,   94,  239,
      240,  660,  240,   94,  160,  160,  160,  160,  244,  244,
       94,   96,   96,  261,  239,  240,  243,   96,  243,  660,
       94,  240,  250,  660,   96,  660,  254,  244,   94,   94,
      660,  243,  660,  251,   96,  244,   94,  243,   94,  253,
      247,  660,   96,   96,  252,   94,  248,  249,   94,   94,
       96,   94,   96,   94,  660,  255,  256,   94,   94,   96,
       94,   94,   96,   96,  660,   96,  660,   96,  257,  660,

      660,   96,   96,   94,   96,   96,   94,   94,  258,  264,
      263,  262,  260,  266,  259,   94,   94,   96,   94,  267,
       96,   96,   94,  272,   94,  265,  660,   94,   94,   96,
       96,   94,   96,  660,  660,  268,   96,  269,   96,  270,
      271,   96,   96,  273,  660,   96,   94,  275,  276,  660,
       94,  274,   94,  660,  278,   94,  277,  281,  279,   94,
       96,   94,  280,  282,   96,   94,   96,  284,  660,   96,
      660,   94,  283,   96,   94,   96,   94,   94,  291,   96,
       94,   94,  285,   94,  286,   96,   94,  660,   96,   94,
       96,   96,   94,  295,   96,   96,  660,   96,   94,  660,

       96,  287,   94,   96,   94,  288,   96,   94,   94,  289,
      292,  290,   96,  294,  293,  660,   96,   94,   96,   94,
       94,   96,   96,   94,  660,  300,   94,   94,  297,  298,
       94,   96,  296,   96,   96,   94,   94,   96,  299,  660,
       96,   96,   94,  301,   96,   94,  660,   94,   94,   96,
       96,  306,  302,  303,  660,  304,   96,  305,   94,   96,
      309,   96,   96,  660,   94,  660,   94,  307,  244,  244,
       94,  312,   96,  660,  308,   94,  660,  310,   96,  311,
       96,  660,   94,  317,   96,  315,  313,  244,  314,   96,
      318,  238,  238,  238,  238,  244,   96,  316,  319,  238,

      238,  238,  238,  242,  242,  242,  242,  660,  660,  320,
      321,  154,  321,  154,   94,  322,  322,  322,  322,  242,
      242,  242,  242,   94,   94,  325,  154,   94,   96,   94,
       94,  157,  154,  157,   94,   94,   94,   96,   96,   94,
      660,   96,   94,   96,   96,   94,  157,   94,   96,   96,
       96,   94,  157,   96,  323,   94,   96,  660,   94,   96,
      660,   96,   94,  327,  326,   96,  660,  324,  329,   96,
       94,  335,   96,  660,  328,  660,   96,   94,  331,   94,
      330,  660,   94,  334,   96,  332,   94,  338,  333,  336,
      337,   96,  340,   96,  660,  339,   96,   94,  660,   94,

       96,   94,   94,   94,   94,   94,   94,   94,  341,   94,
       94,   96,  342,   96,   94,   96,   96,   96,   96,   96,
       96,   96,  660,   96,   96,  660,   94,   94,   96,   94,
       94,  343,  346,   94,  349,   94,  344,  345,  347,  348,
       96,   96,  660,   96,   96,   94,   94,   96,   94,   96,
      351,   94,   94,  354,  350,   94,  352,  355,   94,   96,
       96,  353,   96,  362,   94,   96,   96,  660,  660,   96,
       94,   94,   96,   94,   94,  356,   94,  660,   96,   94,
      358,  360,  357,  359,   96,   96,   94,   96,   96,   94,
       96,  361,  660,   96,   94,   94,  365,  660,  363,   94,

       96,   94,   94,   96,  364,   94,  366,   94,   96,   96,
      660,  367,   94,   96,   94,   96,   96,  660,  660,   96,
      660,   96,  368,   94,  370,  372,   96,  369,   96,  371,
       94,  375,  373,  660,  374,  377,   94,   96,   94,  379,
       94,  380,   94,   94,   96,  378,  660,  381,  376,   94,
       96,   94,   96,   94,   96,   94,   96,   96,  322,  322,
      322,  322,   94,   96,  660,   96,   94,   96,  382,   96,
      660,  660,  660,  660,  383,  660,   96,   94,  387,  660,
       96,  384,  386,  322,  322,  322,  322,  388,   94,  392,
      385,   96,   94,  389,   94,  240,  391,  240,   94,  390,

       94,  660,   96,   94,   94,   94,   96,  397,   96,   94,
      240,   94,   96,   94,   96,  393,  240,   96,   96,   96,
      394,   94,   94,   96,  395,   96,  660,   96,   94,   94,
       94,  660,  396,   94,  660,   96,   96,  400,   94,  660,
      401,  402,   96,   96,   96,  399,  406,   96,  398,   94,
      403,  660,   96,  405,   94,   94,  404,   94,   94,  407,
       94,  660,   94,   96,   94,  409,   94,  660,   96,   96,
       94,   96,   96,   94,   96,  408,   96,   94,   96,  660,
       96,  410,   94,  660,   96,  411,  660,   96,  660,   94,
       94,   96,   94,  414,  415,  660,   96,  412,  413,   94,

      418,   94,  420,   96,   96,  660,   96,  416,   94,  417,
       94,  419,   94,   96,  660,   96,   94,   94,   94,  422,
       94,   94,   96,   94,   96,  423,   96,  421,  429,   94,
       96,   96,   96,   94,   96,   96,   94,   96,   94,   94,
       94,  660,  660,   96,  427,   94,  424,   96,  660,   94,
       96,  425,   96,   96,   96,  431,  426,  433,  432,   96,
       94,  430,  428,   96,  660,  435,   94,  660,   94,  660,
      437,   94,  434,   94,   96,   94,  440,   94,  438,   94,
       96,  441,   96,  439,  660,   96,  436,   96,   94,   96,
       94,   96,   94,   96,  660,   94,  660,  660,  443,   94,

       94,   94,   96,  445,   96,  442,   96,   94,  444,   96,
      447,  455,   94,   96,   96,   96,   94,  448,   94,  660,
      446,   96,   94,   94,  660,   94,   96,   94,  660,   94,
       96,  660,   96,  450,  660,   94,   96,   96,  449,   96,
       94,   96,  451,   96,  452,  453,  454,   94,  457,   96,
      458,   94,   94,   94,   96,  456,  660,   94,  660,  462,
      660,   96,  459,  660,   94,   96,   96,   96,   94,   94,
      463,   96,  460,  660,  461,  465,  464,  466,   96,   94,
      469,   94,   96,   96,   94,  467,  471,  468,   94,  473,
       94,   94,  660,   96,   94,   96,  470,   94,   96,   94,

       94,  660,   96,   94,   96,   96,  472,  474,   96,   94,
       94,   96,   94,   96,   96,  475,   94,   96,   94,   94,
       94,  660,   94,   96,   96,  476,   96,   94,   94,  478,
       96,  660,   96,   96,   96,  479,   96,   94,  477,   94,
       94,   96,   96,   94,   94,  481,   94,   94,   94,  660,
      480,   96,   94,   96,   96,   94,   94,   96,   96,   94,
       96,   96,   96,  482,   94,   94,   96,  660,  660,   96,
       96,  485,  483,   96,   94,  660,  660,  484,   96,   96,
      487,  491,  488,   94,  660,  660,  486,  489,   96,  493,
      490,   94,   94,   94,   94,   94,   94,   96,  492,  494,

       94,   94,   94,   94,   94,   96,   96,   96,   96,   96,
       96,   94,   94,  660,   96,   96,   96,   96,   96,  660,
       94,  495,  660,  660,  660,   96,   96,  497,   94,  499,
       94,   94,  496,  498,   96,   94,  502,  501,  500,   94,
      505,  503,   96,  506,   96,   96,  504,  507,   94,   96,
       94,   94,  508,   96,   94,   94,   94,  660,   94,   94,
       94,   94,   96,   94,   96,   96,  509,  511,   96,   96,
       96,  512,   96,   96,   96,   96,  510,   96,   94,   94,
       94,   94,   94,  660,   94,  660,   94,   94,  660,  515,
      516,   94,   96,   96,   96,   96,   96,  519,   96,  513,

       96,   96,  514,  660,   94,   96,   94,   94,  518,   94,
       94,   94,   94,  522,  517,   94,  660,  523,   96,   94,
       96,   96,  524,   96,   96,   96,   96,  520,  521,   96,
      525,   94,  660,   96,   94,  660,  660,  660,   94,   94,
      660,  526,  527,  529,  532,   96,  531,   94,   96,  530,
      533,  528,   96,   96,  534,   94,   94,   94,   94,  660,
      660,   96,   94,   94,   94,   94,  660,   94,   94,   96,
       96,   96,   96,  537,  535,   94,   96,   96,   96,   96,
      536,   96,   96,  660,   94,  660,   94,   94,  542,   96,
      660,   94,  539,   94,  544,   94,  660,  538,   96,  549,

       96,   96,   94,   94,  540,   96,  547,   96,  543,   96,
      541,  548,   94,   94,  545,  546,   96,   96,   94,   94,
      660,   94,   94,   94,   94,  550,   96,   96,   94,  660,
       94,   94,   96,   96,  552,   96,   96,   96,   96,  553,
      551,  660,   96,  554,   96,   96,   94,   94,   94,  556,
       94,   94,  660,  557,  559,  561,   94,   94,  660,  562,
       96,   96,   96,  555,   96,   96,  563,  558,   94,   94,
       96,   96,  560,  660,   94,   94,  564,   94,  660,  566,
      567,   94,   96,   96,   94,   94,   94,  569,   96,   96,
      568,   96,  570,   94,   94,   96,  565,  660,   96,   96,

       96,  660,   94,   94,  571,   94,  660,   96,   96,   94,
      660,  573,   94,   94,  572,  574,   96,   96,   94,   96,
      580,   94,  576,   96,  575,  577,   96,   96,   94,  660,
       94,   94,   96,   94,   94,   96,  660,   94,  578,   94,
       94,  660,   96,  582,   96,   96,   94,   96,   96,   94,
      581,   96,  583,   96,   96,  579,   94,   94,   94,  584,
       96,  585,   94,   96,   94,   94,   94,   94,  660,   94,
       96,   96,   96,  660,  588,  587,   96,   94,   96,   96,
       96,   96,  590,   96,  660,  586,  660,   94,   94,  593,
      660,   96,   94,   94,  589,   94,  591,  596,  595,  597,

      600,   96,   96,  594,  592,   94,   96,   96,  601,   96,
       94,   94,   94,   94,   94,   94,   94,   94,  602,   96,
       94,  660,   94,   94,   96,   96,   96,   96,   96,   96,
       96,   96,   94,  660,   96,  603,   96,   96,  604,  660,
      660,  660,   94,   94,  660,   94,   96,  607,  614,  660,
      660,  612,  605,  610,  615,  613,   96,   96,  606,   96,
       94,  608,   94,  609,  611,   94,   94,   94,  660,   94,
       94,   94,   94,   94,   96,  618,   96,   94,  617,   96,
       96,   96,  616,   96,   96,   96,   96,   96,   94,  660,
      660,   96,  660,   94,   94,  619,   94,   94,   94,   94,

      660,  621,   96,  623,  625,  620,  622,   96,   96,   94,
       96,   96,   96,   96,  624,   94,   94,   94,   94,  660,
      660,   94,   94,   96,   94,  626,   94,   94,   94,   96,
       96,   96,   96,  627,  629,   96,   96,   94,   96,  632,
       96,   96,   96,   94,  630,   94,  631,   94,  628,   94,
      660,   96,   94,  660,   94,  660,  633,   96,   94,   96,
      637,   96,  660,   96,  635,  634,   96,  640,   96,  636,
       94,   94,   96,  638,  639,   94,  641,   94,   94,  642,
       94,  660,   94,   94,   96,   96,   94,   94,  647,   96,
      660,   96,   96,  644,   96,  643,   96,   96,  645,   94,

       96,   96,  660,  660,  646,   94,   94,   94,  660,  650,
       94,   94,  660,   96,  651,  660,  649,  648,  660,   96,
       96,   96,  654,  660,   96,   96,  660,  660,  660,  660,
      660,  653,  652,  660,  656,  660,  660,  655,  658,  660,
      660,  659,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      657,   59,   59,   59,   59,   59,   59,   59,   66,   66,
      660,   66,   66,   66,   66,   95,  660,  660,   95,   95,
       95,  161,  161,  162,  162,  245,  245,  245,  246,  246,
      599,  599,  599,  599,    3,  660,  660,  660,  660,  660,

      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660
    } ;

static yyconst short int yy_chk[2266] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        9,   12,   12,   13,   18,  599,   21,   20,   21,   21,
       21,   21,   31,   27,   22,   37,   18,   20,   20,   22,
       13,   25,   29,   29,   55,   25,   31,   22,   27,   37,

       27,   27,    9,   23,  580,   23,   23,   23,   23,   32,
       38,   36,   59,   32,   32,   67,   23,   98,   45,   23,
       23,   23,   96,   67,   38,   36,   47,   32,   94,   39,
       37,   23,   45,   93,   37,   55,   37,   89,   23,   74,
       47,   61,   36,   39,   59,   41,   23,   36,   40,   23,
       24,   36,   24,   24,   24,   24,   43,   42,   38,   41,
       36,   39,   40,   24,   45,   48,   24,   24,   39,   44,
       43,   42,   39,   46,   47,   39,   35,   47,   24,   48,
       40,   40,   28,   44,   40,   24,   17,   46,   41,   66,
       41,   40,   43,   24,   40,   14,   49,   42,   50,   41,

       42,   48,   43,   42,    8,   46,   44,   97,   52,   46,
       49,   51,   50,   44,   44,    3,   66,   95,   44,  101,
       53,   81,   52,   81,  104,   51,   81,   81,   81,   81,
        0,   95,   49,  101,   53,   49,   49,   50,  104,   97,
        0,  105,    0,  108,  102,    0,   49,   49,   52,   49,
        0,   51,   53,   50,   52,  105,   51,  108,  102,   53,
       75,   75,   75,   75,   79,   79,   79,   79,  103,   82,
       82,   75,   75,  101,   75,   79,   79,    0,   79,  104,
      106,  107,  103,    0,    0,  105,   75,   75,   82,  102,
       79,   79,  108,   75,  106,  107,   82,   79,   80,  109,

       80,   80,   80,   80,    0,  110,  111,  112,  113,  114,
      115,   80,    0,  109,   80,   80,    0,  107,  103,  110,
      111,  112,  113,  114,  115,  120,   80,    0,    0,  116,
      106,  109,    0,   80,    0,  117,  118,  110,    0,  120,
      121,   80,  100,  116,    0,  113,  114,  119,  113,  117,
      118,  111,  114,  115,  121,  122,  100,  112,  113,    0,
        0,  119,    0,    0,    0,  123,    0,  124,    0,  122,
        0,  125,    0,  120,  100,  100,  100,  100,  100,  123,
      116,  124,  100,    0,  117,  125,  121,  118,  126,    0,
      100,  100,  100,  127,  100,  128,  129,  119,  130,  131,

      132,    0,  126,  122,  133,  135,    0,  127,  136,  128,
      129,  134,  130,  131,  132,  123,  138,  124,  133,  135,
      137,    0,  136,    0,  139,  134,    0,  127,    0,    0,
      138,  140,    0,  141,  137,  126,  127,  133,  139,  142,
      132,  129,  130,  127,  128,  140,  132,  141,  138,  134,
        0,  138,  131,  142,  136,  135,  134,  139,  137,    0,
      143,  134,  138,  144,  138,  145,  146,  147,  148,    0,
      180,  140,    0,  141,  143,    0,  137,  144,    0,  145,
      146,  147,  148,  153,  180,  153,  142,    0,  153,  153,
      153,  153,  156,  176,  156,  158,  158,  156,  156,  156,

      156,  167,  170,  144,    0,  143,  146,  176,  148,  146,
        0,    0,  144,  145,  158,  167,  170,  147,  155,  155,
      155,  155,  158,  159,  159,  159,  159,  166,  168,  155,
      155,    0,  155,  169,  160,  160,  160,  160,  161,  161,
      171,  166,  168,  176,  155,  155,  160,  169,  160,    0,
      172,  155,  167,    0,  171,    0,  170,  161,  173,  174,
        0,  160,    0,  168,  172,  161,  175,  160,  177,  169,
      166,    0,  173,  174,  168,  178,  166,  166,  179,  181,
      175,  182,  177,  183,    0,  171,  172,  184,  185,  178,
      186,  187,  179,  181,    0,  182,    0,  183,  173,    0,

        0,  184,  185,  188,  186,  187,  189,  200,  173,  179,
      178,  177,  175,  182,  174,  190,  191,  188,  192,  183,
      189,  200,  193,  187,  194,  181,    0,  195,  196,  190,
      191,  197,  192,    0,    0,  184,  193,  185,  194,  186,
      186,  195,  196,  188,    0,  197,  198,  190,  191,    0,
      201,  189,  199,    0,  192,  202,  191,  194,  193,  203,
      198,  204,  193,  195,  201,  206,  199,  197,    0,  202,
        0,  205,  196,  203,  207,  204,  208,  209,  206,  206,
      211,  212,  198,  210,  199,  205,  213,    0,  207,  215,
      208,  209,  216,  210,  211,  212,    0,  210,  214,    0,

      213,  202,  217,  215,  218,  203,  216,  221,  219,  204,
      207,  205,  214,  209,  208,    0,  217,  222,  218,  220,
      223,  221,  219,  224,    0,  215,  225,  226,  212,  213,
      227,  222,  211,  220,  223,  228,  229,  224,  214,    0,
      225,  226,  230,  216,  227,  231,    0,  232,  233,  228,
      229,  222,  218,  219,    0,  220,  230,  221,  234,  231,
      225,  232,  233,    0,  235,    0,  236,  223,  244,  244,
      246,  228,  234,    0,  224,  249,    0,  226,  235,  227,
      236,    0,  265,  233,  246,  231,  229,  244,  230,  249,
      234,  237,  237,  237,  237,  244,  265,  232,  235,  238,

      238,  238,  238,  241,  241,  241,  241,    0,    0,  236,
      239,  238,  239,  238,  247,  239,  239,  239,  239,  242,
      242,  242,  242,  248,  250,  249,  238,  251,  247,  252,
      254,  242,  238,  242,  253,  255,  258,  248,  250,  256,
        0,  251,  259,  252,  254,  257,  242,  260,  253,  255,
      258,  261,  242,  256,  247,  262,  259,    0,  263,  257,
        0,  260,  264,  251,  250,  261,    0,  248,  253,  262,
      266,  258,  263,    0,  252,    0,  264,  267,  255,  268,
      254,    0,  269,  257,  266,  255,  270,  261,  256,  259,
      260,  267,  263,  268,    0,  262,  269,  271,    0,  272,

      270,  275,  273,  276,  274,  277,  278,  279,  264,  280,
      282,  271,  266,  272,  281,  275,  273,  276,  274,  277,
      278,  279,    0,  280,  282,    0,  283,  284,  281,  285,
      286,  269,  272,  287,  275,  288,  270,  271,  273,  274,
      283,  284,    0,  285,  286,  289,  290,  287,  292,  288,
      277,  291,  293,  280,  276,  294,  278,  281,  295,  289,
      290,  279,  292,  291,  296,  291,  293,    0,    0,  294,
      297,  298,  295,  299,  300,  284,  301,    0,  296,  302,
      286,  289,  285,  288,  297,  298,  304,  299,  300,  303,
      301,  290,    0,  302,  305,  307,  296,    0,  292,  306,

      304,  308,  309,  303,  294,  310,  297,  311,  305,  307,
        0,  298,  312,  306,  313,  308,  309,    0,    0,  310,
        0,  311,  299,  314,  301,  303,  312,  300,  313,  302,
      316,  306,  304,    0,  305,  308,  315,  314,  317,  310,
      318,  311,  320,  319,  316,  309,    0,  312,  307,  323,
      315,  325,  317,  326,  318,  327,  320,  319,  321,  321,
      321,  321,  324,  323,    0,  325,  328,  326,  314,  327,
        0,    0,    0,    0,  315,    0,  324,  329,  320,    0,
      328,  316,  319,  322,  322,  322,  322,  323,  330,  327,
      318,  329,  331,  324,  332,  322,  326,  322,  333,  325,

      334,    0,  330,  335,  336,  338,  331,  332,  332,  337,
      322,  339,  333,  341,  334,  328,  322,  335,  336,  338,
      329,  340,  342,  337,  330,  339,    0,  341,  343,  344,
      345,    0,  331,  346,    0,  340,  342,  335,  347,    0,
      336,  337,  343,  344,  345,  334,  341,  346,  333,  348,
      338,    0,  347,  340,  349,  350,  339,  351,  352,  343,
      353,    0,  354,  348,  355,  346,  356,    0,  349,  350,
      357,  351,  352,  358,  353,  345,  354,  359,  355,    0,
      356,  347,  360,    0,  357,  348,    0,  358,    0,  361,
      362,  359,  363,  351,  352,    0,  360,  349,  350,  364,

      355,  365,  357,  361,  362,    0,  363,  353,  366,  354,
      367,  356,  368,  364,    0,  365,  370,  371,  369,  360,
      372,  373,  366,  374,  367,  361,  368,  359,  369,  375,
      370,  371,  369,  376,  372,  373,  377,  374,  378,  379,
      380,    0,    0,  375,  367,  381,  364,  376,    0,  382,
      377,  365,  378,  379,  380,  372,  366,  374,  373,  381,
      383,  370,  368,  382,    0,  376,  384,    0,  385,    0,
      378,  386,  375,  387,  383,  388,  381,  390,  379,  389,
      384,  381,  385,  380,    0,  386,  377,  387,  391,  388,
      392,  390,  393,  389,    0,  394,    0,    0,  384,  397,

      395,  396,  391,  386,  392,  383,  393,  398,  385,  394,
      389,  397,  399,  397,  395,  396,  401,  390,  400,    0,
      388,  398,  402,  404,    0,  403,  399,  405,    0,  408,
      401,    0,  400,  392,    0,  406,  402,  404,  391,  403,
      407,  405,  393,  408,  394,  395,  396,  409,  399,  406,
      400,  410,  411,  412,  407,  398,    0,  413,    0,  404,
        0,  409,  401,    0,  414,  410,  411,  412,  415,  416,
      405,  413,  402,    0,  403,  407,  406,  407,  414,  417,
      408,  418,  415,  416,  419,  407,  410,  407,  420,  412,
      421,  422,    0,  417,  423,  418,  409,  424,  419,  425,

      426,    0,  420,  427,  421,  422,  411,  413,  423,  428,
      429,  424,  430,  425,  426,  416,  431,  427,  432,  433,
      434,    0,  435,  428,  429,  417,  430,  436,  437,  424,
      431,    0,  432,  433,  434,  425,  435,  438,  420,  439,
      440,  436,  437,  441,  443,  428,  442,  444,  445,    0,
      426,  438,  446,  439,  440,  447,  448,  441,  443,  449,
      442,  444,  445,  434,  450,  451,  446,    0,    0,  447,
      448,  439,  435,  449,  452,    0,    0,  437,  450,  451,
      441,  445,  442,  453,    0,    0,  440,  443,  452,  448,
      444,  454,  455,  456,  457,  458,  460,  453,  446,  449,

      459,  461,  462,  463,  464,  454,  455,  456,  457,  458,
      460,  465,  466,    0,  459,  461,  462,  463,  464,    0,
      467,  452,    0,    0,    0,  465,  466,  454,  468,  457,
      471,  469,  453,  456,  467,  470,  460,  459,  458,  472,
      464,  461,  468,  465,  471,  469,  463,  465,  473,  470,
      474,  475,  466,  472,  476,  477,  478,    0,  479,  480,
      481,  482,  473,  483,  474,  475,  467,  469,  476,  477,
      478,  470,  479,  480,  481,  482,  468,  483,  484,  485,
      486,  487,  488,    0,  489,    0,  490,  491,    0,  477,
      478,  493,  484,  485,  486,  487,  488,  483,  489,  475,

      490,  491,  476,    0,  492,  493,  494,  495,  481,  496,
      498,  500,  501,  486,  480,  497,    0,  488,  492,  499,
      494,  495,  490,  496,  498,  500,  501,  484,  485,  497,
      491,  502,    0,  499,  503,    0,    0,    0,  504,  505,
        0,  492,  493,  495,  498,  502,  497,  506,  503,  496,
      499,  494,  504,  505,  500,  507,  508,  509,  511,    0,
        0,  506,  510,  512,  513,  514,    0,  515,  517,  507,
      508,  509,  511,  505,  502,  516,  510,  512,  513,  514,
      503,  515,  517,    0,  518,    0,  519,  520,  509,  516,
        0,  521,  507,  522,  512,  523,    0,  506,  518,  517,

      519,  520,  524,  525,  507,  521,  515,  522,  510,  523,
      508,  516,  526,  527,  513,  514,  524,  525,  528,  529,
        0,  530,  532,  531,  533,  519,  526,  527,  534,    0,
      535,  536,  528,  529,  522,  530,  532,  531,  533,  525,
      521,    0,  534,  526,  535,  536,  537,  538,  539,  528,
      540,  541,    0,  529,  531,  533,  542,  543,    0,  534,
      537,  538,  539,  527,  540,  541,  535,  530,  544,  545,
      542,  543,  532,    0,  546,  547,  536,  548,    0,  538,
      539,  549,  544,  545,  550,  551,  552,  541,  546,  547,
      540,  548,  542,  553,  554,  549,  537,    0,  550,  551,

      552,    0,  555,  556,  543,  558,    0,  553,  554,  559,
        0,  547,  560,  561,  544,  549,  555,  556,  557,  558,
      557,  562,  552,  559,  550,  554,  560,  561,  563,    0,
      564,  565,  557,  566,  567,  562,    0,  568,  555,  569,
      570,    0,  563,  560,  564,  565,  571,  566,  567,  572,
      558,  568,  562,  569,  570,  556,  573,  574,  575,  563,
      571,  564,  577,  572,  576,  583,  578,  579,    0,  581,
      573,  574,  575,    0,  569,  568,  577,  582,  576,  583,
      578,  579,  571,  581,    0,  567,    0,  584,  585,  574,
        0,  582,  586,  587,  570,  588,  572,  578,  576,  579,

      581,  584,  585,  575,  573,  589,  586,  587,  582,  588,
      590,  591,  592,  593,  595,  594,  601,  597,  584,  589,
      596,    0,  602,  600,  590,  591,  592,  593,  595,  594,
      601,  597,  603,    0,  596,  586,  602,  600,  587,    0,
        0,    0,  604,  605,    0,  606,  603,  591,  597,    0,
        0,  596,  589,  594,  600,  596,  604,  605,  590,  606,
      607,  592,  608,  593,  595,  609,  610,  611,    0,  612,
      613,  614,  615,  616,  607,  605,  608,  617,  604,  609,
      610,  611,  603,  612,  613,  614,  615,  616,  618,    0,
        0,  617,    0,  619,  620,  606,  621,  622,  623,  624,

        0,  609,  618,  614,  616,  607,  613,  619,  620,  625,
      621,  622,  623,  624,  614,  626,  627,  628,  629,    0,
        0,  630,  631,  625,  632,  617,  633,  634,  635,  626,
      627,  628,  629,  618,  621,  630,  631,  637,  632,  624,
      633,  634,  635,  636,  622,  638,  623,  639,  619,  641,
        0,  637,  640,    0,  642,    0,  625,  636,  643,  638,
      631,  639,    0,  641,  629,  627,  640,  634,  642,  630,
      644,  645,  643,  632,  633,  646,  635,  647,  648,  636,
      649,    0,  650,  651,  644,  645,  652,  653,  642,  646,
        0,  647,  648,  639,  649,  638,  650,  651,  640,  654,

      652,  653,    0,    0,  641,  655,  657,  656,    0,  647,
      658,  659,    0,  654,  648,    0,  645,  644,    0,  655,
      657,  656,  652,    0,  658,  659,    0,    0,    0,    0,
        0,  651,  650,    0,  654,    0,    0,  653,  656,    0,
        0,  658,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      655,  661,  661,  661,  661,  661,  661,  661,  662,  662,
        0,  662,  662,  662,  662,  663,    0,    0,  663,  663,
      663,  664,  664,  665,  665,  666,  666,  666,  667,  667,
      668,  668,  668,  668,  660,  660,  660,  660,  660,  660,

      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define INITIAL 0
#line 10 "lexer.l"
import "ecdefs"
#define YYLTYPE Location
#define YY_NEVER_INTERACTIVE 1    // Avoid calling isatty on eC File object

#include "grammar.h"

bool echoOn = true;
public void SetEchoOn(bool b) { echoOn = b; }

extern YYLTYPE type_yylloc;
extern YYLTYPE expression_yylloc;

extern File fileInput;
int preprocessor();
int comment();

void TESTTTT()
{
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   type_yylloc.end.charPos += yyleng;
   type_yylloc.end.pos += yyleng;
   expression_yylloc.end.charPos += yyleng;
   expression_yylloc.end.pos += yyleng;
}

#define YY_USER_ACTION  \
   TESTTTT();

   /*
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   */

#define YY_INPUT(buf,result,max_size) \
   result = fileInput.Read(buf, 1, max_size) \

YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
File fileStack[MAX_INCLUDE_DEPTH];
char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
public void SetSomeSourceFileStack(char * fileName, int index) { strcpy(sourceFileStack[index], fileName); }
YYLTYPE locStack[MAX_INCLUDE_DEPTH];
AccessMode declModeStack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

#define uint _uint
default:

#line 1130 "lexer.ec"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 60 "lexer.l"



   yylloc.start = yylloc.end; 
   type_yylloc.start = type_yylloc.end; 
   expression_yylloc.start = expression_yylloc.end; 


#line 1290 "lexer.ec"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 661 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2195 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 68 "lexer.l"
{ preprocessor(); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 69 "lexer.l"
{ comment(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 70 "lexer.l"
{ commentCPP(); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 72 "lexer.l"
{ return(AUTO); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 73 "lexer.l"
{ return(BREAK); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 74 "lexer.l"
{ return(CASE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 75 "lexer.l"
{ return(CHAR); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 76 "lexer.l"
{ return(CONST); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 77 "lexer.l"
{ return(CONTINUE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 78 "lexer.l"
{ return(DEFAULT); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 79 "lexer.l"
{ return(DO); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 80 "lexer.l"
{ return(DOUBLE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 81 "lexer.l"
{ return(ELSE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 82 "lexer.l"
{ return(ENUM); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 83 "lexer.l"
{ return(EXTERN); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 84 "lexer.l"
{ return(FLOAT); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 85 "lexer.l"
{ return(FOR); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 86 "lexer.l"
{ return(GOTO); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 87 "lexer.l"
{ return(IF); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 88 "lexer.l"
{ return(INT); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 89 "lexer.l"
{ return(UINT); }
	YY_BREAK
/* "uint16"            { return(UINT16); } */
/* "uint32"            { return(UINT32); } */
/* "bool"              { return(BOOL_TOKEN); } */
case 22:
YY_RULE_SETUP
#line 93 "lexer.l"
{ return(LONG); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 94 "lexer.l"
{ return(REGISTER); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 95 "lexer.l"
{ return(RETURN); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 96 "lexer.l"
{ return(SHORT); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 97 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 98 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 99 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 100 "lexer.l"
{ return(SIZEOF); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 101 "lexer.l"
{ return(ALIGNOF); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 102 "lexer.l"
{ return(STATIC); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 103 "lexer.l"
{ return(STRUCT); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 104 "lexer.l"
{ return(SWITCH); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 105 "lexer.l"
{ return(TYPEDEF); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 106 "lexer.l"
{ return(UNION); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 107 "lexer.l"
{ return(UNSIGNED); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 108 "lexer.l"
{ return(VOID); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 109 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 110 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 111 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 112 "lexer.l"
{ return(WHILE); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 114 "lexer.l"
{ return(PROPERTY); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 115 "lexer.l"
{ return(SETPROP); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 116 "lexer.l"
{ return(GETPROP); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 117 "lexer.l"
{ return(ISPROPSET); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 118 "lexer.l"
{ return(CLASS); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 119 "lexer.l"
{ return(THISCLASS); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 120 "lexer.l"
{ return(VIRTUAL); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 121 "lexer.l"
{ return(DELETE); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 122 "lexer.l"
{ return(NEWOP); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 123 "lexer.l"
{ return(NEW0OP); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 124 "lexer.l"
{ return(RENEW); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 125 "lexer.l"
{ return(RENEW0); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 126 "lexer.l"
{ return(IMPORT); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 127 "lexer.l"
{ return(DEFINE); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 128 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 129 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 130 "lexer.l"
{ return(VALIST); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 131 "lexer.l"
{ return(VAARG); }
	YY_BREAK
/* "__attribute__".?"(("({D}|{L})*"))" { return(EXT_ATTRIB); } */
/* DID I MEAN? "__attribute__"" "*"(("" "*({D}|{L})*" "*("("({D}|{L})*(" "*","" "*({D}|{L})*)*" "*")")?" "*"))" { return(EXT_ATTRIB); } */
/*
 "__attribute_deprecated__"(" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute__"           (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute"             (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 */
/*
 [__attribute__] [spaces]
   [((] [spaces] 
      [digits | letters] [spaces]
         ( [(]  [digits or letters or "]  ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces]  [)] )?
      [spaces]
      ( [,] [spaces]  [digits or letters]  [spaces]
         ( [(]  [digits or letters or "]
            ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces] [)]
         )? [spaces] 
      )*
   [))]
 */
/* "__attribute__".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); } */
/* "__attribute".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); }*/
case 60:
YY_RULE_SETUP
#line 158 "lexer.l"
{ return ATTRIB_DEP; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 159 "lexer.l"
{ return ATTRIB; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 160 "lexer.l"
{ return __ATTRIB; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 162 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 163 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 164 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 165 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 166 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 167 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 168 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 169 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 170 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 171 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 172 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 173 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 174 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 175 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 176 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 177 "lexer.l"
{ return(PUBLIC); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 178 "lexer.l"
{ return(PRIVATE); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 179 "lexer.l"
{ return(TYPED_OBJECT); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 180 "lexer.l"
{ return(ANY_OBJECT); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 181 "lexer.l"
{ return(_INCREF); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 182 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 183 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 184 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 185 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 186 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 187 "lexer.l"
{ return(TYPEOF); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 188 "lexer.l"
{ return(WATCH); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 189 "lexer.l"
{ return(STOPWATCHING); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 190 "lexer.l"
{ return(FIREWATCHERS); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 191 "lexer.l"
{ return(WATCHABLE); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 192 "lexer.l"
{ return(CLASS_DESIGNER); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 193 "lexer.l"
{ return(CLASS_NO_EXPANSION); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 194 "lexer.l"
{ return(CLASS_FIXED); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 195 "lexer.l"
{ return(CLASS_DEFAULT_PROPERTY); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 196 "lexer.l"
{ return(PROPERTY_CATEGORY); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 197 "lexer.l"
{ return(CLASS_DATA); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 198 "lexer.l"
{ return(CLASS_PROPERTY); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 199 "lexer.l"
{ return(SUBCLASS); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 200 "lexer.l"
{ return(NAMESPACE); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 201 "lexer.l"
{ return(DBTABLE); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 202 "lexer.l"
{ return(DBFIELD); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 203 "lexer.l"
{ return(DBINDEX); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 204 "lexer.l"
{ return(DATABASE_OPEN); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 206 "lexer.l"
{ return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); }  // ("::"|(({IDENT}"::")*)){IDENT}  { return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 208 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 209 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 210 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 211 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 213 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 214 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 215 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 217 "lexer.l"
{ return(STRING_LITERAL); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 219 "lexer.l"
{ return(ELLIPSIS); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 220 "lexer.l"
{ return(RIGHT_ASSIGN); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 221 "lexer.l"
{ return(LEFT_ASSIGN); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 222 "lexer.l"
{ return(ADD_ASSIGN); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 223 "lexer.l"
{ return(SUB_ASSIGN); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 224 "lexer.l"
{ return(MUL_ASSIGN); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 225 "lexer.l"
{ return(DIV_ASSIGN); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 226 "lexer.l"
{ return(MOD_ASSIGN); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 227 "lexer.l"
{ return(AND_ASSIGN); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 228 "lexer.l"
{ return(XOR_ASSIGN); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 229 "lexer.l"
{ return(OR_ASSIGN); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 230 "lexer.l"
{ return(RIGHT_OP); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 231 "lexer.l"
{ return(LEFT_OP); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 232 "lexer.l"
{ return(INC_OP); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 233 "lexer.l"
{ return(DEC_OP); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 234 "lexer.l"
{ return(PTR_OP); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 235 "lexer.l"
{ return(AND_OP); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 236 "lexer.l"
{ return(OR_OP); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 237 "lexer.l"
{ return(LE_OP); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 238 "lexer.l"
{ return(GE_OP); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 239 "lexer.l"
{ return(EQ_OP); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 240 "lexer.l"
{ return(NE_OP); }
	YY_BREAK
/* "::"        { return(CLASS_OP); } */
case 137:
YY_RULE_SETUP
#line 242 "lexer.l"
{ return(';'); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 243 "lexer.l"
{ return('{'); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 244 "lexer.l"
{ return('}'); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 245 "lexer.l"
{ return(','); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 246 "lexer.l"
{ return(':'); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 247 "lexer.l"
{ return('='); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 248 "lexer.l"
{ return('('); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 249 "lexer.l"
{ return(')'); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 250 "lexer.l"
{ return('['); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 251 "lexer.l"
{ return(']'); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 252 "lexer.l"
{ return('.'); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 253 "lexer.l"
{ return('&'); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 254 "lexer.l"
{ return('!'); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 255 "lexer.l"
{ return('~'); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 256 "lexer.l"
{ return('-'); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 257 "lexer.l"
{ return('+'); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 258 "lexer.l"
{ return('*'); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 259 "lexer.l"
{ return('/'); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 260 "lexer.l"
{ return('%'); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 261 "lexer.l"
{ return('<'); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 262 "lexer.l"
{ return('>'); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 263 "lexer.l"
{ return('^'); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 264 "lexer.l"
{ return('|'); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 265 "lexer.l"
{ return('?'); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 266 "lexer.l"
{ return('$'); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 268 "lexer.l"
{
      while(include_stack_ptr && !fileStack[include_stack_ptr-1])
      {
         --include_stack_ptr;
         defaultDeclMode = declMode = declModeStack[include_stack_ptr];
      }

      if ( --include_stack_ptr < 0 )
      {
         include_stack_ptr = 0;
         yyterminate();
      }
      else
      {
         delete fileInput;
         yy_delete_buffer( YY_CURRENT_BUFFER );
         fileInput = fileStack[include_stack_ptr];
         yylloc = locStack[include_stack_ptr];
         type_yylloc = locStack[include_stack_ptr];
         expression_yylloc = locStack[include_stack_ptr];
         yy_switch_to_buffer(include_stack[include_stack_ptr] );
         defaultDeclMode = declMode = declModeStack[include_stack_ptr];
      }
   }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 294 "lexer.l"
{ yylloc.start = yylloc.end; type_yylloc.start = type_yylloc.end; expression_yylloc.start = expression_yylloc.end;}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 295 "lexer.l"
{ 
   yylloc.end.charPos = 1; yylloc.end.line += yyleng; yylloc.start = yylloc.end; 
   type_yylloc.end.charPos = 1; type_yylloc.end.line += yyleng; type_yylloc.start = type_yylloc.end; 
   expression_yylloc.end.charPos = 1; expression_yylloc.end.line += yyleng; expression_yylloc.start = expression_yylloc.end; 
   }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 300 "lexer.l"
{ 
   yylloc.start.charPos++ /*= 3 - (yylloc.start.col % 3)*/; yylloc.end.charPos = yylloc.start.charPos; yylloc.start.pos = yylloc.end.pos; 
   expression_yylloc.start.charPos++ /*= 3 - (expression_yylloc.start.col % 3)*/; expression_yylloc.end.charPos = expression_yylloc.start.charPos; expression_yylloc.start.pos = expression_yylloc.end.pos; 
   type_yylloc.start.charPos++ /*= 3 - (type_yylloc.start.col % 3)*/; type_yylloc.end.charPos = type_yylloc.start.charPos; type_yylloc.start.pos = type_yylloc.end.pos; 
   }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 306 "lexer.l"
{ yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 308 "lexer.l"
ECHO;
	YY_BREAK
#line 2264 "lexer.ec"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 661 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 661 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 660);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 308 "lexer.l"


private:

yywrap()
{
   return(1);
}

int comment()
{
   int c, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      if(c == '/' && last == '*')
         break;
      last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int commentCPP()
{
   int c, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         break;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int preprocessor()
{
   int c, last = 0;
   int count = 0;
   char line[1024];

   line[0] = '\0';

   for(;;)
   {
      c = input();
      if(c == EOF) break;

      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         if(last != '\\')
         {
            char * pointer = line + 1;
            int lineNumber;
            line[count] = 0;
            lineNumber = GetValue(&pointer);
            if(lineNumber)
            {
               char fileName[MAX_LOCATION];
               
               int inOut;

               fileName[0] = 0;
               GetString(&pointer, fileName, MAX_LOCATION);
               inOut = GetValue(&pointer);
                              
               if(inOut == 1)
               {
                  char extension[MAX_EXTENSION];

                  defaultDeclMode = declModeStack[include_stack_ptr] = declMode;

                  GetExtension(fileName, extension);
                  if(!strcmp(extension, "c") || !strcmp(extension, "h"))
                     declMode = defaultDeclMode = defaultAccess;

                  fileStack[include_stack_ptr] = null;
                  include_stack_ptr++;
               }
               else if(inOut == 2)
               {
                  include_stack_ptr--;
                  defaultDeclMode = declMode = declModeStack[include_stack_ptr];
               }

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               //yylloc.end.pos -= count;

               if(include_stack_ptr > 0 || (lineNumber && fileName[0]))
                  yylloc.end.included = GetIncludeFileID(fileName);
               else
                  yylloc.end.included = 0;
            }
            /*
            int lineNumber = strtol(line+1, &endPtr, 0);
            if(lineNumber)
            {
               GetString(&
               endPtr

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               yylloc.end.pos -= count;
            }
            */
            break;
         }
         count = 0;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
         line[count++] = c;
      }
      else
      {
         yylloc.end.pos++;
         if(c != '\r')
         {
            yylloc.end.charPos++;
            line[count++] = c;
         }
      }
      last = c;
   }   
   yylloc.start = yylloc.end;
   line[count] = 0;

   TrimLSpaces(line, line);
   for(c = 0; line[c] && line[c] != ' '; c++);
   if(!strncmp(line, "include", c))
   {
      char includeFile[MAX_LOCATION] = "";

      memmove(line, line+c, strlen(line+c)+1);
      TrimLSpaces(line, line);
      if(line[0] == '\"')
      {
         for(c = 1; line[c]; c++)
         {
            if(line[c] == '\"')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
         }
      }
      else if(line[0] == '<')
      {
         for(c = 1; line[c]; c++)
            if(line[c] == '>')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
      }

      if ( include_stack_ptr >= MAX_INCLUDE_DEPTH )
      {
         fprintf( stderr, $"Includes nested too deeply" );
         exit( 1 );
      }

      if(inCompiler || !FindIncludeFileID(includeFile))
      {
         File file = OpenIncludeFile(includeFile);
         if(file)
         {
            char extension[MAX_EXTENSION];

            fileStack[include_stack_ptr] = fileInput;
            locStack[include_stack_ptr] = yylloc;
            defaultDeclMode = declModeStack[include_stack_ptr] = declMode;
            include_stack[include_stack_ptr++] = YY_CURRENT_BUFFER;

            yylloc.start.charPos = yylloc.end.charPos = 1;
            yylloc.start.line = yylloc.end.line = 1;
            yylloc.start.pos = yylloc.end.pos = 0;
            yylloc.start.included = yylloc.end.included = GetIncludeFileID(includeFile);

            GetExtension(includeFile, extension);
            if(!strcmp(extension, "c") || !strcmp(extension, "h"))
               declMode = defaultDeclMode = defaultAccess;

            fileInput = file;
            yy_switch_to_buffer( yy_create_buffer( fileInput, YY_BUF_SIZE ) );
            BEGIN(INITIAL);
         }
         else
            printf("");
      }
   }
   return 0;
}

public void resetScanner()
{
   YY_FLUSH_BUFFER;
   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;
}

void resetScannerPos(CodePosition pos)
{
   YY_FLUSH_BUFFER;
   yylloc.start = yylloc.end = pos;
   type_yylloc.start = type_yylloc.end = pos;
   expression_yylloc.start = expression_yylloc.end = pos;
}

class LexerBackup
{
   YYLTYPE yylloc;
   YYLTYPE type_yylloc;
   YYLTYPE expression_yylloc;

   AccessMode declMode;
   AccessMode defaultDeclMode;

   File fileInput;
   YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
   File fileStack[MAX_INCLUDE_DEPTH];
   char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
   YYLTYPE locStack[MAX_INCLUDE_DEPTH];
   AccessMode declModeStack[MAX_INCLUDE_DEPTH];
   int include_stack_ptr;
   YY_BUFFER_STATE buffer;

   int yy_n_chars;
   char * yytext_ptr;
   char * yy_c_buf_p;
   FILE * yyin;
   char yy_hold_char;
   int yychar;
   int yy_init;
   int yy_start;

};

LexerBackup pushLexer()
{
   LexerBackup backup { };

   backup.yylloc = yylloc;
   backup.type_yylloc = type_yylloc;
   backup.expression_yylloc = expression_yylloc;
   backup.fileInput = fileInput;
   memcpy(backup.include_stack, include_stack, sizeof(include_stack));
   memcpy(backup.fileStack, fileStack, sizeof(fileStack));
   memcpy(backup.sourceFileStack, sourceFileStack, sizeof(sourceFileStack));
   memcpy(backup.locStack, locStack, sizeof(locStack));
   memcpy(backup.declModeStack, declModeStack, sizeof(declModeStack));
   backup.include_stack_ptr = include_stack_ptr;
   backup.defaultDeclMode = defaultDeclMode;
   backup.declMode = declMode;
   backup.buffer = yy_current_buffer;

   backup.yy_n_chars = yy_n_chars;
   backup.yytext_ptr = yytext_ptr;
   backup.yy_c_buf_p = yy_c_buf_p;
   backup.yyin = yyin;
   backup.yy_hold_char = yy_hold_char;
   backup.yychar = yychar;
   backup.yy_init = yy_init;
   backup.yy_start = yy_start;

   yy_init = 1;

   yy_current_buffer = 0;

   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;

   return backup;
}

void popLexer(LexerBackup backup)
{
   yylloc = backup.yylloc;
   type_yylloc = backup.type_yylloc;
   expression_yylloc = backup.expression_yylloc;
   fileInput = backup.fileInput;
   memcpy(include_stack, backup.include_stack, sizeof(include_stack));
   memcpy(fileStack, backup.fileStack, sizeof(fileStack));
   memcpy(sourceFileStack, backup.sourceFileStack, sizeof(sourceFileStack));
   memcpy(locStack, backup.locStack, sizeof(locStack));
   memcpy(declModeStack, backup.declModeStack, sizeof(declModeStack));
   include_stack_ptr = backup.include_stack_ptr;
   defaultDeclMode = backup.defaultDeclMode;
   declMode = backup.declMode;

   // yy_switch_to_buffer(backup.buffer);
   yy_current_buffer = backup.buffer;
   yy_n_chars = backup.yy_n_chars;
   yytext_ptr = backup.yytext_ptr;
   yy_c_buf_p = backup.yy_c_buf_p;
   yyin = backup.yyin;
   yy_hold_char = backup.yy_hold_char;
   yychar = backup.yychar;
   yy_init = backup.yy_init;
   yy_start = backup.yy_start;

   delete backup;
}
