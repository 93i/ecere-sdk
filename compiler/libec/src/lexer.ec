#line 2 "lexer.ec"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 171
#define YY_END_OF_BUFFER 172
static yyconst short int yy_accept[691] =
    {   0,
      111,  111,  172,  170,  169,  168,  167,  154,  170,    1,
      166,  160,  153,  170,  148,  149,  158,  157,  145,  156,
      152,  159,  114,  114,  146,  142,  161,  147,  162,  165,
      111,  111,  111,  150,  151,  163,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  143,  164,  144,  155,  141,    0,
      119,    0,  127,  144,  136,  128,    0,    0,  125,  133,
      123,  134,  124,  135,    0,  117,    2,    3,  126,  118,
      113,    0,  114,    0,  114,  111,  151,  143,  150,  132,
      138,  140,  139,  131,    0,  111,    0,  111,    0,    0,

      129,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
       11,  111,  111,  111,  111,  111,  111,  111,  111,   19,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  130,  137,  115,  120,    0,  117,  117,
        0,  118,  113,    0,  116,  112,  111,  122,  121,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,   91,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,

      111,  111,  111,  111,  111,  111,  111,  111,   17,   44,
      111,  111,  111,  111,   20,  111,  111,  111,   50,  111,
      111,  111,  111,  111,  111,  111,   43,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,    0,  117,    0,  117,
        0,  118,  116,  112,  111,  111,   60,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,    4,  111,
        6,    7,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,   13,   14,  111,  111,  111,

       18,  111,  111,  111,  111,  111,   22,  111,   51,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,   21,  111,  111,
      111,   37,  111,  111,  111,    0,  117,   61,  111,  111,
      111,   92,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,    5,
       46,    8,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,   16,  111,  111,  111,   57,
       45,  111,  111,  111,  111,  111,   52,  111,  111,   25,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,

       35,  111,  111,  111,   94,   41,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,   55,   49,  111,  111,   12,   15,
      111,   54,   87,   71,  111,  111,  111,   83,  111,   53,
      111,   24,   26,   29,   31,  111,  111,   32,  111,   33,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
       90,  111,  111,   75,   81,  111,  111,  111,   56,  111,
      111,  111,  111,  111,  111,   69,  111,  111,  111,  111,
      111,  111,  111,  111,  108,  109,  107,   10,  111,  111,

      111,  111,   84,  111,  111,  111,   79,  111,  111,  111,
      111,   34,  111,   48,  111,  111,   62,  111,  111,  111,
      111,  111,  111,   70,  111,   27,  111,   93,  111,  111,
       78,  111,  111,  111,  111,  111,  111,    9,  111,  111,
      111,  111,  111,   42,   23,   64,  111,  105,  111,  111,
       36,   38,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,   76,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,   73,   74,  111,  106,  111,  111,   47,
      111,   97,   63,  111,  111,  111,  111,  111,   68,   80,
       28,  111,   40,  111,   86,  103,  111,  111,  111,  111,

      111,  111,  111,  111,  111,  111,   30,   67,  111,    0,
      111,  111,   77,  111,   89,  111,  111,  100,  111,  111,
      111,  111,  111,  111,  111,  111,  111,   72,    0,  111,
       82,   39,  111,  111,  111,  111,  111,   96,  111,   95,
       85,   66,  111,  111,   88,  111,  111,  111,  111,  110,
      111,  111,  111,  111,  111,   98,  111,  104,  111,  111,
      111,  111,  111,  111,  111,  111,   59,  111,  111,  111,
      111,  111,   58,  111,  111,  102,  111,  111,   99,  111,
      111,  111,  111,  111,  111,  111,  101,  111,   65,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   22,   21,   23,   21,   21,   21,   24,   25,   26,
       27,   28,   29,    1,   30,   31,   32,   30,   33,   34,
       35,   35,   36,   35,   35,   37,   35,   35,   35,   35,
       35,   35,   35,   35,   38,   35,   35,   39,   35,   35,
       40,   41,   42,   43,   44,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   35,   61,   62,   63,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[74] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        3,    1,    4,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    5,    2,    1,    1,    1,    1,    1,    6,
        6,    6,    6,    6,    7,    7,    7,    7,    7,    1,
        1,    1,    1,    7,    6,    6,    6,    6,    6,    6,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    1,
        1,    1,    1
    } ;

static yyconst short int yy_base[699] =
    {   0,
        0,    0,  192, 2369, 2369, 2369, 2369,  161,   68, 2369,
     2369,   48,   67,  126, 2369, 2369,  137,   63, 2369,   64,
       62,   74,   92,   77,   78, 2369,   94,  128,   59, 2369,
       95,   98,  126, 2369, 2369,  116,  129,  123,  114,  118,
      144,  148,  142,  159,  152,  125,  187,  170,  189,  195,
      197,  202,  213,  217, 2369,   52, 2369, 2369, 2369,  145,
     2369,  137, 2369, 2369, 2369, 2369,   85,  168, 2369, 2369,
     2369, 2369, 2369, 2369,  116,  253, 2369, 2369, 2369,  290,
      329,  262,  214,    0,    0,    0, 2369, 2369, 2369,  100,
     2369, 2369, 2369,   90,   87,  206,   83,  229,  216,   63,

     2369,  230,  232,  240,  384,  270,  271,  290,  291,  298,
      294,  307,  306,  309,  318,  311,  310,  348,  350,  351,
      355,  360,  371,  378,  366,  367,  379,  389,  394,  219,
      399,  404,  386,  410,  414,  415,  426,  432,  445,  434,
      451,  453,  464,  452,  460,  462,  456,  463,  481,  490,
      482,  507,  508, 2369, 2369, 2369, 2369,  524,  499,  551,
      542,  541,  555,  506,  592,  579,    0, 2369, 2369,    0,
      530,  559,  532,  557,  596,  558,  613,  600,  615,  617,
      620,  626,  566,  641,  630,  643,  646,  647,  556,  650,
      652,  653,  654,  656,  663,  671,  674,  680,  686,  695,

      693,  696,  697,  698,  704,  713,  720,  722,  726,  729,
      731,  741,  742,  744,  747,  749,  748,  753,  754,  765,
      769,  770,  771,  772,  777,  781,  782,  794,  798,  799,
      801,  803,  807,  804,  810,  809,  822,  825,  827,  828,
      829,  834,  837,  849,  852,  853,  763,  858,  881,  873,
      895,  899,  891,  905,    0,  859,  865,  876,  914,  924,
      927,  930,  936,  940,  881,  946,  947,  952,  953,  955,
      957,  958,  962,  968,  974,  973,  978,  979,  981,  986,
      990,  997, 1003, 1008, 1009, 1010, 1018, 1020, 1026, 1019,
     1021, 1025, 1027, 1029, 1036, 1030, 1037, 1042, 1045, 1049,

     1053, 1054, 1060, 1065, 1071, 1066, 1072, 1075, 1077, 1081,
     1090, 1092, 1094, 1096, 1097, 1098, 1100, 1103, 1107, 1118,
     1109, 1120, 1122, 1124, 1125, 1126, 1131, 1133, 1137, 1141,
     1143, 1150, 1154, 1158, 1160, 1167, 1177, 1167, 1184, 1191,
     1192, 1194, 1195, 1196, 1202, 1211, 1212, 1213, 1218, 1222,
     1215, 1224, 1237, 1231, 1240, 1241, 1243, 1248, 1250, 1253,
     1259, 1265, 1266, 1271, 1276, 1278, 1281, 1282, 1284, 1287,
     1288, 1294, 1297, 1299, 1304, 1305, 1307, 1310, 1315, 1316,
     1320, 1331, 1332, 1335, 1337, 1341, 1342, 1348, 1353, 1343,
     1358, 1359, 1361, 1363, 1365, 1364, 1368, 1366, 1369, 1388,

     1370, 1376, 1393, 1392, 1397, 1404, 1405, 1412, 1416, 1420,
     1423, 1425, 1429, 1431, 1433, 1438, 1441, 1436, 1442, 1449,
     1457, 1451, 1453, 1458, 1459, 1462, 1468, 1469, 1477, 1480,
     1487, 1481, 1490, 1497, 1499, 1502, 1514, 1520, 1521, 1522,
     1523, 1526, 1527, 1530, 1533, 1539, 1542, 1543, 1545, 1546,
     1548, 1551, 1552, 1558, 1561, 1567, 1573, 1574, 1577, 1579,
     1580, 1582, 1583, 1586, 1589, 1590, 1592, 1598, 1602, 1605,
     1607, 1608, 1610, 1618, 1620, 1627, 1633, 1642, 1638, 1643,
     1645, 1646, 1648, 1650, 1651, 1649, 1658, 1661, 1666, 1668,
     1670, 1673, 1676, 1689, 1695, 1696, 1698, 1699, 1702, 1706,

     1707, 1708, 1717, 1718, 1723, 1725, 1726, 1727, 1729, 1733,
     1734, 1735, 1742, 1736, 1738, 1746, 1751, 1754, 1755, 1758,
     1759, 1761, 1779, 1782, 1783, 1784, 1787, 1788, 1789, 1790,
     1794, 1799, 1809, 1811, 1810, 1814, 1815, 1817, 1826, 1827,
     1830, 1832, 1838, 1842, 1843, 1845, 1847, 1854, 1855, 1858,
     1865, 1870, 1871, 1873, 1878, 1881, 1882, 1886, 1890, 1891,
     1894, 1899, 1901, 1897, 1903, 1906, 1914, 1918, 1924, 1926,
     1927, 1929, 1942, 1930, 1946, 1948, 1950, 1955, 1954, 1957,
     1961, 1958, 1963, 1970, 1974, 1976, 1980, 1981, 1985, 1989,
     1993, 1996, 1998, 2001, 2002, 2005, 2006, 2008, 2014, 2011,

     2024, 2026, 2027, 2034, 2033, 2036, 2037, 2043, 2039,   82,
     2045, 2056, 2044, 2061, 2066, 2071, 2072, 2082, 2083, 2084,
     2087, 2088, 2089, 2091, 2092, 2093, 2094, 2369,   76, 2100,
     2099, 2104, 2109, 2110, 2111, 2115, 2116, 2122, 2137, 2138,
     2139, 2141, 2143, 2144, 2147, 2159, 2156, 2160, 2163, 2166,
     2169, 2167, 2171, 2172, 2175, 2178, 2184, 2187, 2188, 2191,
     2197, 2195, 2199, 2200, 2204, 2206, 2212, 2216, 2219, 2227,
     2232, 2234, 2235, 2239, 2240, 2244, 2251, 2252, 2256, 2259,
     2260, 2261, 2263, 2264, 2267, 2279, 2280, 2283, 2282, 2369,
     2335, 2342, 2348, 2351, 2352, 2355, 2357, 2361

    } ;

static yyconst short int yy_def[699] =
    {   0,
      690,    1,  690,  690,  690,  690,  690,  690,  691,  690,
      690,  690,  690,  692,  690,  690,  690,  690,  690,  690,
      690,  690,  690,   23,  690,  690,  690,  690,  690,  690,
      693,  693,  693,  690,  690,  690,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  690,  690,  690,  690,  690,  691,
      690,  691,  690,  690,  690,  690,  692,  692,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  694,   24,  695,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  693,  690,  693,  691,  692,

      690,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  694,  696,  690,  690,  697,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,

      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  690,  690,  690,  690,
      690,  690,  690,  690,  696,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,

      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  690,  690,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,

      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,

      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,

      693,  693,  693,  693,  693,  693,  693,  693,  693,  698,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  690,  698,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,  693,
      693,  693,  693,  693,  693,  693,  693,  693,  693,    0,
      690,  690,  690,  690,  690,  690,  690,  690

    } ;

static yyconst short int yy_nxt[2443] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   24,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   31,   31,   31,   31,   31,   33,   31,   31,   34,
        4,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   31,   45,   31,   31,   46,   31,   47,   31,   48,
       49,   50,   51,   52,   53,   54,   31,   31,   31,   55,
       56,   57,   58,   61,   63,   64,   65,   70,  154,   75,
       72,   76,   76,   76,   76,   93,   94,   77,  628,   71,
       73,   74,   78,   66,  628,  156,   85,   85,   85,   85,

       79,   86,   88,   68,   95,   87,  170,   95,   62,   80,
       97,   81,   81,   81,   81,  690,  169,   89,   97,   90,
       91,   97,  155,   95,   82,   68,  168,   95,   83,   83,
       84,   99,   95,  157,   95,   95,  100,   97,   95,  690,
       82,   97,  101,  690,   83,   83,   97,   83,   97,   97,
       61,   95,   97,   95,   92,   83,   98,   95,   84,  102,
      103,   95,  113,   69,  104,   97,   68,   97,   95,  114,
      690,   97,  105,  115,  112,   97,  116,  106,   67,   95,
      109,  107,   97,  134,  110,   62,  111,   59,  117,  118,
      108,  690,  119,   97,  125,  690,   95,  126,   95,  120,

      127,  130,  121,  122,   95,  123,   95,  128,  131,  132,
       97,   95,   97,  133,  124,   95,  690,  129,   97,  690,
       97,   61,   95,  690,  690,   97,   95,  690,   95,   97,
      137,  135,  690,  138,  690,  136,   97,  139,   95,   95,
       97,   95,   97,  140,  690,  690,  141,  142,  146,   95,
       83,   83,   97,   97,  148,   97,   62,  143,  144,  149,
      145,  152,  690,   97,  147,  150,   83,   83,  153,   83,
      690,  151,   76,   76,   76,   76,  164,   83,  164,   95,
       95,  165,  165,  165,  165,  158,  159,  171,  172,  159,
      173,  690,  690,   97,   97,  690,  174,  690,  690,   95,

       95,  158,  159,   95,  690,  159,  159,   95,  159,  160,
      160,  160,  160,   97,   97,   95,   95,   97,   95,   95,
       95,   97,  161,  162,  690,  690,  162,   95,  186,   97,
       97,  690,   97,   97,   97,  690,  185,  690,  161,  162,
      690,   97,  162,  162,  690,  162,   80,  690,   81,   81,
       81,   81,  187,  193,  189,  191,  190,   95,  188,   95,
       95,   82,  194,  690,   95,  163,  163,  192,  195,   95,
      690,   97,  196,   97,   97,   95,   95,   82,   97,  690,
       95,  163,  163,   97,  163,  690,  690,   95,   95,   97,
       97,  690,  163,   95,   97,   95,  690,  197,   95,  200,

      198,   97,   97,   95,  690,  201,  202,   97,   95,   97,
      199,  690,   97,   95,  690,  690,  690,   97,  203,   95,
      690,  204,   97,   95,   95,  208,  207,   97,  175,  176,
      177,  178,  179,   97,  205,   95,  180,   97,   97,  209,
      206,   95,  690,   95,  181,  182,  183,  216,  184,   97,
      213,  210,  690,  690,   95,   97,  211,   97,  212,  214,
       95,   95,   95,  690,  690,   95,  215,  217,   97,   95,
      218,   95,   95,   95,   97,   97,   97,  222,  220,   97,
      219,  690,  690,   97,  221,   97,   97,   97,  690,  690,
       95,   95,  690,  690,  690,  223,  227,  235,  690,   95,

      690,  690,  224,  229,   97,   97,  225,  226,  231,  228,
      690,  232,  236,   97,  237,  238,   95,   95,  690,  690,
      239,  230,  233,  690,  234,  165,  165,  165,  165,  690,
       97,   97,  159,  240,  243,  159,  690,  244,  247,   95,
      247,   95,  241,  248,  248,  248,  248,  690,  159,  690,
      242,  159,  159,   97,  159,   97,  251,  690,  251,  690,
      246,  252,  252,  252,  252,   95,   95,   95,   95,  245,
      160,  160,  160,  160,  162,   95,  690,  162,  690,   97,
       97,   97,   97,  249,  250,  257,  690,  250,  259,   97,
      162,  163,  163,  162,  162,  690,  162,  690,  690,  249,

      250,  260,  690,  250,  250,   95,  250,  163,  163,   95,
      163,  165,  165,  165,  165,  254,  254,  258,  163,   97,
      690,  264,   95,   97,   95,  253,   95,  690,  253,   95,
      690,  254,  254,  273,  254,   95,   97,  690,   97,   95,
       97,  253,  254,   97,  253,  253,  690,  253,  267,   97,
       95,  261,   95,   97,  690,   95,   95,  262,  263,   95,
      265,   95,   95,   95,   97,   95,   97,  690,  270,   97,
       97,  266,   95,   97,  269,   97,   97,   97,  271,   97,
       95,  268,  690,   95,  690,  690,   97,  690,  272,   95,
      278,  690,  275,  277,   97,   95,  280,   97,  276,  274,

      690,  281,   95,   97,   95,   95,   95,   95,  279,   97,
      690,  690,  690,   95,  282,  286,   97,  283,   97,   97,
       97,   97,   95,  690,  284,  285,  287,   97,  690,   95,
      289,   95,  690,  690,  690,   95,   97,  288,   95,  290,
       95,  292,  295,   97,  293,   97,  296,  291,  294,   97,
       95,   95,   97,   95,   97,  690,   95,   95,   95,  690,
      297,  298,   95,   95,   97,   97,  300,   97,  299,  305,
       97,   97,   97,  309,   95,  690,   97,   97,   95,   95,
       95,   95,  248,  248,  248,  248,   95,  690,   97,  301,
       95,   95,   97,   97,   97,   97,  304,  306,  307,  302,

       97,  308,  303,   95,   97,   97,  690,   95,   95,  690,
       95,  690,   95,   95,  690,  690,   95,   97,   95,   95,
      314,   97,   97,  313,   97,  312,   97,   97,  311,  310,
       97,   95,   97,   97,   95,  690,   95,   95,   95,  315,
      690,  690,  690,   95,  316,   97,   95,  319,   97,  321,
       97,   97,   97,  690,  317,  318,  324,   97,   95,  690,
       97,   95,   95,  320,  690,  690,  322,  323,   95,  690,
      690,  325,   97,  327,   95,   97,   97,  248,  248,  248,
      248,  330,   97,  326,  332,   95,  329,  690,   97,  328,
       95,  159,  690,  333,  159,  336,  331,  336,  334,   97,

      337,  337,  337,  337,   97,  690,  250,  159,  335,  250,
      159,  159,  690,  159,  252,  252,  252,  252,  252,  252,
      252,  252,  250,   95,  253,  250,  250,  253,  250,  345,
      690,  338,  162,   95,  690,  162,   95,   97,  690,   95,
      253,  254,  254,  253,  253,   95,  253,   97,  162,   95,
       97,  162,  162,   97,  162,   95,   95,  254,  254,   97,
      254,   95,   95,   97,   95,  690,   95,   95,  254,   97,
       97,   95,  690,  339,  340,   97,   97,   95,   97,  341,
       97,   97,   95,   95,  690,   97,  342,   95,   95,  690,
       95,   97,  344,  347,  690,   95,   97,   97,  343,   95,

      690,   97,   97,  346,   97,  353,   95,  352,  349,   97,
      690,  690,   95,   97,  348,  350,  351,   95,   95,   95,
       97,  354,  356,  355,  358,  357,   97,   95,   95,   95,
       95,   97,   97,   97,   95,   95,   95,  359,   95,   95,
      360,   97,   97,   97,   97,   95,   95,  690,   97,   97,
       97,   95,   97,   97,   95,  364,  690,  690,   95,   97,
       97,  363,   95,   95,  361,   97,  365,  366,   97,   95,
      362,  367,   97,  690,   95,   95,   97,   97,  369,  690,
       95,   95,  368,   97,   95,  372,   95,  370,   97,   97,
       95,  373,  380,  371,   97,   97,  690,  690,   97,   95,

       97,   95,  374,   95,   97,   95,   95,   95,  378,   95,
      375,  376,   95,   97,  377,   97,   95,   97,   95,   97,
       97,   97,  379,   97,  690,  383,   97,   95,  381,   95,
       97,   95,   97,   95,   95,   95,  382,  690,  384,  690,
       95,   97,   95,   97,  385,   97,   95,   97,   97,   97,
       95,  391,   95,  394,   97,  386,   97,  388,  389,   95,
       97,  387,  390,   95,   97,  392,   97,   95,  396,   95,
      393,  398,  399,   97,  690,  690,   95,   97,  400,  397,
      690,   97,  690,   97,  690,  395,  337,  337,  337,  337,
       97,  402,  690,   95,  401,  690,  337,  337,  337,  337,

       95,   95,  690,   95,   95,   95,  403,   97,  406,  405,
      250,   95,  690,  250,   97,   97,  404,   97,   97,   97,
       95,   95,   95,  690,   95,   97,  250,   95,  690,  250,
      250,   95,  250,   95,   97,   97,   97,  410,   97,  407,
       95,   97,  409,  408,  418,   97,   95,   97,  413,   95,
       95,  412,   95,  690,   97,  411,  690,   95,  690,   95,
       97,  416,   95,   97,   97,  690,   97,  415,   95,  690,
      417,   97,  414,   97,   95,   95,   97,  419,  690,  422,
       95,  420,   97,  421,  423,   95,  690,   95,   97,   97,
       95,   95,  426,   95,   97,  427,   95,   95,  424,   97,

      425,   97,  428,   95,   97,   97,   95,   97,   95,  690,
       97,   97,  690,   95,   95,  430,   95,   97,  690,   95,
       97,  690,   97,  429,   95,   95,  432,   97,   97,   95,
       97,  431,  435,   97,  690,  436,  433,  434,   97,   97,
       95,   95,  690,   97,   95,  439,   95,  437,  441,  690,
       95,   95,   95,  438,   97,   97,  440,   95,   97,  443,
       97,  450,   95,  444,   97,   97,   97,   95,   95,  442,
       95,   97,   95,   95,   95,   95,   97,   95,   95,   95,
      690,   97,   97,  448,   97,   95,   97,   97,   97,   97,
      445,   97,   97,   97,  446,  447,  690,   95,  690,   97,

      451,   95,   95,  449,  690,  453,   95,  455,  454,  457,
      452,   97,  459,   95,   95,   97,   97,  460,  456,  690,
       97,   95,  690,  690,  461,   95,  458,   97,   97,   95,
      690,  462,   95,  464,   95,   97,  463,  465,   95,   97,
       95,  467,   95,   97,  466,   95,   97,   95,   97,  690,
       95,   95,   97,  468,   97,  690,   97,  479,   95,   97,
       95,   97,   95,  471,   97,   97,   95,   95,   95,  469,
      690,   95,   97,  470,   97,  472,   97,   95,   95,  690,
       97,   97,   97,  690,  474,   97,   95,  473,  690,   95,
       95,   97,   97,  475,  476,  477,   95,  481,  478,   95,

       97,  482,  480,   97,   97,  690,   95,  486,   95,  483,
       97,   95,  690,   97,  690,  484,  489,  487,  490,  485,
       97,  488,   97,   95,  690,   97,  491,  690,  492,   95,
       95,   95,   95,  690,  495,   95,   95,   97,  497,   95,
      493,  494,   95,   97,   97,   97,   97,  496,   95,   97,
       97,   95,   95,   97,   95,   95,   97,   95,  690,  498,
       95,   95,   97,  690,  690,   97,   97,   95,   97,   97,
       95,   97,  499,  690,   97,   97,   95,  502,  500,  690,
      690,   97,   95,   95,   97,  501,   95,  503,   95,   95,
       97,   95,   95,  505,  506,   95,   97,   97,   95,   95,

       97,   95,   97,   97,  504,   97,   97,   95,  690,   97,
      690,   95,   97,   97,   95,   97,   95,   95,  690,   95,
      690,   97,  507,  690,  510,   97,  690,   95,   97,   95,
       97,   97,  512,   97,  513,  508,   95,  516,  509,  690,
      511,   97,   95,   97,  514,  515,  518,   95,  690,  690,
       97,   95,   95,  520,   95,   95,   97,   95,   95,   95,
       95,   97,  521,  519,  517,   97,   97,   95,   97,   97,
       95,   97,   97,   97,   97,   95,  690,   95,  690,   95,
      690,   97,   95,  690,   97,   95,  522,  690,  690,   97,
      524,   97,  526,   97,  523,  525,   97,  528,   95,   97,

      690,  527,  529,  530,   95,   95,  690,   95,   95,  532,
      533,   95,   97,  531,  534,   95,   95,   95,   97,   97,
      535,   97,   97,  690,  538,   97,   95,   95,  536,   97,
       97,   97,   95,  537,   95,   95,   95,  539,   95,  690,
       97,   97,   95,   95,   95,   95,   97,   95,   97,   97,
       97,   95,   97,  542,  543,   95,   97,   97,   97,   97,
       95,   97,  540,   95,   95,   97,  541,   95,   95,   97,
       95,  690,  690,  547,   97,  690,  690,   97,   97,  550,
      690,   97,   97,  545,   97,  544,  552,  546,   95,  551,
      548,   95,   95,   95,  549,  690,   95,   95,   95,   95,

      690,  553,   97,   95,  555,   97,   97,   97,   95,  558,
       97,   97,   97,   97,  554,  690,  557,   97,   95,   95,
       95,  556,   97,   95,   95,  560,   95,  562,  690,  561,
      690,  559,   97,   97,   97,   95,   95,   97,   97,   95,
       97,   95,  563,  690,  564,  566,  690,   95,  565,   97,
       97,   95,   95,   97,   95,   97,   95,  571,  690,  690,
      568,   97,  690,   95,   95,   97,   97,   95,   97,  573,
       97,  567,  569,  572,   95,  690,  570,   97,   97,   95,
       95,   97,   95,  576,  690,  578,  577,   95,   97,  574,
       95,   95,  575,   97,   97,   95,   97,  690,  579,   95,

       95,   97,  690,   95,   97,   97,   95,  690,   95,   97,
       95,  581,   95,   97,   97,   95,  580,   97,  690,  582,
       97,  584,   97,   95,   97,  586,   97,   95,  690,   97,
      690,  690,  587,   95,  589,   95,   95,   97,   95,   95,
      583,   97,  591,  585,  592,  593,  690,   97,  588,   97,
       97,   95,   97,   97,  690,   95,  590,   95,  596,   95,
      594,  690,  597,   95,   95,   97,   95,   95,  595,   97,
       95,   97,   95,   97,  599,  600,  598,   97,   97,   95,
       97,   97,  690,   95,   97,   95,   97,  690,  601,   95,
       95,  610,  690,   97,   95,  690,  603,   97,   95,   97,

      602,  604,   95,   97,   97,   95,  605,   95,   97,  606,
       95,   95,   97,  607,   95,   95,   97,   95,  690,   97,
       95,   97,  608,   95,   97,   97,  690,  690,   97,   97,
      690,   97,  612,   95,   97,   95,   95,   97,  611,  613,
      609,  614,   95,   95,  615,   95,   95,   97,   95,   97,
       97,  690,   95,   95,   95,  690,   97,   97,  617,   97,
       97,  618,   97,  690,  690,   95,   97,   97,   97,  616,
       95,  690,  620,  690,  690,   95,  690,  619,  623,   97,
       95,   95,  625,  627,   97,  621,  626,  622,  630,   97,
      624,   95,   95,   95,   97,   97,   95,   95,   95,  631,

       95,   95,   95,   95,  632,   97,   97,   97,   95,   95,
       97,   97,   97,   95,   97,   97,   97,   97,   95,   95,
       95,  690,   97,   97,   95,   95,  633,   97,  690,  634,
      690,   95,   97,   97,   97,  637,  642,  644,   97,   97,
      643,  640,  635,  645,  636,   97,   95,   95,   95,  638,
       95,  639,   95,   95,  641,  648,   95,  690,  647,  690,
       97,   97,   97,  690,   97,   95,   97,   97,   95,   95,
       97,  646,   95,  650,  690,   95,   95,  649,   95,   97,
       95,   95,   97,   97,   95,  651,   97,   95,  653,   97,
       97,  652,   97,   95,   97,   97,   95,   95,   97,  654,

       95,   97,  655,  690,   95,  690,   95,   97,   95,   95,
       97,   97,  690,   95,   97,   95,  656,  657,   97,  659,
       97,   95,   97,   97,  662,   95,  660,   97,   95,   97,
      658,  661,  690,  690,  663,   97,   95,  690,  690,   97,
      690,   95,   97,   95,   95,  664,  665,  667,   95,   95,
       97,  666,  670,   95,  672,   97,  668,   97,   97,  669,
       95,   95,   97,   97,  671,   95,  690,   97,   95,   95,
       95,  690,   95,   95,   97,   97,   95,  674,  673,   97,
      677,  690,   97,   97,   97,  675,   97,   97,   95,   95,
       97,   95,   95,  690,  690,  680,  690,  679,  678,  676,

      681,  690,   97,   97,  690,   97,   97,  690,  690,  684,
      690,  686,  690,  690,  690,  690,  690,  690,  690,  690,
      683,  682,  688,  690,  690,  685,  689,  690,  690,  690,
      690,  690,  690,  690,  687,   60,   60,   60,   60,   60,
       60,   60,   67,   67,  690,   67,   67,   67,   67,   96,
      690,  690,   96,   96,   96,  166,  166,  167,  167,  255,
      255,  255,  256,  256,  629,  629,  629,  629,    3,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,

      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690
    } ;

static yyconst short int yy_chk[2443] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    9,   12,   12,   13,   18,   56,   21,
       20,   21,   21,   21,   21,   29,   29,   22,  629,   18,
       20,   20,   22,   13,  610,   67,   24,   24,   24,   24,

       22,   25,   27,  100,   31,   25,   97,   32,    9,   23,
       95,   23,   23,   23,   23,   24,   94,   27,   31,   27,
       27,   32,   56,   39,   23,   67,   90,   40,   23,   23,
       23,   33,   38,   75,   46,   33,   33,   39,   37,   62,
       23,   40,   36,   24,   23,   23,   38,   23,   46,   33,
       60,   43,   37,   41,   28,   23,   32,   42,   23,   37,
       37,   45,   40,   17,   37,   43,   14,   41,   44,   40,
       68,   42,   37,   40,   39,   45,   40,   37,   68,   48,
       38,   37,   44,   46,   38,   60,   38,    8,   41,   41,
       37,    3,   41,   48,   43,    0,   47,   43,   49,   41,

       43,   45,   41,   42,   50,   42,   51,   44,   45,   45,
       47,   52,   49,   45,   42,   96,    0,   44,   50,    0,
       51,   99,   53,    0,    0,   52,   54,    0,  130,   96,
       48,   47,    0,   48,    0,   47,   53,   49,   98,  102,
       54,  103,  130,   50,    0,    0,   50,   50,   51,  104,
       83,   83,   98,  102,   52,  103,   99,   50,   50,   52,
       50,   54,    0,  104,   51,   53,   83,   83,   54,   83,
        0,   53,   76,   76,   76,   76,   82,   83,   82,  106,
      107,   82,   82,   82,   82,   76,   76,   98,  102,   76,
      103,    0,    0,  106,  107,    0,  104,    0,    0,  108,

      109,   76,   76,  111,    0,   76,   76,  110,   76,   80,
       80,   80,   80,  108,  109,  113,  112,  111,  114,  117,
      116,  110,   80,   80,    0,    0,   80,  115,  107,  113,
      112,    0,  114,  117,  116,    0,  106,    0,   80,   80,
        0,  115,   80,   80,    0,   80,   81,    0,   81,   81,
       81,   81,  108,  114,  110,  112,  111,  118,  109,  119,
      120,   81,  115,    0,  121,   81,   81,  113,  116,  122,
        0,  118,  117,  119,  120,  125,  126,   81,  121,    0,
      123,   81,   81,  122,   81,    0,    0,  124,  127,  125,
      126,    0,   81,  105,  123,  133,    0,  118,  128,  119,

      118,  124,  127,  129,    0,  119,  120,  105,  131,  133,
      118,    0,  128,  132,    0,    0,    0,  129,  121,  134,
        0,  122,  131,  135,  136,  126,  125,  132,  105,  105,
      105,  105,  105,  134,  123,  137,  105,  135,  136,  127,
      124,  138,    0,  140,  105,  105,  105,  133,  105,  137,
      132,  128,    0,    0,  139,  138,  129,  140,  131,  132,
      141,  144,  142,    0,    0,  147,  132,  134,  139,  145,
      135,  146,  148,  143,  141,  144,  142,  138,  137,  147,
      136,    0,    0,  145,  137,  146,  148,  143,    0,    0,
      149,  151,    0,    0,    0,  139,  140,  144,    0,  150,

        0,    0,  139,  142,  149,  151,  139,  139,  143,  141,
        0,  143,  145,  150,  146,  147,  152,  153,    0,    0,
      148,  142,  143,    0,  143,  164,  164,  164,  164,    0,
      152,  153,  159,  149,  151,  159,    0,  151,  158,  171,
      158,  173,  149,  158,  158,  158,  158,    0,  159,    0,
      150,  159,  159,  171,  159,  173,  161,    0,  161,    0,
      153,  161,  161,  161,  161,  189,  174,  176,  172,  152,
      160,  160,  160,  160,  162,  183,    0,  162,    0,  189,
      174,  176,  172,  160,  160,  171,    0,  160,  173,  183,
      162,  163,  163,  162,  162,    0,  162,    0,    0,  160,

      160,  174,    0,  160,  160,  175,  160,  163,  163,  178,
      163,  165,  165,  165,  165,  166,  166,  172,  163,  175,
        0,  176,  177,  178,  179,  165,  180,    0,  165,  181,
        0,  166,  166,  183,  166,  182,  177,    0,  179,  185,
      180,  165,  166,  181,  165,  165,    0,  165,  178,  182,
      184,  175,  186,  185,    0,  187,  188,  175,  175,  190,
      177,  191,  192,  193,  184,  194,  186,    0,  181,  187,
      188,  177,  195,  190,  180,  191,  192,  193,  182,  194,
      196,  179,    0,  197,    0,    0,  195,    0,  182,  198,
      188,    0,  185,  187,  196,  199,  191,  197,  186,  184,

        0,  192,  201,  198,  200,  202,  203,  204,  190,  199,
        0,    0,    0,  205,  193,  196,  201,  194,  200,  202,
      203,  204,  206,    0,  195,  195,  197,  205,    0,  207,
      199,  208,    0,    0,    0,  209,  206,  198,  210,  200,
      211,  201,  203,  207,  202,  208,  204,  200,  202,  209,
      212,  213,  210,  214,  211,    0,  215,  217,  216,    0,
      205,  206,  218,  219,  212,  213,  208,  214,  207,  215,
      215,  217,  216,  219,  220,    0,  218,  219,  221,  222,
      223,  224,  247,  247,  247,  247,  225,    0,  220,  211,
      226,  227,  221,  222,  223,  224,  214,  216,  217,  212,

      225,  218,  213,  228,  226,  227,    0,  229,  230,    0,
      231,    0,  232,  234,    0,    0,  233,  228,  236,  235,
      224,  229,  230,  223,  231,  222,  232,  234,  221,  220,
      233,  237,  236,  235,  238,    0,  239,  240,  241,  225,
        0,    0,    0,  242,  226,  237,  243,  230,  238,  232,
      239,  240,  241,    0,  228,  229,  235,  242,  244,    0,
      243,  245,  246,  231,    0,    0,  233,  234,  256,    0,
        0,  236,  244,  238,  257,  245,  246,  248,  248,  248,
      248,  241,  256,  237,  243,  258,  240,    0,  257,  239,
      265,  248,    0,  244,  248,  249,  242,  249,  245,  258,

      249,  249,  249,  249,  265,    0,  250,  248,  246,  250,
      248,  248,    0,  248,  251,  251,  251,  251,  252,  252,
      252,  252,  250,  259,  253,  250,  250,  253,  250,  265,
        0,  258,  252,  260,    0,  252,  261,  259,    0,  262,
      253,  254,  254,  253,  253,  263,  253,  260,  252,  264,
      261,  252,  252,  262,  252,  266,  267,  254,  254,  263,
      254,  268,  269,  264,  270,    0,  271,  272,  254,  266,
      267,  273,    0,  259,  260,  268,  269,  274,  270,  261,
      271,  272,  276,  275,    0,  273,  262,  277,  278,    0,
      279,  274,  264,  267,    0,  280,  276,  275,  263,  281,

        0,  277,  278,  266,  279,  272,  282,  271,  269,  280,
        0,    0,  283,  281,  268,  269,  270,  284,  285,  286,
      282,  273,  275,  274,  277,  276,  283,  287,  290,  288,
      291,  284,  285,  286,  292,  289,  293,  278,  294,  296,
      280,  287,  290,  288,  291,  295,  297,    0,  292,  289,
      293,  298,  294,  296,  299,  286,    0,    0,  300,  295,
      297,  285,  301,  302,  283,  298,  287,  288,  299,  303,
      284,  289,  300,    0,  304,  306,  301,  302,  291,    0,
      305,  307,  290,  303,  308,  294,  309,  292,  304,  306,
      310,  295,  305,  293,  305,  307,    0,    0,  308,  311,

      309,  312,  298,  313,  310,  314,  315,  316,  303,  317,
      299,  300,  318,  311,  302,  312,  319,  313,  321,  314,
      315,  316,  304,  317,    0,  310,  318,  320,  306,  322,
      319,  323,  321,  324,  325,  326,  308,    0,  311,    0,
      327,  320,  328,  322,  312,  323,  329,  324,  325,  326,
      330,  318,  331,  321,  327,  313,  328,  315,  316,  332,
      329,  314,  317,  333,  330,  319,  331,  334,  323,  335,
      320,  325,  326,  332,    0,    0,  338,  333,  327,  324,
        0,  334,    0,  335,    0,  322,  336,  336,  336,  336,
      338,  330,    0,  339,  329,    0,  337,  337,  337,  337,

      340,  341,    0,  342,  343,  344,  331,  339,  335,  334,
      337,  345,    0,  337,  340,  341,  333,  342,  343,  344,
      346,  347,  348,    0,  351,  345,  337,  349,    0,  337,
      337,  350,  337,  352,  346,  347,  348,  342,  351,  339,
      354,  349,  341,  340,  350,  350,  353,  352,  345,  355,
      356,  344,  357,    0,  354,  343,    0,  358,    0,  359,
      353,  348,  360,  355,  356,    0,  357,  347,  361,    0,
      349,  358,  346,  359,  362,  363,  360,  351,    0,  354,
      364,  352,  361,  353,  355,  365,    0,  366,  362,  363,
      367,  368,  358,  369,  364,  359,  370,  371,  356,  365,

      357,  366,  361,  372,  367,  368,  373,  369,  374,    0,
      370,  371,    0,  375,  376,  364,  377,  372,    0,  378,
      373,    0,  374,  363,  379,  380,  366,  375,  376,  381,
      377,  365,  369,  378,    0,  370,  367,  368,  379,  380,
      382,  383,    0,  381,  384,  373,  385,  371,  375,    0,
      386,  387,  390,  372,  382,  383,  374,  388,  384,  378,
      385,  387,  389,  379,  386,  387,  390,  391,  392,  377,
      393,  388,  394,  396,  395,  398,  389,  397,  399,  401,
        0,  391,  392,  385,  393,  402,  394,  396,  395,  398,
      382,  397,  399,  401,  383,  384,    0,  400,    0,  402,

      388,  404,  403,  386,    0,  391,  405,  393,  392,  395,
      389,  400,  397,  406,  407,  404,  403,  398,  394,    0,
      405,  408,    0,    0,  399,  409,  396,  406,  407,  410,
        0,  400,  411,  402,  412,  408,  400,  403,  413,  409,
      414,  405,  415,  410,  404,  418,  411,  416,  412,    0,
      417,  419,  413,  407,  414,    0,  415,  418,  420,  418,
      422,  416,  423,  410,  417,  419,  421,  424,  425,  408,
        0,  426,  420,  409,  422,  411,  423,  427,  428,    0,
      421,  424,  425,    0,  413,  426,  429,  412,    0,  430,
      432,  427,  428,  414,  415,  416,  431,  420,  417,  433,

      429,  421,  419,  430,  432,    0,  434,  425,  435,  422,
      431,  436,    0,  433,    0,  423,  428,  426,  428,  424,
      434,  427,  435,  437,    0,  436,  428,    0,  428,  438,
      439,  440,  441,    0,  431,  442,  443,  437,  433,  444,
      429,  430,  445,  438,  439,  440,  441,  432,  446,  442,
      443,  447,  448,  444,  449,  450,  445,  451,    0,  434,
      452,  453,  446,    0,    0,  447,  448,  454,  449,  450,
      455,  451,  437,    0,  452,  453,  456,  445,  438,    0,
        0,  454,  457,  458,  455,  441,  459,  446,  460,  461,
      456,  462,  463,  449,  451,  464,  457,  458,  465,  466,

      459,  467,  460,  461,  447,  462,  463,  468,    0,  464,
        0,  469,  465,  466,  470,  467,  471,  472,    0,  473,
        0,  468,  456,    0,  461,  469,    0,  474,  470,  475,
      471,  472,  463,  473,  464,  457,  476,  467,  459,    0,
      462,  474,  477,  475,  465,  466,  469,  479,    0,    0,
      476,  478,  480,  472,  481,  482,  477,  483,  486,  484,
      485,  479,  473,  470,  468,  478,  480,  487,  481,  482,
      488,  483,  486,  484,  485,  489,    0,  490,    0,  491,
        0,  487,  492,    0,  488,  493,  476,    0,    0,  489,
      478,  490,  481,  491,  477,  480,  492,  483,  494,  493,

        0,  482,  484,  485,  495,  496,    0,  497,  498,  488,
      489,  499,  494,  487,  489,  500,  501,  502,  495,  496,
      490,  497,  498,    0,  493,  499,  503,  504,  491,  500,
      501,  502,  505,  492,  506,  507,  508,  494,  509,    0,
      503,  504,  510,  511,  512,  514,  505,  515,  506,  507,
      508,  513,  509,  501,  502,  516,  510,  511,  512,  514,
      517,  515,  499,  518,  519,  513,  500,  520,  521,  516,
      522,    0,    0,  508,  517,    0,    0,  518,  519,  511,
        0,  520,  521,  505,  522,  504,  515,  506,  523,  513,
      509,  524,  525,  526,  510,    0,  527,  528,  529,  530,

        0,  516,  523,  531,  519,  524,  525,  526,  532,  522,
      527,  528,  529,  530,  518,    0,  521,  531,  533,  535,
      534,  520,  532,  536,  537,  524,  538,  526,    0,  525,
        0,  523,  533,  535,  534,  539,  540,  536,  537,  541,
      538,  542,  527,    0,  529,  532,    0,  543,  530,  539,
      540,  544,  545,  541,  546,  542,  547,  536,    0,    0,
      534,  543,    0,  548,  549,  544,  545,  550,  546,  539,
      547,  533,  534,  537,  551,    0,  535,  548,  549,  552,
      553,  550,  554,  542,    0,  544,  543,  555,  551,  540,
      556,  557,  541,  552,  553,  558,  554,    0,  547,  559,

      560,  555,    0,  561,  556,  557,  564,    0,  562,  558,
      563,  550,  565,  559,  560,  566,  549,  561,    0,  553,
      564,  555,  562,  567,  563,  557,  565,  568,    0,  566,
        0,    0,  558,  569,  560,  570,  571,  567,  572,  574,
      554,  568,  562,  556,  563,  564,    0,  569,  559,  570,
      571,  573,  572,  574,    0,  575,  561,  576,  567,  577,
      565,    0,  568,  579,  578,  573,  580,  582,  566,  575,
      581,  576,  583,  577,  570,  571,  569,  579,  578,  584,
      580,  582,    0,  585,  581,  586,  583,    0,  572,  587,
      588,  587,    0,  584,  589,    0,  576,  585,  590,  586,

      573,  578,  591,  587,  588,  592,  579,  593,  589,  581,
      594,  595,  590,  584,  596,  597,  591,  598,    0,  592,
      600,  593,  585,  599,  594,  595,    0,    0,  596,  597,
        0,  598,  590,  601,  600,  602,  603,  599,  588,  592,
      586,  593,  605,  604,  594,  606,  607,  601,  609,  602,
      603,    0,  608,  613,  611,    0,  605,  604,  598,  606,
      607,  599,  609,    0,    0,  612,  608,  613,  611,  597,
      614,    0,  601,    0,    0,  615,    0,  600,  604,  612,
      616,  617,  606,  609,  614,  602,  608,  603,  611,  615,
      605,  618,  619,  620,  616,  617,  621,  622,  623,  612,

      624,  625,  626,  627,  614,  618,  619,  620,  631,  630,
      621,  622,  623,  632,  624,  625,  626,  627,  633,  634,
      635,    0,  631,  630,  636,  637,  616,  632,    0,  617,
        0,  638,  633,  634,  635,  621,  626,  627,  636,  637,
      626,  624,  619,  630,  620,  638,  639,  640,  641,  622,
      642,  623,  643,  644,  625,  635,  645,    0,  634,    0,
      639,  640,  641,    0,  642,  647,  643,  644,  646,  648,
      645,  633,  649,  637,    0,  650,  652,  636,  651,  647,
      653,  654,  646,  648,  655,  639,  649,  656,  644,  650,
      652,  643,  651,  657,  653,  654,  658,  659,  655,  644,

      660,  656,  646,    0,  662,    0,  661,  657,  663,  664,
      658,  659,    0,  665,  660,  666,  647,  648,  662,  651,
      661,  667,  663,  664,  654,  668,  652,  665,  669,  666,
      649,  653,    0,    0,  655,  667,  670,    0,    0,  668,
        0,  671,  669,  672,  673,  657,  659,  661,  674,  675,
      670,  660,  664,  676,  666,  671,  662,  672,  673,  663,
      677,  678,  674,  675,  665,  679,    0,  676,  680,  681,
      682,    0,  683,  684,  677,  678,  685,  669,  668,  679,
      672,    0,  680,  681,  682,  670,  683,  684,  686,  687,
      685,  689,  688,    0,    0,  677,    0,  675,  674,  671,

      678,    0,  686,  687,    0,  689,  688,    0,    0,  682,
        0,  684,    0,    0,    0,    0,    0,    0,    0,    0,
      681,  680,  686,    0,    0,  683,  688,    0,    0,    0,
        0,    0,    0,    0,  685,  691,  691,  691,  691,  691,
      691,  691,  692,  692,    0,  692,  692,  692,  692,  693,
        0,    0,  693,  693,  693,  694,  694,  695,  695,  696,
      696,  696,  697,  697,  698,  698,  698,  698,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,

      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define INITIAL 0
#line 10 "lexer.l"
import "ecdefs"
#define YYLTYPE Location
#define YY_NEVER_INTERACTIVE 1    // Avoid calling isatty on eC File object

#include "grammar.h"

bool echoOn = true;
public void SetEchoOn(bool b) { echoOn = b; }

extern YYLTYPE type_yylloc;
extern YYLTYPE expression_yylloc;

extern File fileInput;
int preprocessor();
int comment();

void TESTTTT()
{
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   type_yylloc.end.charPos += yyleng;
   type_yylloc.end.pos += yyleng;
   expression_yylloc.end.charPos += yyleng;
   expression_yylloc.end.pos += yyleng;
}

#define YY_USER_ACTION  \
   TESTTTT();

   /*
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   */

#define YY_INPUT(buf,result,max_size) \
   result = fileInput.Read(buf, 1, max_size) \

YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
File fileStack[MAX_INCLUDE_DEPTH];
char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
public void SetSomeSourceFileStack(char * fileName, int index) { strcpy(sourceFileStack[index], fileName); }
YYLTYPE locStack[MAX_INCLUDE_DEPTH];
AccessMode declModeStack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

#define uint _uint
default:

#line 1182 "lexer.ec"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 60 "lexer.l"



   yylloc.start = yylloc.end;
   type_yylloc.start = type_yylloc.end;
   expression_yylloc.start = expression_yylloc.end;


#line 1342 "lexer.ec"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 691 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2369 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 68 "lexer.l"
{ preprocessor(); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 69 "lexer.l"
{ comment(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 70 "lexer.l"
{ commentCPP(); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 72 "lexer.l"
{ return(AUTO); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 73 "lexer.l"
{ return(BREAK); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 74 "lexer.l"
{ return(CASE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 75 "lexer.l"
{ return(CHAR); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 76 "lexer.l"
{ return(CONST); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 77 "lexer.l"
{ return(CONTINUE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 78 "lexer.l"
{ return(DEFAULT); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 79 "lexer.l"
{ return(DO); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 80 "lexer.l"
{ return(DOUBLE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 81 "lexer.l"
{ return(ELSE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 82 "lexer.l"
{ return(ENUM); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 83 "lexer.l"
{ return(EXTERN); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 84 "lexer.l"
{ return(FLOAT); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 85 "lexer.l"
{ return(FOR); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 86 "lexer.l"
{ return(GOTO); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 87 "lexer.l"
{ return(IF); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 88 "lexer.l"
{ return(INT); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 89 "lexer.l"
{ return(UINT); }
	YY_BREAK
/* "uint16"            { return(UINT16); } */
/* "uint32"            { return(UINT32); } */
/* "bool"              { return(BOOL_TOKEN); } */
case 22:
YY_RULE_SETUP
#line 93 "lexer.l"
{ return(LONG); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 94 "lexer.l"
{ return(REGISTER); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 95 "lexer.l"
{ return(RETURN); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 96 "lexer.l"
{ return(SHORT); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 97 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 98 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 99 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 100 "lexer.l"
{ return(SIZEOF); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 101 "lexer.l"
{ return(ALIGNOF); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 102 "lexer.l"
{ return(STATIC); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 103 "lexer.l"
{ return(STRUCT); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 104 "lexer.l"
{ return(SWITCH); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 105 "lexer.l"
{ return(TYPEDEF); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 106 "lexer.l"
{ return(UNION); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 107 "lexer.l"
{ return(UNSIGNED); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 108 "lexer.l"
{ return(VOID); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 109 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 110 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 111 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 112 "lexer.l"
{ return(WHILE); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 114 "lexer.l"
{ return(PROPERTY); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 115 "lexer.l"
{ return(SETPROP); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 116 "lexer.l"
{ return(GETPROP); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 117 "lexer.l"
{ return(ISPROPSET); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 118 "lexer.l"
{ return(CLASS); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 119 "lexer.l"
{ return(THISCLASS); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 120 "lexer.l"
{ return(VIRTUAL); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 121 "lexer.l"
{ return(DELETE); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 122 "lexer.l"
{ return(NEWOP); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 123 "lexer.l"
{ return(NEW0OP); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 124 "lexer.l"
{ return(RENEW); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 125 "lexer.l"
{ return(RENEW0); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 126 "lexer.l"
{ return(IMPORT); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 127 "lexer.l"
{ return(DEFINE); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 128 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 129 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 130 "lexer.l"
{ return(VALIST); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 131 "lexer.l"
{ return(VAARG); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 132 "lexer.l"
{ return(BOOL); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 133 "lexer.l"
{ return(_BOOL); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 134 "lexer.l"
{ return(_COMPLEX); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 135 "lexer.l"
{ return(_IMAGINARY); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 136 "lexer.l"
{ return(RESTRICT); }
	YY_BREAK
/* "__attribute__".?"(("({D}|{L})*"))" { return(EXT_ATTRIB); } */
/* DID I MEAN? "__attribute__"" "*"(("" "*({D}|{L})*" "*("("({D}|{L})*(" "*","" "*({D}|{L})*)*" "*")")?" "*"))" { return(EXT_ATTRIB); } */
/*
 "__attribute_deprecated__"(" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute__"           (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute"             (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 */
/*
 [__attribute__] [spaces]
   [((] [spaces]
      [digits | letters] [spaces]
         ( [(]  [digits or letters or "]  ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces]  [)] )?
      [spaces]
      ( [,] [spaces]  [digits or letters]  [spaces]
         ( [(]  [digits or letters or "]
            ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces] [)]
         )? [spaces]
      )*
   [))]
 */
/* "__attribute__".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); } */
/* "__attribute".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); }*/
case 65:
YY_RULE_SETUP
#line 163 "lexer.l"
{ return ATTRIB_DEP; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 164 "lexer.l"
{ return ATTRIB; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 165 "lexer.l"
{ return __ATTRIB; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 167 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 168 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 169 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 170 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 171 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 172 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 173 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 174 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 175 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 176 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 177 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 178 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 179 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 180 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 181 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 182 "lexer.l"
{ return(PUBLIC); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 183 "lexer.l"
{ return(PRIVATE); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 184 "lexer.l"
{ return(TYPED_OBJECT); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 185 "lexer.l"
{ return(ANY_OBJECT); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 186 "lexer.l"
{ return(_INCREF); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 187 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 188 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 189 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 190 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 191 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 192 "lexer.l"
{ return(TYPEOF); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 193 "lexer.l"
{ return(WATCH); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 194 "lexer.l"
{ return(STOPWATCHING); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 195 "lexer.l"
{ return(FIREWATCHERS); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 196 "lexer.l"
{ return(WATCHABLE); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 197 "lexer.l"
{ return(CLASS_DESIGNER); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 198 "lexer.l"
{ return(CLASS_NO_EXPANSION); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 199 "lexer.l"
{ return(CLASS_FIXED); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 200 "lexer.l"
{ return(CLASS_DEFAULT_PROPERTY); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 201 "lexer.l"
{ return(PROPERTY_CATEGORY); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 202 "lexer.l"
{ return(CLASS_DATA); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 203 "lexer.l"
{ return(CLASS_PROPERTY); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 204 "lexer.l"
{ return(SUBCLASS); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 205 "lexer.l"
{ return(NAMESPACE); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 206 "lexer.l"
{ return(DBTABLE); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 207 "lexer.l"
{ return(DBFIELD); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 208 "lexer.l"
{ return(DBINDEX); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 209 "lexer.l"
{ return(DATABASE_OPEN); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 211 "lexer.l"
{ return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); }  // ("::"|(({IDENT}"::")*)){IDENT}  { return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 213 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 214 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 215 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 216 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 218 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 219 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 220 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 222 "lexer.l"
{ return(STRING_LITERAL); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 224 "lexer.l"
{ return(ELLIPSIS); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 225 "lexer.l"
{ return(RIGHT_ASSIGN); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 226 "lexer.l"
{ return(LEFT_ASSIGN); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 227 "lexer.l"
{ return(ADD_ASSIGN); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 228 "lexer.l"
{ return(SUB_ASSIGN); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 229 "lexer.l"
{ return(MUL_ASSIGN); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 230 "lexer.l"
{ return(DIV_ASSIGN); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 231 "lexer.l"
{ return(MOD_ASSIGN); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 232 "lexer.l"
{ return(AND_ASSIGN); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 233 "lexer.l"
{ return(XOR_ASSIGN); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 234 "lexer.l"
{ return(OR_ASSIGN); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 235 "lexer.l"
{ return(RIGHT_OP); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 236 "lexer.l"
{ return(LEFT_OP); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 237 "lexer.l"
{ return(INC_OP); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 238 "lexer.l"
{ return(DEC_OP); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 239 "lexer.l"
{ return(PTR_OP); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 240 "lexer.l"
{ return(AND_OP); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 241 "lexer.l"
{ return(OR_OP); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 242 "lexer.l"
{ return(LE_OP); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 243 "lexer.l"
{ return(GE_OP); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 244 "lexer.l"
{ return(EQ_OP); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 245 "lexer.l"
{ return(NE_OP); }
	YY_BREAK
/* "::"        { return(CLASS_OP); } */
case 142:
YY_RULE_SETUP
#line 247 "lexer.l"
{ return(';'); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 248 "lexer.l"
{ return('{'); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 249 "lexer.l"
{ return('}'); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 250 "lexer.l"
{ return(','); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 251 "lexer.l"
{ return(':'); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 252 "lexer.l"
{ return('='); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 253 "lexer.l"
{ return('('); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 254 "lexer.l"
{ return(')'); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 255 "lexer.l"
{ return('['); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 256 "lexer.l"
{ return(']'); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 257 "lexer.l"
{ return('.'); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 258 "lexer.l"
{ return('&'); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 259 "lexer.l"
{ return('!'); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 260 "lexer.l"
{ return('~'); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 261 "lexer.l"
{ return('-'); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 262 "lexer.l"
{ return('+'); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 263 "lexer.l"
{ return('*'); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 264 "lexer.l"
{ return('/'); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 265 "lexer.l"
{ return('%'); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 266 "lexer.l"
{ return('<'); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 267 "lexer.l"
{ return('>'); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 268 "lexer.l"
{ return('^'); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 269 "lexer.l"
{ return('|'); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 270 "lexer.l"
{ return('?'); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 271 "lexer.l"
{ return('$'); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 273 "lexer.l"
{
      while(include_stack_ptr && !fileStack[include_stack_ptr-1])
      {
         --include_stack_ptr;
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }

      if ( --include_stack_ptr < 0 )
      {
         include_stack_ptr = 0;
         yyterminate();
      }
      else
      {
         delete fileInput;
         yy_delete_buffer( YY_CURRENT_BUFFER );
         fileInput = fileStack[include_stack_ptr];
         yylloc = locStack[include_stack_ptr];
         type_yylloc = locStack[include_stack_ptr];
         expression_yylloc = locStack[include_stack_ptr];
         yy_switch_to_buffer(include_stack[include_stack_ptr] );
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }
   }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 299 "lexer.l"
{ yylloc.start = yylloc.end; type_yylloc.start = type_yylloc.end; expression_yylloc.start = expression_yylloc.end;}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 300 "lexer.l"
{
   yylloc.end.charPos = 1; yylloc.end.line += yyleng; yylloc.start = yylloc.end;
   type_yylloc.end.charPos = 1; type_yylloc.end.line += yyleng; type_yylloc.start = type_yylloc.end;
   expression_yylloc.end.charPos = 1; expression_yylloc.end.line += yyleng; expression_yylloc.start = expression_yylloc.end;
   }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 305 "lexer.l"
{
   yylloc.start.charPos++ /*= 3 - (yylloc.start.col % 3)*/; yylloc.end.charPos = yylloc.start.charPos; yylloc.start.pos = yylloc.end.pos;
   expression_yylloc.start.charPos++ /*= 3 - (expression_yylloc.start.col % 3)*/; expression_yylloc.end.charPos = expression_yylloc.start.charPos; expression_yylloc.start.pos = expression_yylloc.end.pos;
   type_yylloc.start.charPos++ /*= 3 - (type_yylloc.start.col % 3)*/; type_yylloc.end.charPos = type_yylloc.start.charPos; type_yylloc.start.pos = type_yylloc.end.pos;
   }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 311 "lexer.l"
{ yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 313 "lexer.l"
ECHO;
	YY_BREAK
#line 2341 "lexer.ec"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 691 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 691 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 690);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 313 "lexer.l"


private:

yywrap()
{
   return(1);
}

int comment()
{
   int c, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      if(c == '/' && last == '*')
         break;
      last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int commentCPP()
{
   int c, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         break;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int preprocessor()
{
   int c, last = 0;
   int count = 0;
   char line[1024];

   line[0] = '\0';

   for(;;)
   {
      c = input();
      if(c == EOF) break;

      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         if(last != '\\')
         {
            char * pointer = line + 1;
            int lineNumber;
            line[count] = 0;
            lineNumber = GetValue(&pointer);
            if(lineNumber)
            {
               char fileName[MAX_LOCATION];

               int inOut;

               fileName[0] = 0;
               GetString(&pointer, fileName, MAX_LOCATION);
               inOut = GetValue(&pointer);

               if(inOut == 1)
               {
                  char extension[MAX_EXTENSION];

                  defaultDeclMode = declModeStack[include_stack_ptr] = declMode;

                  GetExtension(fileName, extension);
                  if(!strcmp(extension, "c") || !strcmp(extension, "h"))
                     declMode = defaultDeclMode = structDeclMode = defaultAccess;

                  fileStack[include_stack_ptr] = null;
                  include_stack_ptr++;
               }
               else if(inOut == 2)
               {
                  include_stack_ptr--;
                  defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
               }

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               //yylloc.end.pos -= count;

               if(include_stack_ptr > 0 || (lineNumber && fileName[0]))
                  yylloc.end.included = GetIncludeFileID(fileName);
               else
                  yylloc.end.included = 0;
            }
            /*
            int lineNumber = strtol(line+1, &endPtr, 0);
            if(lineNumber)
            {
               GetString(&
               endPtr

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               yylloc.end.pos -= count;
            }
            */
            break;
         }
         count = 0;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
         line[count++] = c;
      }
      else
      {
         yylloc.end.pos++;
         if(c != '\r')
         {
            yylloc.end.charPos++;
            line[count++] = c;
         }
      }
      last = c;
   }
   yylloc.start = yylloc.end;
   line[count] = 0;

   TrimLSpaces(line, line);
   for(c = 0; line[c] && line[c] != ' '; c++);
   if(!strncmp(line, "include", c))
   {
      char includeFile[MAX_LOCATION] = "";

      memmove(line, line+c, strlen(line+c)+1);
      TrimLSpaces(line, line);
      if(line[0] == '\"')
      {
         for(c = 1; line[c]; c++)
         {
            if(line[c] == '\"')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
         }
      }
      else if(line[0] == '<')
      {
         for(c = 1; line[c]; c++)
            if(line[c] == '>')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
      }

      if ( include_stack_ptr >= MAX_INCLUDE_DEPTH )
      {
         fprintf( stderr, $"Includes nested too deeply" );
         exit( 1 );
      }

      if(inCompiler || !FindIncludeFileID(includeFile))
      {
         File file = OpenIncludeFile(includeFile);
         if(file)
         {
            char extension[MAX_EXTENSION];

            fileStack[include_stack_ptr] = fileInput;
            locStack[include_stack_ptr] = yylloc;
            defaultDeclMode = declModeStack[include_stack_ptr] = declMode;
            include_stack[include_stack_ptr++] = YY_CURRENT_BUFFER;

            yylloc.start.charPos = yylloc.end.charPos = 1;
            yylloc.start.line = yylloc.end.line = 1;
            yylloc.start.pos = yylloc.end.pos = 0;
            yylloc.start.included = yylloc.end.included = GetIncludeFileID(includeFile);

            GetExtension(includeFile, extension);
            if(!strcmp(extension, "c") || !strcmp(extension, "h"))
               declMode = defaultDeclMode = structDeclMode = defaultAccess;

            fileInput = file;
            yy_switch_to_buffer( yy_create_buffer( fileInput, YY_BUF_SIZE ) );
            BEGIN(INITIAL);
         }
         else
            printf("");
      }
   }
   return 0;
}

public void resetScanner()
{
   YY_FLUSH_BUFFER;
   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;
}

void resetScannerPos(CodePosition pos)
{
   YY_FLUSH_BUFFER;
   yylloc.start = yylloc.end = pos;
   type_yylloc.start = type_yylloc.end = pos;
   expression_yylloc.start = expression_yylloc.end = pos;
}

class LexerBackup
{
   YYLTYPE yylloc;
   YYLTYPE type_yylloc;
   YYLTYPE expression_yylloc;

   AccessMode declMode;
   AccessMode defaultDeclMode;

   File fileInput;
   YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
   File fileStack[MAX_INCLUDE_DEPTH];
   char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
   YYLTYPE locStack[MAX_INCLUDE_DEPTH];
   AccessMode declModeStack[MAX_INCLUDE_DEPTH];
   int include_stack_ptr;
   YY_BUFFER_STATE buffer;

   int yy_n_chars;
   char * yytext_ptr;
   char * yy_c_buf_p;
   FILE * yyin;
   char yy_hold_char;
   int yychar;
   int yy_init;
   int yy_start;

};

LexerBackup pushLexer()
{
   LexerBackup backup { };

   backup.yylloc = yylloc;
   backup.type_yylloc = type_yylloc;
   backup.expression_yylloc = expression_yylloc;
   backup.fileInput = fileInput;
   memcpy(backup.include_stack, include_stack, sizeof(include_stack));
   memcpy(backup.fileStack, fileStack, sizeof(fileStack));
   memcpy(backup.sourceFileStack, sourceFileStack, sizeof(sourceFileStack));
   memcpy(backup.locStack, locStack, sizeof(locStack));
   memcpy(backup.declModeStack, declModeStack, sizeof(declModeStack));
   backup.include_stack_ptr = include_stack_ptr;
   backup.defaultDeclMode = defaultDeclMode;
   backup.declMode = declMode;
   backup.buffer = yy_current_buffer;

   backup.yy_n_chars = yy_n_chars;
   backup.yytext_ptr = yytext_ptr;
   backup.yy_c_buf_p = yy_c_buf_p;
   backup.yyin = yyin;
   backup.yy_hold_char = yy_hold_char;
   backup.yychar = yychar;
   backup.yy_init = yy_init;
   backup.yy_start = yy_start;

   yy_init = 1;

   yy_current_buffer = 0;

   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;

   return backup;
}

void popLexer(LexerBackup backup)
{
   yylloc = backup.yylloc;
   type_yylloc = backup.type_yylloc;
   expression_yylloc = backup.expression_yylloc;
   fileInput = backup.fileInput;
   memcpy(include_stack, backup.include_stack, sizeof(include_stack));
   memcpy(fileStack, backup.fileStack, sizeof(fileStack));
   memcpy(sourceFileStack, backup.sourceFileStack, sizeof(sourceFileStack));
   memcpy(locStack, backup.locStack, sizeof(locStack));
   memcpy(declModeStack, backup.declModeStack, sizeof(declModeStack));
   include_stack_ptr = backup.include_stack_ptr;
   defaultDeclMode = backup.defaultDeclMode;
   declMode = structDeclMode = backup.declMode;

   // yy_switch_to_buffer(backup.buffer);
   yy_current_buffer = backup.buffer;
   yy_n_chars = backup.yy_n_chars;
   yytext_ptr = backup.yytext_ptr;
   yy_c_buf_p = backup.yy_c_buf_p;
   yyin = backup.yyin;
   yy_hold_char = backup.yy_hold_char;
   yychar = backup.yychar;
   yy_init = backup.yy_init;
   yy_start = backup.yy_start;

   delete backup;
}
