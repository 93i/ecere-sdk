#line 2 "lexer.ec"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 161
#define YY_END_OF_BUFFER 162
static yyconst short int yy_accept[696] =
    {   0,
      102,  102,  162,  160,  159,  158,  157,  145,  160,    1,
      151,  144,  160,  139,  140,  149,  148,  136,  147,  143,
      150,  105,  105,  137,  133,  152,  138,  153,  156,  102,
      102,  141,  142,  154,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  134,  155,  135,  146,  132,    0,  110,    0,
      118,  135,  127,  119,    0,    0,  116,  124,  114,  125,
      115,  126,    0,  108,    2,    3,  117,  109,  104,    0,
      105,    0,  105,  102,  142,  134,  141,  123,  129,  131,
      130,  122,    0,  102,    0,    0,    0,  120,  102,  102,

      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,   11,  102,  102,  102,  102,  102,
      102,  102,  102,   19,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  121,  128,  106,
      111,    0,  108,  108,    0,  109,  104,    0,  107,  103,
      102,  113,  112,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,   82,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,   17,   41,

      102,  102,  102,  102,   20,  102,  102,  102,   47,  102,
      102,  102,  102,  102,  102,   40,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,    0,  108,    0,  108,    0,
      109,  107,  103,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,    4,  102,    6,    7,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,   13,
       14,  102,  102,  102,   18,  102,  102,  102,  102,  102,
       22,  102,   48,  102,  102,  102,  102,  102,  102,  102,

      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
       21,  102,  102,  102,   35,  102,  102,  102,    0,  108,
       83,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,    5,   43,
        8,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,   16,  102,  102,  102,   54,   42,
      102,  102,  102,  102,  102,   49,  102,   25,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,   33,  102,
      102,  102,   85,   38,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,

      102,  102,  102,  102,  102,  102,  102,  102,  102,   52,
       46,  102,  102,   12,   15,  102,   51,   78,   62,  102,
      102,  102,   74,  102,   50,   24,   26,   28,   29,  102,
      102,   30,  102,   31,  102,  102,  102,  102,  102,  102,
      102,   81,  102,  102,   66,   72,  102,  102,  102,   53,
      102,  102,  102,  102,  102,  102,   60,  102,  102,  102,
      102,  102,  102,  102,  102,   99,  100,   98,   10,  102,
      102,  102,  102,   75,  102,  102,   70,  102,  102,  102,
      102,   32,  102,   45,  102,  102,  102,  102,  102,  102,
       61,  102,  102,  102,   84,  102,  102,   69,  102,  102,

      102,  102,  102,  102,    9,  102,  102,  102,  102,  102,
       39,   23,  102,   96,  102,  102,   34,   36,  102,  102,
      102,  102,  102,  102,  102,  102,   67,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,   64,   65,  102,
       97,  102,  102,   44,  102,   88,  102,  102,  102,  102,
       59,   71,   27,  102,  102,  102,   77,   94,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
        0,  102,  102,   68,  102,   80,  102,  102,   91,  102,
      102,  102,  102,  102,  102,  102,    0,    0,  102,  102,
       63,    0,  102,   73,   37,  102,  102,  102,  102,  102,

       87,  102,   86,   76,    0,  102,  102,   79,  102,  102,
      102,  102,  101,  102,    0,    0,    0,    0,    0,    0,
        0,  102,  102,  102,   89,  102,   95,  102,    0,    0,
        0,    0,   58,    0,    0,    0,    0,    0,  102,  102,
      102,  102,  102,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   56,  102,  102,  102,
      102,    0,    0,    0,    0,    0,    0,    0,   57,    0,
        0,    0,    0,   55,  102,  102,   93,    0,    0,    0,
        0,    0,    0,    0,    0,  102,   90,    0,    0,    0,
      102,  102,  102,   92,    0

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   22,   21,   23,   21,   21,   21,   24,   25,   26,
       27,   28,   29,    1,   30,   30,   30,   30,   31,   32,
       33,   33,   33,   33,   33,   34,   33,   33,   33,   33,
       33,   33,   33,   33,   35,   33,   33,   36,   33,   33,
       37,   38,   39,   40,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   33,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[71] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    4,
        5,    6,    7,    1,    1,    2,    1,    1,    1,    8,
        8,    8,    8,    4,    1,    1,    1,    1,    1,    9,
        9,    9,   10,   10,   10,   10,    1,    1,    1,    1,
       10,    9,    9,    9,    9,    9,    9,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[716] =
    {   0,
        0,    0,  269, 2449, 2449, 2449, 2449,  217,   64, 2449,
       45,   64,  205, 2449, 2449,  215,   60, 2449,   61,   59,
       71,   85,  132,   68, 2449,   85,  200,   56, 2449,   76,
      103, 2449, 2449,  197,  115,  116,  112,  120,  148,  133,
      158,   91,  171,  108,  174,  179,  182,  186,  189,  195,
      205,  199, 2449,   49, 2449, 2449, 2449,   86, 2449,  219,
     2449, 2449, 2449, 2449,  122,  131, 2449, 2449, 2449, 2449,
     2449, 2449,  194,  236, 2449, 2449, 2449,  253,  289,  271,
      199,    0,    0,    0, 2449, 2449, 2449,  175, 2449, 2449,
     2449,  173,  159,  135,  155,   90,  113, 2449,  341,  207,

      241,  253,  197,  254,  256,  271,  280,  291,  295,  304,
      308,  316,  317,  319,  312,  320,  321,  328,  336,  324,
      337,  345,  347,  229,  357,  365,  368,  380,  386,  387,
      388,  396,  398,  392,  405,  407,  409,  413,  418,  424,
      433,  439,  452,  435,  454,  456,  459, 2449, 2449, 2449,
     2449,  464, 2449,  492,  510, 2449,  436,  478,  514,  457,
        0, 2449, 2449,    0,  493,  495,  498,  496,  531,  534,
      539,  540,  541,  472,  547,  549,  552,  550,  556,  558,
      559,  562,  560,  568,  569,  588,  586,  589,  593,  595,
      601,  610,  599,  616,  614,  629,  631,  622,  633,  639,

      641,  642,  648,  649,  657,  659,  660,  661,  666,  664,
      668,  669,  677,  672,  679,  685,  690,  692,  700,  705,
      707,  709,  710,  711,  713,  718,  726,  720,  728,  729,
      733,  744,  739,  746,  735,  774,  778,  794, 2449,  782,
      798, 2449,  773,    0,  750,  752,  768,  803,  812,  813,
      819,  814,  823,  825,  830,  832,  831,  836,  840,  842,
      838,  847,  751,  849,  759,  851,  855,  857,  870,  875,
      880,  883,  881,  885,  886,  887,  888,  903,  892,  898,
      905,  909,  911,  913,  915,  920,  924,  926,  932,  939,
      941,  945,  948,  951,  952,  956,  958,  961,  967,  973,

      976,  978,  977,  979,  984,  985,  986, 1002, 1004,  995,
     1006, 1008, 1013, 1021, 1025, 1026, 1028, 1032, 1037, 1047,
     1031, 1041, 1052, 1063, 1056, 1061, 1064, 1073, 1079, 1074,
     1080, 1082, 1085, 1098, 1101, 1103, 1106, 1108, 1109, 1114,
     1118, 1119, 1126, 1129, 1135, 1136, 1137, 1139, 1142, 1147,
     1152, 1154, 1155, 1159, 1160, 1162, 1167, 1170, 1163, 1182,
     1183, 1187, 1188, 1189, 1193, 1195, 1208, 1210, 1211, 1213,
     1214, 1215, 1217, 1218, 1219, 1220, 1221, 1226, 1238, 1241,
     1242, 1247, 1263, 1265, 1266, 1267, 1269, 1270, 1271, 1275,
     1278, 1282, 1276, 1291, 1294, 1300, 1298, 1301, 1303, 1302,

     1304, 1320, 1311, 1322, 1326, 1328, 1329, 1331, 1335, 1341,
     1350, 1354, 1357, 1360, 1362, 1365, 1366, 1370, 1372, 1377,
     1378, 1381, 1382, 1387, 1388, 1390, 1393, 1394, 1397, 1398,
     1399, 1405, 1406, 1410, 1416, 1418, 1421, 1425, 1422, 1426,
     1429, 1428, 1433, 1437, 1438, 1445, 1446, 1453, 1454, 1456,
     1457, 1472, 1473, 1474, 1475, 1478, 1480, 1481, 1484, 1485,
     1482, 1491, 1500, 1509, 1513, 1512, 1519, 1525, 1528, 1529,
     1530, 1532, 1536, 1538, 1540, 1541, 1547, 1551, 1553, 1557,
     1558, 1559, 1562, 1560, 1568, 1569, 1579, 1580, 1584, 1586,
     1587, 1599, 1596, 1603, 1605, 1607, 1608, 1609, 1614, 1615,

     1624, 1631, 1635, 1637, 1639, 1641, 1642, 1643, 1660, 1644,
     1663, 1662, 1664, 1667, 1668, 1670, 1675, 1686, 1687, 1688,
     1690, 1691, 1695, 1696, 1698, 1706, 1708, 1714, 1715, 1716,
     1719, 1726, 1731, 1718, 1742, 1735, 1743, 1747, 1753, 1755,
     1759, 1762, 1763, 1765, 1770, 1772, 1774, 1780, 1781, 1785,
     1787, 1790, 1793, 1797, 1798, 1800, 1802, 1805, 1808, 1809,
     1813, 1820, 1824, 1825, 1835, 1826, 1836, 1837, 1861, 1841,
      122, 1853, 1854, 1843, 1862, 1852, 1864, 1865, 1877, 1880,
     1882, 1886, 1887, 1888, 1890, 1889,  136,  117, 1895, 1898,
     2449,  110, 1906, 1897, 1899, 1905, 1917, 1918, 1921, 1933,

     1934, 1940, 1942, 1943, 1956, 1965, 1949, 1952, 1968, 1961,
     1969, 1970, 1972, 1973, 1994,  408,   91, 1999, 2013,  175,
       87, 1974, 1977, 1990, 1993, 1998, 2006, 2010,  927, 2023,
     2028, 2032, 2449, 2037, 2038, 2047, 2056, 2062, 2046, 2052,
     2055, 2067, 2061, 2068, 2077, 2082, 2083, 2084, 2096, 2102,
     2109, 2111, 2115,   82, 2121, 2127, 2082, 2120, 2125, 2126,
     2128, 2140, 2141, 2142, 2146, 2155, 2156, 2160, 2449, 2162,
     2172, 2174, 2179, 2173, 2179, 2184, 2186, 2193, 2199, 2200,
     2206, 2212, 2213, 2218, 2225, 2197, 2190, 2219, 2235, 2237,
     2223, 2234, 2235, 2236, 2449, 2300, 2310, 2317, 2320, 2321,

     2324, 2326, 2330, 2339, 2348, 2357, 2366, 2375, 2384, 2393,
     2402, 2411, 2420, 2429, 2438
    } ;

static yyconst short int yy_def[716] =
    {   0,
      695,    1,  695,  695,  695,  695,  695,  695,  696,  695,
      695,  695,  697,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  698,
      698,  695,  695,  695,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  695,  695,  695,  695,  695,  696,  695,  696,
      695,  695,  695,  695,  697,  697,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  699,   23,  700,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  698,  695,  696,  697,  695,  698,  698,

      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  699,
      701,  695,  695,  702,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,

      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  695,  695,  695,  695,  695,
      695,  695,  695,  701,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,

      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  695,  695,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,

      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,

      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      703,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  695,  695,  698,  698,
      695,  703,  698,  698,  698,  698,  698,  698,  698,  698,

      698,  698,  698,  698,  704,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  704,  705,  695,  706,  704,  695,
      695,  698,  698,  698,  698,  698,  698,  698,  695,  705,
      695,  707,  695,  706,  708,  706,  695,  709,  698,  698,
      698,  698,  698,  695,  707,  707,  695,  708,  695,  710,
      695,  709,  711,  695,  712,  709,  698,  698,  698,  698,
      698,  695,  710,  710,  695,  711,  695,  713,  695,  712,
      714,  712,  695,  698,  698,  698,  698,  695,  713,  713,
      695,  714,  695,  715,  695,  698,  698,  695,  715,  715,
      698,  698,  698,  698,    0,  695,  695,  695,  695,  695,

      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695
    } ;

static yyconst short int yy_nxt[2520] =
    {   0,
        4,    5,    6,    7,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   23,   23,   24,   25,   26,   27,   28,   29,   30,
       30,   30,   30,   31,   30,   30,   32,    4,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   30,   43,
       30,   30,   44,   30,   45,   30,   46,   47,   48,   49,
       50,   51,   52,   30,   30,   30,   53,   54,   55,   56,
       59,   61,   62,   63,   68,  148,   73,   70,   74,   74,
       74,   74,   91,   92,   75,   93,   69,   71,   72,   76,
       64,   84,   59,   86,  669,   85,   59,   77,  638,   95,

       93,   60,   78,  633,   79,   79,   79,   79,   87,   96,
       88,   89,   93,   97,   95,   80,  149,   93,   81,   81,
       82,   93,  591,   60,   93,   93,   95,   60,  605,   93,
       80,   95,  150,  695,  591,   95,  122,   81,   95,   95,
      587,   65,   93,   95,   93,   81,  123,  588,   82,   78,
       66,   83,   83,   83,   83,   99,   95,   93,   95,   66,
      100,  107,   80,  128,  101,   81,   81,   93,  108,  106,
      103,   95,  109,  102,  104,  110,  105,   80,  164,  620,
       93,   95,   95,   93,   81,  116,  621,  117,   93,  111,
      112,   93,   81,  113,   95,   93,  118,   95,   93,  163,

      114,  162,   95,  115,   93,   95,   93,  119,   93,   95,
      120,  151,   95,  121,   93,  129,   93,  124,   95,  130,
       95,  695,   95,   98,  125,  126,   90,  133,   95,  127,
       95,  134,   81,   81,  135,  136,  131,  140,   93,  132,
      146,   67,   66,   57,  142,  137,  138,  147,  139,  143,
       93,   81,   95,  141,  144,   74,   74,   74,   74,   81,
      145,  178,   93,   93,   95,   93,  152,  153,  695,  153,
      175,  695,  154,  154,  154,  154,   95,   95,  695,   95,
       93,  152,  153,  155,  156,  158,  156,  158,  153,   93,
      159,  159,  159,  159,   95,  176,  695,  695,  155,  156,

       93,  695,  695,   95,   93,  156,   78,  179,   79,   79,
       79,   79,  177,   93,   95,  180,  181,   93,   95,   80,
      695,   93,  157,  157,  695,   93,   93,   95,   93,   93,
       93,   95,  183,   93,   80,   95,  184,   93,  182,   95,
       95,  157,   95,   95,   95,   93,   93,   95,  695,  157,
       93,   95,  695,  695,   93,  695,   93,  695,  185,   95,
       95,  695,  187,  190,   95,  188,   93,  186,   95,  191,
       95,  192,  193,  695,   93,  189,  695,   93,  194,  198,
       95,  195,  165,  166,  167,  168,  169,  196,   95,   93,
      170,   95,  695,  197,  199,   93,   93,   93,  171,  172,

      173,   93,  174,   95,  200,   93,  201,   93,  203,   95,
       95,   95,  629,  202,   93,   95,   93,  204,   93,   95,
      631,   95,   93,  632,  205,  695,  206,   93,   95,  695,
       95,  695,   95,   93,  207,  695,   95,  210,  212,  208,
      695,   95,   93,  211,   93,  213,  695,   95,   93,  209,
      220,  216,  214,  221,  218,  224,   95,  215,   95,  695,
      217,   93,   95,   93,  222,   93,  223,  225,   93,  157,
      157,  695,  219,  226,  695,   95,  695,   95,  236,   95,
      236,   93,   95,  237,  237,  237,  237,  695,  157,  227,
      243,  243,  231,  228,  695,   95,  157,  159,  159,  159,

      159,  229,   93,  232,   93,   93,  233,   93,  235,  243,
      230,  154,  154,  154,  154,  234,   95,  243,   95,   95,
      695,   95,  238,  239,  240,  239,  240,  258,  695,  241,
      241,  241,  241,  159,  159,  159,  159,  238,  239,  695,
       93,  251,  249,   93,  239,  242,  695,  242,   93,   93,
       93,  246,  247,  250,   95,  248,   93,   95,   93,   93,
      242,   93,   95,   95,   95,   93,  242,   93,   93,   93,
       95,   93,   95,   95,  695,   95,  695,   93,   93,   95,
      695,   95,   95,   95,  254,   95,  695,  695,  253,  255,
      262,   95,   95,  695,  252,   93,  261,   93,   93,  256,

      264,  260,   93,  695,   93,  257,  259,  265,   93,   95,
       93,   95,   95,  263,  695,  695,   95,  266,   95,   93,
      695,  695,   95,   93,   95,   93,  267,  268,  269,  270,
      695,   93,  695,   95,  273,  271,  274,   95,   93,   95,
       93,  279,   93,  272,  275,   95,  276,  695,   93,  695,
       93,   93,   95,  695,   95,  277,   95,   93,   93,  278,
      695,  280,   95,  284,   95,   95,   93,  281,   93,   93,
       93,   95,   95,   93,  282,   93,  283,   93,   93,  289,
       95,   93,   95,   95,   95,  293,   93,   95,   93,   95,
      695,   95,   95,  695,   93,   95,  285,  286,  288,   93,

       95,   93,   95,  695,  290,  287,  292,  291,   95,   93,
      695,  695,  695,   95,   93,   95,   93,  298,   93,   93,
       93,  296,   93,   95,  295,  294,  297,   93,   95,   93,
       95,  695,   95,   95,   95,   93,   95,   93,   93,  299,
      695,   95,   93,   95,   93,  302,  301,  300,   93,   95,
      304,   95,   95,   93,  307,   93,   95,  695,   95,   93,
       93,   93,   95,  695,  303,  305,  695,   95,   93,   95,
      306,  310,  308,   95,   95,   95,  309,   93,  313,  311,
      316,  695,   95,  312,  695,  695,  695,  318,  315,  317,
      695,   95,  314,  237,  237,  237,  237,  237,  237,  237,

      237,  241,  241,  241,  241,  321,  243,  243,  319,  153,
      319,  153,   93,  320,  320,  320,  320,  241,  241,  241,
      241,   93,   93,   93,  153,  243,   95,  322,   93,  156,
      153,  156,   93,  243,   93,   95,   95,   95,  695,   93,
       93,   93,   95,  695,  156,   93,   95,   93,   95,   93,
      156,   93,  323,   95,   95,   95,   93,  324,   93,   95,
       93,   95,  326,   95,   93,   95,   93,  325,  695,  695,
       95,  695,   95,  327,   95,  328,  332,  331,   95,   93,
       95,  337,  329,  330,   93,  335,  695,  333,  334,   93,
       93,  336,   93,   95,   93,   93,   93,   93,   95,  695,

      339,   93,  338,   95,   95,  695,   95,   93,   95,   95,
       95,   95,   93,  340,   93,   95,  341,  343,   93,  342,
       93,   95,   93,  346,   93,  344,   95,  345,   95,   93,
      695,  629,   95,   93,   95,   93,   95,  695,   95,  631,
      348,   93,  632,   95,  352,  347,  349,   95,   93,   95,
       93,  350,  695,  359,   93,   95,  351,   93,  695,  695,
       93,   93,   95,  695,   95,   93,  353,   93,   95,  357,
       93,   95,  355,  354,   95,   95,   93,  356,  695,   95,
      358,   95,   93,  695,   95,   93,   93,   93,   93,  695,
       95,  695,  362,   93,   93,   93,   95,  363,  360,   95,

       95,   95,   95,  361,   93,  364,  695,   95,   95,   95,
      695,   93,  695,   93,  695,   93,  365,   93,   95,  695,
      372,  369,   93,  366,  367,   95,  371,   95,  374,   95,
       93,   95,  368,  370,   93,   93,   95,   93,  375,  378,
       93,   93,  695,  695,   95,  376,  373,  377,   95,   95,
       93,   95,  695,  695,   95,   95,  320,  320,  320,  320,
      380,   93,  379,  695,   95,   93,  320,  320,  320,  320,
       93,  385,   93,   93,  695,   95,  383,  384,  239,   95,
      239,  381,   93,   93,   95,  382,   95,   95,   93,   93,
      695,   93,  695,  239,   93,  695,   95,   95,  386,  239,

      695,  393,   95,   95,  387,   95,  388,   93,   95,  391,
       93,  695,   93,  390,  389,   93,  695,   93,   93,  695,
      695,   95,  392,   93,   95,  396,   95,   93,   93,   95,
      397,   95,   95,  394,  395,   93,  695,   95,   93,  398,
      695,   95,   95,  695,   93,   93,   93,  401,   93,   95,
      402,   93,   95,  695,  403,  399,   93,  400,   95,   95,
       95,   93,   95,   93,   93,   95,  695,  405,   93,   93,
       95,   93,   93,  404,  695,   95,   93,   95,   95,   93,
      407,  406,   95,   95,  410,   95,   95,  411,  408,  409,
       95,   93,   93,   95,  695,  695,   93,   93,   93,  414,

      416,  695,   93,  412,   93,   95,   95,  695,  413,  415,
       95,   95,   95,  418,  425,  419,   95,   93,   95,   93,
       93,  417,   93,   93,   93,  695,   93,   93,   93,   93,
       93,   95,  423,   95,   95,   93,   95,   95,   95,  420,
       95,   95,   95,   95,   95,  422,  421,   93,  695,   95,
       93,   93,  424,  695,  695,  427,   93,  429,  431,  428,
      433,   95,  426,  695,   95,   95,  436,  430,  434,  695,
       95,  437,   93,  435,   93,   93,   93,  432,   93,   93,
       93,  695,  695,  439,   93,   93,   95,   93,   95,   95,
       95,   93,   95,   95,   95,  438,  440,  450,   95,   95,

       93,   95,  695,   93,  441,   95,  442,   93,  695,   93,
       93,   93,   93,   93,   95,  695,  443,   95,  695,  695,
       93,   95,  445,   95,   95,   95,   95,   95,  444,   93,
      446,   93,  448,  447,   95,   93,  449,   93,   93,  452,
       93,  453,  695,   95,   93,   95,  695,  457,  451,   95,
       93,   95,   95,  454,   95,  460,  458,  461,   95,   93,
      455,  456,  695,   93,   95,  462,   93,  463,  695,   93,
      459,   93,  466,   95,   93,   93,  468,   95,  695,   93,
       95,   93,  464,   95,  465,   95,   93,   93,   95,   95,
       93,   93,  467,   95,  469,   95,   93,   93,  695,   93,

       95,   95,   93,   93,   95,   95,   93,   93,   93,  470,
       95,   95,  471,   95,   93,   93,   95,   95,  473,   93,
       95,   95,   95,  474,  472,   93,  695,   93,   95,   95,
       93,   93,  476,   95,   93,   93,  695,   93,   93,   95,
      475,   95,   93,  695,   95,   95,   93,   93,   95,   95,
      477,   95,   95,  695,   93,   93,   95,  480,  478,  695,
       95,   95,   93,   93,  479,   93,   93,  482,   95,   95,
      483,  486,  695,  481,  484,  487,   95,   95,  485,   95,
       95,   93,   93,   93,   93,  695,  488,   93,  695,   93,
       93,   93,  695,   93,   93,   95,   95,   95,   95,  491,

       93,   95,  489,   95,   95,   95,  492,   95,   95,   93,
      695,  490,  695,  695,   95,  695,  493,  695,   93,  695,
      495,   93,   93,   95,  496,  494,  500,  497,   93,  499,
      501,  502,   95,  498,   93,   95,   95,   93,   93,   93,
      695,   93,   95,  695,  695,   93,  503,   93,   95,   93,
       93,   95,   95,   95,  505,   95,   93,  504,  506,   95,
       93,   95,   93,   95,   95,  695,   93,   93,   93,   93,
       95,   93,  695,  695,   95,  509,   95,   93,   93,  510,
       95,   95,   95,   95,  695,   95,  507,  508,   93,   93,
      695,   95,   95,   93,  513,   93,   93,  695,  512,  695,

      516,  695,   95,   95,  511,   93,  517,   95,   93,   95,
       95,  514,   93,  518,   93,  515,   93,   93,   93,   95,
      695,  519,   95,   93,   93,  695,   95,  524,   95,  522,
       95,   95,   95,   93,  521,  523,  526,   95,   95,  520,
       93,  695,  525,  695,   93,  695,   93,   95,   93,  695,
       93,   93,   93,   93,   95,  527,  695,  530,   95,  528,
       95,  695,   95,  529,   95,   95,   95,   95,  695,   93,
      532,   93,   93,   93,  531,  535,   93,   93,  695,   93,
      695,  537,  533,   95,   93,   95,   95,   95,  695,  541,
       95,   95,  536,   95,  534,   93,   93,   93,   95,   93,

       93,  538,  539,  542,   93,   93,  695,   93,  540,   95,
       95,   95,  543,   95,   95,   93,  695,   93,   95,   95,
      545,   95,  695,   93,   93,   93,  544,   93,   93,   95,
      548,   95,  546,  695,  549,   93,  551,   95,   95,   95,
       93,   95,   95,  695,   93,  695,  553,  547,  554,   95,
      550,   93,   93,  695,   95,  695,   93,  552,   95,  555,
      558,  695,   93,  561,   93,   95,   95,  559,   93,  556,
       95,   93,   93,  695,   93,  557,   95,  695,   95,   93,
      560,   93,   95,   93,  695,   95,   95,  562,   95,   93,
       93,  563,  571,   95,   93,   95,   93,   95,  564,   93,

      565,  695,   93,   95,   95,  566,   93,   93,   95,   93,
       95,   93,  567,   95,   93,  568,   95,   93,   93,  569,
       95,   95,   93,   95,  695,   95,  695,  695,   95,   93,
      573,   95,   95,   93,   93,   93,   95,  574,  575,  572,
      576,  570,  695,   95,   93,   93,   93,   95,   95,   95,
       93,  695,   93,  695,  695,  695,  578,  579,   95,   95,
       95,   93,   93,   93,   95,  587,   95,  584,  577,  581,
       93,   93,  588,   93,   93,   95,   95,   95,  695,  695,
      586,  582,  590,  580,   95,   95,   93,   95,   95,   93,
      585,   93,  583,  593,  594,   93,   93,   93,   93,   93,

       95,  589,  595,   95,   93,   95,   93,   93,   93,   95,
       95,   95,   95,   95,   93,   93,  596,  695,   95,  597,
       95,   95,   95,  695,  695,  695,   93,   93,   95,   95,
       93,  600,  695,  695,  695,  606,  598,  603,  607,  599,
       95,   95,   93,   93,   95,  601,  608,  602,  604,   93,
      695,   93,   93,  695,  695,  695,   95,   95,   93,  611,
      615,   93,  610,   95,  609,   95,   95,  616,  617,  620,
       93,  618,   95,  695,   93,   95,  621,   93,   93,   93,
      612,   93,   93,   93,   95,  614,   93,  613,   95,  695,
      622,   95,   95,   95,  695,   95,   95,   95,  615,   93,

       95,  623,   93,  634,  695,  616,  617,   93,  624,  618,
      635,  617,  695,   95,  618,   93,   95,  637,  625,   93,
      628,   95,  695,  626,  616,  617,  640,  629,  618,   95,
      695,  639,  644,   95,  627,  631,  645,  695,  632,  695,
      617,  634,  647,  618,  631,  695,  641,  632,  635,  617,
      649,  651,  618,  650,  695,   93,  642,  695,  635,  617,
      637,   93,  618,  695,   93,  643,  652,  616,  617,   95,
       93,  618,  644,  653,  654,   95,   93,  655,   95,  695,
      617,  645,  695,  618,   95,  695,  629,  647,  647,  631,
       95,   93,  632,  657,  631,  649,  649,  632,  650,  650,

      662,  695,  695,  695,  695,   95,  663,  695,  617,  695,
      658,  618,  659,  651,  649,  652,  660,  650,  661,  665,
      635,  617,  653,  654,  618,  670,  655,  667,  695,   93,
      668,  673,  671,  654,   93,   93,  655,   93,  653,  654,
      695,  695,  655,   95,  662,  663,  647,  695,   95,   95,
      665,   95,  617,  649,  649,  618,  650,  650,  667,  665,
      678,  668,  695,  695,  679,  695,  670,  667,  654,  695,
      668,  655,  667,  671,  654,  668,  681,  655,  685,  674,
      675,  676,   93,  673,  683,  671,  654,  684,   93,  655,
      653,  654,  677,   93,  655,   93,   95,  678,  695,   93,

      695,  695,   95,  679,  665,  654,   93,   95,  655,   95,
      681,  667,  667,   95,  668,  668,  681,  688,  683,  695,
       95,  684,  689,  688,  683,  654,  695,  684,  655,  685,
      683,  654,   93,  684,  655,  686,  671,  654,  687,  689,
      655,  681,  691,   93,   93,   93,   95,  683,  695,  683,
      684,  695,  684,  695,  695,  695,  695,   95,   95,   95,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      692,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  693,  695,  695,  695,  695,  695,  694,

       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       65,   65,   65,   65,  695,   65,   65,   65,   65,   65,
       94,  695,  695,  695,   94,   94,   94,  160,  160,  161,
      161,  244,  244,  244,  245,  245,  592,  592,  592,  592,
      619,  695,  695,  695,  619,  619,  619,  619,  619,  630,
      630,  695,  695,  695,  630,  630,  630,  630,  636,  695,
      695,  695,  636,  636,  636,  636,  636,  646,  646,  695,
      695,  695,  646,  646,  646,  646,  648,  648,  695,  695,
      695,  648,  648,  648,  648,  656,  695,  695,  695,  656,
      656,  656,  656,  656,  664,  664,  695,  695,  695,  664,

      664,  664,  664,  666,  666,  695,  695,  695,  666,  666,
      666,  666,  672,  695,  695,  695,  672,  672,  672,  672,
      672,  680,  680,  695,  695,  695,  680,  680,  680,  680,
      682,  682,  695,  695,  695,  682,  682,  682,  682,  690,
      690,  695,  695,  695,  690,  690,  690,  690,    3,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,

      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695
    } ;

static yyconst short int yy_chk[2520] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        9,   11,   11,   12,   17,   54,   20,   19,   20,   20,
       20,   20,   28,   28,   21,   30,   17,   19,   19,   21,
       12,   24,   58,   26,  654,   24,   96,   21,  621,   30,

       42,    9,   22,  617,   22,   22,   22,   22,   26,   31,
       26,   26,   31,   31,   42,   22,   54,   44,   22,   22,
       22,   37,  592,   58,   35,   36,   31,   96,  588,   38,
       22,   44,   65,   66,  571,   37,   42,   22,   35,   36,
      587,   66,   40,   38,   94,   22,   42,  587,   22,   23,
       97,   23,   23,   23,   23,   35,   40,   39,   94,   65,
       35,   38,   23,   44,   35,   23,   23,   41,   38,   37,
       36,   39,   38,   35,   36,   38,   36,   23,   95,  620,
       43,   41,   93,   45,   23,   40,  620,   40,   46,   39,
       39,   47,   23,   39,   43,   48,   40,   45,   49,   92,

       39,   88,   46,   39,   50,   47,  103,   41,   52,   48,
       41,   73,   49,   41,   51,   45,  100,   43,   50,   45,
      103,   60,   52,   34,   43,   43,   27,   47,   51,   43,
      100,   48,   81,   81,   48,   48,   46,   49,  124,   46,
       52,   16,   13,    8,   50,   48,   48,   52,   48,   50,
      101,   81,  124,   49,   51,   74,   74,   74,   74,   81,
       51,  103,  102,  104,  101,  105,   74,   74,    3,   74,
      100,    0,   78,   78,   78,   78,  102,  104,    0,  105,
      106,   74,   74,   78,   78,   80,   78,   80,   74,  107,
       80,   80,   80,   80,  106,  101,    0,    0,   78,   78,

      108,    0,    0,  107,  109,   78,   79,  104,   79,   79,
       79,   79,  102,  110,  108,  105,  106,  111,  109,   79,
        0,  115,   79,   79,    0,  112,  113,  110,  114,  116,
      117,  111,  108,  120,   79,  115,  109,  118,  107,  112,
      113,   79,  114,  116,  117,  119,  121,  120,    0,   79,
       99,  118,    0,    0,  122,    0,  123,    0,  110,  119,
      121,    0,  112,  113,   99,  112,  125,  111,  122,  113,
      123,  114,  115,    0,  126,  112,    0,  127,  116,  120,
      125,  117,   99,   99,   99,   99,   99,  118,  126,  128,
       99,  127,    0,  119,  121,  129,  130,  131,   99,   99,

       99,  134,   99,  128,  122,  132,  123,  133,  126,  129,
      130,  131,  616,  125,  135,  134,  136,  126,  137,  132,
      616,  133,  138,  616,  126,    0,  127,  139,  135,    0,
      136,    0,  137,  140,  128,    0,  138,  131,  132,  129,
        0,  139,  141,  131,  144,  133,    0,  140,  142,  130,
      137,  134,  133,  137,  136,  138,  141,  133,  144,    0,
      135,  143,  142,  145,  137,  146,  137,  139,  147,  157,
      157,    0,  136,  140,    0,  143,    0,  145,  152,  146,
      152,  174,  147,  152,  152,  152,  152,    0,  157,  141,
      160,  160,  144,  142,    0,  174,  157,  158,  158,  158,

      158,  143,  165,  145,  166,  168,  145,  167,  147,  160,
      143,  154,  154,  154,  154,  146,  165,  160,  166,  168,
        0,  167,  154,  154,  155,  154,  155,  174,    0,  155,
      155,  155,  155,  159,  159,  159,  159,  154,  154,    0,
      169,  168,  167,  170,  154,  159,    0,  159,  171,  172,
      173,  165,  165,  167,  169,  166,  175,  170,  176,  178,
      159,  177,  171,  172,  173,  179,  159,  180,  181,  183,
      175,  182,  176,  178,    0,  177,    0,  184,  185,  179,
        0,  180,  181,  183,  171,  182,    0,    0,  170,  172,
      178,  184,  185,    0,  169,  187,  177,  186,  188,  172,

      181,  176,  189,    0,  190,  173,  175,  182,  193,  187,
      191,  186,  188,  180,    0,    0,  189,  183,  190,  192,
        0,    0,  193,  195,  191,  194,  184,  185,  185,  186,
        0,  198,    0,  192,  189,  187,  190,  195,  196,  194,
      197,  193,  199,  188,  190,  198,  191,    0,  200,    0,
      201,  202,  196,    0,  197,  192,  199,  203,  204,  192,
        0,  194,  200,  198,  201,  202,  205,  195,  206,  207,
      208,  203,  204,  210,  196,  209,  197,  211,  212,  205,
      205,  214,  206,  207,  208,  209,  213,  210,  215,  209,
        0,  211,  212,    0,  216,  214,  201,  202,  204,  217,

      213,  218,  215,    0,  206,  203,  208,  207,  216,  219,
        0,    0,    0,  217,  220,  218,  221,  214,  222,  223,
      224,  212,  225,  219,  211,  210,  213,  226,  220,  228,
      221,    0,  222,  223,  224,  227,  225,  229,  230,  215,
        0,  226,  231,  228,  235,  219,  218,  217,  233,  227,
      221,  229,  230,  232,  224,  234,  231,    0,  235,  245,
      263,  246,  233,    0,  220,  222,    0,  232,  265,  234,
      223,  227,  225,  245,  263,  246,  226,  247,  230,  228,
      233,    0,  265,  229,    0,    0,    0,  235,  232,  234,
        0,  247,  231,  236,  236,  236,  236,  237,  237,  237,

      237,  240,  240,  240,  240,  246,  243,  243,  238,  237,
      238,  237,  248,  238,  238,  238,  238,  241,  241,  241,
      241,  249,  250,  252,  237,  243,  248,  247,  251,  241,
      237,  241,  253,  243,  254,  249,  250,  252,    0,  255,
      257,  256,  251,    0,  241,  258,  253,  261,  254,  259,
      241,  260,  248,  255,  257,  256,  262,  249,  264,  258,
      266,  261,  251,  259,  267,  260,  268,  250,    0,    0,
      262,    0,  264,  252,  266,  253,  256,  255,  267,  269,
      268,  261,  253,  254,  270,  259,    0,  257,  258,  271,
      273,  260,  272,  269,  274,  275,  276,  277,  270,    0,

      264,  279,  262,  271,  273,    0,  272,  280,  274,  275,
      276,  277,  278,  267,  281,  279,  268,  270,  282,  269,
      283,  280,  284,  273,  285,  271,  278,  272,  281,  286,
        0,  629,  282,  287,  283,  288,  284,    0,  285,  629,
      275,  289,  629,  286,  279,  274,  276,  287,  290,  288,
      291,  277,    0,  289,  292,  289,  278,  293,    0,    0,
      294,  295,  290,    0,  291,  296,  282,  297,  292,  287,
      298,  293,  284,  283,  294,  295,  299,  286,    0,  296,
      288,  297,  300,    0,  298,  301,  303,  302,  304,    0,
      299,    0,  294,  305,  306,  307,  300,  295,  290,  301,

      303,  302,  304,  292,  310,  296,    0,  305,  306,  307,
        0,  308,    0,  309,    0,  311,  297,  312,  310,    0,
      304,  301,  313,  298,  299,  308,  303,  309,  306,  311,
      314,  312,  300,  302,  315,  316,  313,  317,  307,  310,
      321,  318,    0,    0,  314,  308,  305,  309,  315,  316,
      322,  317,    0,    0,  321,  318,  319,  319,  319,  319,
      313,  323,  312,    0,  322,  325,  320,  320,  320,  320,
      326,  321,  324,  327,    0,  323,  317,  318,  320,  325,
      320,  314,  328,  330,  326,  316,  324,  327,  329,  331,
        0,  332,    0,  320,  333,    0,  328,  330,  322,  320,

        0,  329,  329,  331,  323,  332,  324,  334,  333,  327,
      335,    0,  336,  326,  325,  337,    0,  338,  339,    0,
        0,  334,  328,  340,  335,  332,  336,  341,  342,  337,
      333,  338,  339,  330,  331,  343,    0,  340,  344,  334,
        0,  341,  342,    0,  345,  346,  347,  337,  348,  343,
      338,  349,  344,    0,  340,  335,  350,  336,  345,  346,
      347,  351,  348,  352,  353,  349,    0,  343,  354,  355,
      350,  356,  359,  342,    0,  351,  357,  352,  353,  358,
      345,  344,  354,  355,  348,  356,  359,  349,  346,  347,
      357,  360,  361,  358,    0,    0,  362,  363,  364,  352,

      354,    0,  365,  350,  366,  360,  361,    0,  351,  353,
      362,  363,  364,  357,  366,  358,  365,  367,  366,  368,
      369,  356,  370,  371,  372,    0,  373,  374,  375,  376,
      377,  367,  364,  368,  369,  378,  370,  371,  372,  361,
      373,  374,  375,  376,  377,  363,  362,  379,    0,  378,
      380,  381,  365,    0,    0,  369,  382,  371,  373,  370,
      375,  379,  367,    0,  380,  381,  378,  372,  376,    0,
      382,  378,  383,  377,  384,  385,  386,  374,  387,  388,
      389,    0,    0,  381,  390,  393,  383,  391,  384,  385,
      386,  392,  387,  388,  389,  380,  382,  393,  390,  393,

      394,  391,    0,  395,  383,  392,  385,  397,    0,  396,
      398,  400,  399,  401,  394,    0,  386,  395,    0,    0,
      403,  397,  388,  396,  398,  400,  399,  401,  387,  402,
      389,  404,  391,  390,  403,  405,  392,  406,  407,  395,
      408,  396,    0,  402,  409,  404,    0,  400,  394,  405,
      410,  406,  407,  397,  408,  403,  401,  403,  409,  411,
      398,  399,    0,  412,  410,  403,  413,  403,    0,  414,
      402,  415,  406,  411,  416,  417,  408,  412,    0,  418,
      413,  419,  404,  414,  405,  415,  420,  421,  416,  417,
      422,  423,  407,  418,  409,  419,  424,  425,    0,  426,

      420,  421,  427,  428,  422,  423,  429,  430,  431,  412,
      424,  425,  413,  426,  432,  433,  427,  428,  420,  434,
      429,  430,  431,  421,  416,  435,    0,  436,  432,  433,
      437,  439,  424,  434,  438,  440,    0,  442,  441,  435,
      422,  436,  443,    0,  437,  439,  444,  445,  438,  440,
      430,  442,  441,    0,  446,  447,  443,  435,  431,    0,
      444,  445,  448,  449,  433,  450,  451,  437,  446,  447,
      438,  441,    0,  436,  439,  443,  448,  449,  440,  450,
      451,  452,  453,  454,  455,    0,  444,  456,    0,  457,
      458,  461,    0,  459,  460,  452,  453,  454,  455,  449,

      462,  456,  447,  457,  458,  461,  451,  459,  460,  463,
        0,  448,    0,    0,  462,    0,  452,    0,  464,    0,
      454,  466,  465,  463,  455,  453,  460,  456,  467,  459,
      460,  461,  464,  458,  468,  466,  465,  469,  470,  471,
        0,  472,  467,    0,    0,  473,  462,  474,  468,  475,
      476,  469,  470,  471,  464,  472,  477,  463,  465,  473,
      478,  474,  479,  475,  476,    0,  480,  481,  482,  484,
      477,  483,    0,    0,  478,  472,  479,  485,  486,  473,
      480,  481,  482,  484,    0,  483,  470,  471,  487,  488,
        0,  485,  486,  489,  478,  490,  491,    0,  476,    0,

      481,    0,  487,  488,  475,  493,  483,  489,  492,  490,
      491,  479,  494,  485,  495,  480,  496,  497,  498,  493,
        0,  486,  492,  499,  500,    0,  494,  491,  495,  489,
      496,  497,  498,  501,  488,  490,  493,  499,  500,  487,
      502,    0,  492,    0,  503,    0,  504,  501,  505,    0,
      506,  507,  508,  510,  502,  494,    0,  499,  503,  496,
      504,    0,  505,  497,  506,  507,  508,  510,    0,  509,
      501,  512,  511,  513,  500,  503,  514,  515,    0,  516,
        0,  506,  501,  509,  517,  512,  511,  513,    0,  510,
      514,  515,  504,  516,  502,  518,  519,  520,  517,  521,

      522,  507,  508,  511,  523,  524,    0,  525,  509,  518,
      519,  520,  513,  521,  522,  526,    0,  527,  523,  524,
      516,  525,    0,  528,  529,  530,  515,  534,  531,  526,
      521,  527,  519,    0,  522,  532,  524,  528,  529,  530,
      533,  534,  531,    0,  536,    0,  526,  520,  527,  532,
      523,  535,  537,    0,  533,    0,  538,  525,  536,  528,
      531,    0,  539,  534,  540,  535,  537,  532,  541,  529,
      538,  542,  543,    0,  544,  530,  539,    0,  540,  545,
      533,  546,  541,  547,    0,  542,  543,  535,  544,  548,
      549,  536,  549,  545,  550,  546,  551,  547,  537,  552,

      540,    0,  553,  548,  549,  542,  554,  555,  550,  556,
      551,  557,  543,  552,  558,  545,  553,  559,  560,  547,
      554,  555,  561,  556,    0,  557,    0,    0,  558,  562,
      552,  559,  560,  563,  564,  566,  561,  554,  555,  550,
      556,  548,    0,  562,  565,  567,  568,  563,  564,  566,
      570,    0,  574,    0,    0,    0,  560,  561,  565,  567,
      568,  576,  572,  573,  570,  569,  574,  566,  559,  563,
      569,  575,  569,  577,  578,  576,  572,  573,    0,    0,
      568,  564,  570,  562,  569,  575,  579,  577,  578,  580,
      567,  581,  565,  572,  573,  582,  583,  584,  586,  585,

      579,  569,  575,  580,  589,  581,  594,  590,  595,  582,
      583,  584,  586,  585,  596,  593,  577,    0,  589,  578,
      594,  590,  595,    0,    0,    0,  597,  598,  596,  593,
      599,  582,    0,    0,    0,  589,  580,  585,  590,  581,
      597,  598,  600,  601,  599,  583,  593,  584,  586,  602,
        0,  603,  604,    0,    0,    0,  600,  601,  607,  598,
      605,  608,  597,  602,  596,  603,  604,  605,  605,  606,
      610,  605,  607,    0,  606,  608,  606,  609,  611,  612,
      599,  613,  614,  622,  610,  602,  623,  600,  606,    0,
      607,  609,  611,  612,    0,  613,  614,  622,  615,  624,

      623,  607,  625,  618,    0,  615,  615,  626,  609,  615,
      618,  618,    0,  624,  618,  627,  625,  619,  610,  628,
      614,  626,    0,  611,  619,  619,  623,  630,  619,  627,
        0,  622,  631,  628,  612,  630,  632,    0,  630,    0,
      631,  634,  635,  631,  632,    0,  624,  632,  634,  634,
      635,  636,  634,  635,    0,  639,  626,    0,  636,  636,
      637,  640,  636,    0,  641,  628,  638,  637,  637,  639,
      643,  637,  644,  638,  638,  640,  642,  638,  641,    0,
      644,  645,    0,  644,  643,    0,  646,  647,  648,  645,
      642,  657,  645,  639,  646,  647,  648,  646,  647,  648,

      649,    0,    0,    0,    0,  657,  650,    0,  649,    0,
      640,  649,  641,  651,  650,  652,  642,  650,  643,  653,
      651,  651,  652,  652,  651,  655,  652,  653,    0,  658,
      653,  656,  655,  655,  659,  660,  655,  661,  656,  656,
        0,    0,  656,  658,  662,  663,  664,    0,  659,  660,
      665,  661,  662,  663,  664,  662,  663,  664,  665,  666,
      667,  665,    0,    0,  668,    0,  670,  666,  667,    0,
      666,  667,  668,  670,  670,  668,  671,  670,  672,  658,
      659,  660,  674,  673,  671,  672,  672,  671,  675,  672,
      673,  673,  661,  676,  673,  677,  674,  678,    0,  687,

        0,    0,  675,  679,  680,  678,  686,  676,  678,  677,
      681,  679,  680,  687,  679,  680,  682,  683,  681,    0,
      686,  681,  684,  688,  682,  683,    0,  682,  683,  685,
      684,  688,  691,  684,  688,  675,  685,  685,  676,  689,
      685,  690,  686,  692,  693,  694,  691,  689,    0,  690,
      689,    0,  690,    0,    0,    0,    0,  692,  693,  694,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      691,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  692,    0,    0,    0,    0,    0,  693,

      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      697,  697,  697,  697,    0,  697,  697,  697,  697,  697,
      698,    0,    0,    0,  698,  698,  698,  699,  699,  700,
      700,  701,  701,  701,  702,  702,  703,  703,  703,  703,
      704,    0,    0,    0,  704,  704,  704,  704,  704,  705,
      705,    0,    0,    0,  705,  705,  705,  705,  706,    0,
        0,    0,  706,  706,  706,  706,  706,  707,  707,    0,
        0,    0,  707,  707,  707,  707,  708,  708,    0,    0,
        0,  708,  708,  708,  708,  709,    0,    0,    0,  709,
      709,  709,  709,  709,  710,  710,    0,    0,    0,  710,

      710,  710,  710,  711,  711,    0,    0,    0,  711,  711,
      711,  711,  712,    0,    0,    0,  712,  712,  712,  712,
      712,  713,  713,    0,    0,    0,  713,  713,  713,  713,
      714,  714,    0,    0,    0,  714,  714,  714,  714,  715,
      715,    0,    0,    0,  715,  715,  715,  715,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,

      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  695,  695,  695,  695
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define INITIAL 0
#line 10 "lexer.l"
import "ecdefs"
#define YYLTYPE Location

#include "grammar.eh"

bool echoOn = true;
public void SetEchoOn(bool b) { echoOn = b; }

extern YYLTYPE type_yylloc;
extern YYLTYPE expression_yylloc;

extern File fileInput;
int preprocessor();
int comment();

void TESTTTT()
{
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   type_yylloc.end.charPos += yyleng;
   type_yylloc.end.pos += yyleng;
   expression_yylloc.end.charPos += yyleng;
   expression_yylloc.end.pos += yyleng;
}

#define YY_USER_ACTION  \
   TESTTTT();

   /*
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   */

#define YY_INPUT(buf,result,max_size) \
   result = fileInput.Read(buf, 1, max_size) \

YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
File fileStack[MAX_INCLUDE_DEPTH];
char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
public void SetSomeSourceFileStack(char * fileName, int index) { strcpy(sourceFileStack[index], fileName); }
YYLTYPE locStack[MAX_INCLUDE_DEPTH];
AccessMode declModeStack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

#define uint _uint
default:

#line 1202 "lexer.ec"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 59 "lexer.l"



   yylloc.start = yylloc.end; 
   type_yylloc.start = type_yylloc.end; 
   expression_yylloc.start = expression_yylloc.end; 


#line 1362 "lexer.ec"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 696 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2449 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 67 "lexer.l"
{ preprocessor(); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 68 "lexer.l"
{ comment(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 69 "lexer.l"
{ commentCPP(); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 71 "lexer.l"
{ return(AUTO); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 72 "lexer.l"
{ return(BREAK); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 73 "lexer.l"
{ return(CASE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 74 "lexer.l"
{ return(CHAR); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 75 "lexer.l"
{ return(CONST); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 76 "lexer.l"
{ return(CONTINUE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 77 "lexer.l"
{ return(DEFAULT); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 78 "lexer.l"
{ return(DO); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 79 "lexer.l"
{ return(DOUBLE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 80 "lexer.l"
{ return(ELSE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 81 "lexer.l"
{ return(ENUM); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 82 "lexer.l"
{ return(EXTERN); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 83 "lexer.l"
{ return(FLOAT); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 84 "lexer.l"
{ return(FOR); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 85 "lexer.l"
{ return(GOTO); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 86 "lexer.l"
{ return(IF); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 87 "lexer.l"
{ return(INT); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 88 "lexer.l"
{ return(UINT); }
	YY_BREAK
/* "uint16"            { return(UINT16); } */
/* "uint32"            { return(UINT32); } */
/* "bool"              { return(BOOL_TOKEN); } */
case 22:
YY_RULE_SETUP
#line 92 "lexer.l"
{ return(LONG); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 93 "lexer.l"
{ return(REGISTER); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 94 "lexer.l"
{ return(RETURN); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 95 "lexer.l"
{ return(SHORT); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 96 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 97 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 98 "lexer.l"
{ return(SIZEOF); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 99 "lexer.l"
{ return(STATIC); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 100 "lexer.l"
{ return(STRUCT); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 101 "lexer.l"
{ return(SWITCH); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 102 "lexer.l"
{ return(TYPEDEF); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 103 "lexer.l"
{ return(UNION); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 104 "lexer.l"
{ return(UNSIGNED); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 105 "lexer.l"
{ return(VOID); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 106 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 107 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 108 "lexer.l"
{ return(WHILE); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 110 "lexer.l"
{ return(PROPERTY); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 111 "lexer.l"
{ return(SETPROP); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 112 "lexer.l"
{ return(GETPROP); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 113 "lexer.l"
{ return(ISPROPSET); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 114 "lexer.l"
{ return(CLASS); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 115 "lexer.l"
{ return(THISCLASS); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 116 "lexer.l"
{ return(VIRTUAL); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 117 "lexer.l"
{ return(DELETE); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 118 "lexer.l"
{ return(NEWOP); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 119 "lexer.l"
{ return(NEW0OP); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 120 "lexer.l"
{ return(RENEW); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 121 "lexer.l"
{ return(RENEW0); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 122 "lexer.l"
{ return(IMPORT); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 123 "lexer.l"
{ return(DEFINE); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 124 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 125 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 126 "lexer.l"
{ return(VALIST); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 127 "lexer.l"
{ return(VAARG); }
	YY_BREAK
/* "__attribute__".?"(("({D}|{L})*"))" { return(EXT_ATTRIB); } */
/* DID I MEAN? "__attribute__"" "*"(("" "*({D}|{L})*" "*("("({D}|{L})*(" "*","" "*({D}|{L})*)*" "*")")?" "*"))" { return(EXT_ATTRIB); } */
case 57:
YY_RULE_SETUP
#line 133 "lexer.l"
{ return(EXT_ATTRIB); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 134 "lexer.l"
{ return(EXT_ATTRIB); }
	YY_BREAK
/* "__attribute__".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); } */
/* "__attribute".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); }*/
case 59:
YY_RULE_SETUP
#line 139 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 140 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 141 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 142 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 143 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 144 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 145 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 146 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 147 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 148 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 149 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 150 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 151 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 152 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 153 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 154 "lexer.l"
{ return(PUBLIC); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 155 "lexer.l"
{ return(PRIVATE); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 156 "lexer.l"
{ return(TYPED_OBJECT); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 157 "lexer.l"
{ return(ANY_OBJECT); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 158 "lexer.l"
{ return(_INCREF); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 159 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 160 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 161 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 162 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 163 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 164 "lexer.l"
{ return(TYPEOF); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 165 "lexer.l"
{ return(WATCH); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 166 "lexer.l"
{ return(STOPWATCHING); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 167 "lexer.l"
{ return(FIREWATCHERS); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 168 "lexer.l"
{ return(WATCHABLE); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 169 "lexer.l"
{ return(CLASS_DESIGNER); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 170 "lexer.l"
{ return(CLASS_NO_EXPANSION); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 171 "lexer.l"
{ return(CLASS_FIXED); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 172 "lexer.l"
{ return(CLASS_DEFAULT_PROPERTY); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 173 "lexer.l"
{ return(PROPERTY_CATEGORY); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 174 "lexer.l"
{ return(CLASS_DATA); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 175 "lexer.l"
{ return(CLASS_PROPERTY); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 176 "lexer.l"
{ return(SUBCLASS); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 177 "lexer.l"
{ return(NAMESPACE); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 178 "lexer.l"
{ return(DBTABLE); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 179 "lexer.l"
{ return(DBFIELD); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 180 "lexer.l"
{ return(DBINDEX); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 181 "lexer.l"
{ return(DATABASE_OPEN); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 183 "lexer.l"
{ return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); }  // ("::"|(({IDENT}"::")*)){IDENT}  { return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 185 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 186 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 187 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 188 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 190 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 191 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 192 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 194 "lexer.l"
{ return(STRING_LITERAL); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 196 "lexer.l"
{ return(ELLIPSIS); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 197 "lexer.l"
{ return(RIGHT_ASSIGN); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 198 "lexer.l"
{ return(LEFT_ASSIGN); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 199 "lexer.l"
{ return(ADD_ASSIGN); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 200 "lexer.l"
{ return(SUB_ASSIGN); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 201 "lexer.l"
{ return(MUL_ASSIGN); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 202 "lexer.l"
{ return(DIV_ASSIGN); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 203 "lexer.l"
{ return(MOD_ASSIGN); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 204 "lexer.l"
{ return(AND_ASSIGN); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 205 "lexer.l"
{ return(XOR_ASSIGN); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 206 "lexer.l"
{ return(OR_ASSIGN); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 207 "lexer.l"
{ return(RIGHT_OP); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 208 "lexer.l"
{ return(LEFT_OP); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 209 "lexer.l"
{ return(INC_OP); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 210 "lexer.l"
{ return(DEC_OP); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 211 "lexer.l"
{ return(PTR_OP); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 212 "lexer.l"
{ return(AND_OP); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 213 "lexer.l"
{ return(OR_OP); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 214 "lexer.l"
{ return(LE_OP); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 215 "lexer.l"
{ return(GE_OP); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 216 "lexer.l"
{ return(EQ_OP); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 217 "lexer.l"
{ return(NE_OP); }
	YY_BREAK
/* "::"        { return(CLASS_OP); } */
case 133:
YY_RULE_SETUP
#line 219 "lexer.l"
{ return(';'); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 220 "lexer.l"
{ return('{'); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 221 "lexer.l"
{ return('}'); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 222 "lexer.l"
{ return(','); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 223 "lexer.l"
{ return(':'); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 224 "lexer.l"
{ return('='); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 225 "lexer.l"
{ return('('); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 226 "lexer.l"
{ return(')'); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 227 "lexer.l"
{ return('['); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 228 "lexer.l"
{ return(']'); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 229 "lexer.l"
{ return('.'); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 230 "lexer.l"
{ return('&'); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 231 "lexer.l"
{ return('!'); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 232 "lexer.l"
{ return('~'); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 233 "lexer.l"
{ return('-'); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 234 "lexer.l"
{ return('+'); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 235 "lexer.l"
{ return('*'); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 236 "lexer.l"
{ return('/'); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 237 "lexer.l"
{ return('%'); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 238 "lexer.l"
{ return('<'); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 239 "lexer.l"
{ return('>'); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 240 "lexer.l"
{ return('^'); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 241 "lexer.l"
{ return('|'); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 242 "lexer.l"
{ return('?'); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 244 "lexer.l"
{
      if ( --include_stack_ptr < 0 )
      {
         yyterminate();
      }
      else
      {
         delete fileInput;
         yy_delete_buffer( YY_CURRENT_BUFFER );
         fileInput = fileStack[include_stack_ptr];
         yylloc = locStack[include_stack_ptr];
         type_yylloc = locStack[include_stack_ptr];
         expression_yylloc = locStack[include_stack_ptr];
         yy_switch_to_buffer(include_stack[include_stack_ptr] );
         defaultDeclMode = declMode = declModeStack[include_stack_ptr];
      }
   }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 263 "lexer.l"
{ yylloc.start = yylloc.end; type_yylloc.start = type_yylloc.end; expression_yylloc.start = expression_yylloc.end;}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 264 "lexer.l"
{ 
   yylloc.end.charPos = 1; yylloc.end.line += yyleng; yylloc.start = yylloc.end; 
   type_yylloc.end.charPos = 1; type_yylloc.end.line += yyleng; type_yylloc.start = type_yylloc.end; 
   expression_yylloc.end.charPos = 1; expression_yylloc.end.line += yyleng; expression_yylloc.start = expression_yylloc.end; 
   }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 269 "lexer.l"
{ 
   yylloc.start.charPos++ /*= 3 - (yylloc.start.col % 3)*/; yylloc.end.charPos = yylloc.start.charPos; yylloc.start.pos = yylloc.end.pos; 
   expression_yylloc.start.charPos++ /*= 3 - (expression_yylloc.start.col % 3)*/; expression_yylloc.end.charPos = expression_yylloc.start.charPos; expression_yylloc.start.pos = expression_yylloc.end.pos; 
   type_yylloc.start.charPos++ /*= 3 - (type_yylloc.start.col % 3)*/; type_yylloc.end.charPos = type_yylloc.start.charPos; type_yylloc.start.pos = type_yylloc.end.pos; 
   }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 275 "lexer.l"
{ yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 277 "lexer.l"
ECHO;
	YY_BREAK
#line 2286 "lexer.ec"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 696 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 696 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 695);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 277 "lexer.l"


yywrap()
{
   return(1);
}

int comment()
{
   int c, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      if(c == '/' && last == '*')
         break;
      last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int commentCPP()
{
   int c, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         break;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int preprocessor()
{
   int c, last = 0;
   int count = 0;
   char line[1024];

   line[0] = '\0';

   for(;;)
   {
      c = input();
      if(c == EOF) break;

      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         if(last != '\\')
         {
            char * pointer = line + 1;
            int lineNumber;
            line[count] = 0;
            lineNumber = GetValue(&pointer);
            if(lineNumber)
            {
               char fileName[MAX_LOCATION];
               
               int inOut;
               GetString(&pointer, fileName, MAX_LOCATION);
               inOut = GetValue(&pointer);
                              
               if(inOut == 1)
               {
                  char extension[MAX_EXTENSION];

                  defaultDeclMode = declModeStack[include_stack_ptr] = declMode;

                  GetExtension(fileName, extension);
                  if(!strcmp(extension, "c") || !strcmp(extension, "h"))
                     declMode = defaultDeclMode = defaultAccess;

                  include_stack_ptr++;
               }
               else if(inOut == 2)
               {
                  include_stack_ptr--;
                  defaultDeclMode = declMode = declModeStack[include_stack_ptr];
               }

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               //yylloc.end.pos -= count;
               yylloc.end.included = (include_stack_ptr > 0) ? GetIncludeFileID(fileName) : 0;
            }
            /*
            int lineNumber = strtol(line+1, &endPtr, 0);
            if(lineNumber)
            {
               GetString(&
               endPtr

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               yylloc.end.pos -= count;
            }
            */
            break;
         }
         count = 0;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
         line[count++] = c;
      }
      else
      {
         yylloc.end.pos++;
         if(c != '\r')
         {
            yylloc.end.charPos++;
            line[count++] = c;
         }
      }
      last = c;
   }   
   yylloc.start = yylloc.end;
   line[count] = 0;

   TrimLSpaces(line, line);
   for(c = 0; line[c] && line[c] != ' '; c++);
   if(!strncmp(line, "include", c))
   {
      char includeFile[MAX_LOCATION] = "";

      strcpy(line, line+c);
      TrimLSpaces(line, line);
      if(line[0] == '\"')
      {
         for(c = 1; line[c]; c++)
         {
            if(line[c] == '\"')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
         }
      }
      else if(line[0] == '<')
      {
         for(c = 1; line[c]; c++)
            if(line[c] == '>')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
      }

      if ( include_stack_ptr >= MAX_INCLUDE_DEPTH )
      {
         fprintf( stderr, "Includes nested too deeply" );
         exit( 1 );
      }

      if(inCompiler || !FindIncludeFileID(includeFile))
      {
         File file = OpenIncludeFile(includeFile);
         if(file)
         {
            char extension[MAX_EXTENSION];

            fileStack[include_stack_ptr] = fileInput;
            locStack[include_stack_ptr] = yylloc;
            defaultDeclMode = declModeStack[include_stack_ptr] = declMode;
            include_stack[include_stack_ptr++] = YY_CURRENT_BUFFER;

            yylloc.start.charPos = yylloc.end.charPos = 1;
            yylloc.start.line = yylloc.end.line = 1;
            yylloc.start.pos = yylloc.end.pos = 0;
            yylloc.start.included = yylloc.end.included = GetIncludeFileID(includeFile);

            GetExtension(includeFile, extension);
            if(!strcmp(extension, "c") || !strcmp(extension, "h"))
               declMode = defaultDeclMode = defaultAccess;

            fileInput = file;
            yy_switch_to_buffer( yy_create_buffer( fileInput, YY_BUF_SIZE ) );
            BEGIN(INITIAL);
         }
         else
            printf("");
      }
   }
   return 0;
}

public void resetScanner()
{
   YY_FLUSH_BUFFER;
   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = false;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = false;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = false;

   include_stack_ptr = 0;
}

void resetScannerPos(CodePosition pos)
{
   YY_FLUSH_BUFFER;
   yylloc.start = yylloc.end = pos;
   type_yylloc.start = type_yylloc.end = pos;
   expression_yylloc.start = expression_yylloc.end = pos;
}
