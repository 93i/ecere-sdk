#line 2 "lexer.ec"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 177
#define YY_END_OF_BUFFER 178
static yyconst short int yy_accept[723] =
    {   0,
      112,  112,  178,  176,  174,  173,  172,  175,  159,  176,
        1,  171,  165,  158,  176,  153,  154,  163,  162,  150,
      161,  157,  164,  118,  118,  151,  147,  166,  152,  167,
      170,  112,  112,  112,  155,  156,  168,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  148,  169,  149,  160,  146,
        0,  123,    0,  132,  149,  141,  133,    0,    0,  130,
      138,  128,  139,  129,  140,    0,  121,    2,    3,  131,
      122,  117,    0,  118,    0,  118,  112,  156,  148,  155,
      137,  143,  145,  144,  136,    0,  112,    0,  112,    0,

        0,  134,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,   11,  112,  112,  112,  112,  112,  112,  112,  112,
       19,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  135,  142,  119,  125,    0,  121,
      121,    0,  122,  117,    0,  120,    0,  113,  112,  127,
      126,  112,  112,    0,  124,    0,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,   92,  112,  112,  112,  112,  112,  112,

      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,   17,   45,  112,  112,  112,  112,   20,
      112,  112,  112,   51,  112,  112,  112,  112,  112,  112,
      112,   44,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,    0,  121,    0,  121,    0,  122,  120,  115,  116,
      113,    0,  112,  112,   61,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,    4,  112,    6,
        7,  112,  112,  112,  112,  112,  112,  112,  112,  112,

      112,  112,  112,  112,   13,   14,  112,  112,  112,   18,
      112,  112,  112,  112,  112,   22,  112,   52,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,   21,  112,  112,  112,
       38,  112,  112,  112,    0,  121,  115,  115,    0,  115,
      115,  116,    0,    0,  114,   62,  112,  112,  112,   93,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,    5,   47,
        8,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,   16,  112,  112,  112,   58,   46,

      112,  112,  112,  112,  112,   53,  112,  112,   25,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,   36,
      112,  112,  112,   95,   42,    0,  115,  115,  115,    0,
        0,  116,  114,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,   56,   50,  112,  112,   12,   15,  112,   55,
       88,   72,  112,  112,  112,   84,  112,   54,  112,   24,
       26,   29,   31,  112,  112,   33,  112,   34,  112,  112,
      112,  112,  112,  112,  112,    0,  115,  112,  112,  112,

       91,  112,  112,   76,   82,  112,  112,  112,   57,  112,
      112,  112,  112,  112,  112,  112,   70,  112,  112,  112,
      112,  112,  112,  112,  112,  109,  110,  108,   10,  112,
      112,  112,  112,   85,  112,  112,  112,   80,  112,  112,
      112,  112,   35,  112,   49,  112,  112,   63,  112,  112,
      112,  112,  112,  112,   71,  112,   27,  112,   32,   94,
      112,  112,   79,  112,  112,  112,  112,  112,  112,    9,
      112,  112,  112,  112,  112,   43,   23,   65,  112,  106,
      112,  112,   37,   39,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,   77,  112,  112,  112,  112,  112,

      112,  112,  112,  112,  112,   74,   75,  112,  107,  112,
      112,   48,  112,   98,   64,  112,  112,  112,  112,  112,
       69,   81,   28,  112,   41,  112,   87,  104,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,   30,   68,
      112,    0,  112,  112,   78,  112,   90,  112,  112,  101,
      112,  112,  112,  112,  112,  112,  112,  112,  112,   73,
        0,  112,   83,   40,  112,  112,  112,  112,  112,   97,
      112,   96,   86,   67,  112,  112,   89,  112,  112,  112,
      112,  111,  112,  112,  112,  112,  112,   99,  112,  105,
      112,  112,  112,  112,  112,  112,  112,  112,   60,  112,

      112,  112,  112,  112,   59,  112,  112,  103,  112,  112,
      100,  112,  112,  112,  112,  112,  112,  112,  102,  112,
       66,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
       22,   23,   22,   24,   22,   22,   22,   25,   26,   27,
       28,   29,   30,    1,   31,   32,   33,   31,   34,   35,
       36,   36,   37,   38,   36,   39,   36,   36,   36,   40,
       36,   36,   36,   36,   41,   36,   36,   42,   36,   36,
       43,   44,   45,   46,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   36,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[77] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    3,    1,    4,    1,    1,    1,    1,    5,    1,
        6,    6,    6,    6,    2,    1,    1,    1,    1,    1,
        7,    7,    7,    7,    7,    8,    8,    8,    8,    8,
        8,    8,    1,    1,    1,    1,    8,    7,    7,    7,
        7,    7,    7,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[733] =
    {   0,
        0,    0,  254, 2565, 2565, 2565, 2565, 2565,  219,   70,
     2565, 2565,   50,   69,  201, 2565, 2565,  199,   65, 2565,
       66,   64,   76,   96,   79,   80, 2565,   97,  194,   61,
     2565,   81,   88,  116, 2565, 2565,  183,  132,  115,   87,
      143,  147,  131,  148,  156,  160,  121,  164,  136,  203,
      204,  206,  208,  212,  224, 2565,   88, 2565, 2565, 2565,
      101, 2565,  184, 2565, 2565, 2565, 2565,  182,  174, 2565,
     2565, 2565, 2565, 2565, 2565,  159,  259, 2565, 2565, 2565,
      298,  339,  218,  247,  151,    0,    0, 2565, 2565, 2565,
      116, 2565, 2565, 2565,  111,  111,  149,  106,  213,  186,

       85, 2565,  233,  237,  232,  396,  221,  240,  241,  242,
      265,  298,  313,  306,  318,  319,  323,  315,  316,  334,
      331,  363,  364,  372,  328,  374,  375,  390,  391,  392,
      393,  400,  409,  401,  394,  411,  398,  416,  424,  431,
      399,  458,  459,  463,  466,  465,  468,  469,  475,  470,
      476,  478,  487,  491, 2565, 2565, 2565, 2565,  527,  517,
      556,  541,  546,  530,  483,  595,    0,  601,    0, 2565,
     2565,    0,  533,  243, 2565,  108,  498,  550,  403,  596,
      589,  612,  618,  611,  624,  620,  642,  517,  648,  600,
      654,  658,  664,  497,  665,  666,  667,  669,  671,  675,

      676,  571,  677,  682,  695,  692,  693,  701,  704,  710,
      712,  714,  717,  508,  721,  723,  736,  742,  743,  747,
      744,  748,  749,  765,  752,  764,  767,  768,  769,  770,
      772,  780,  789,  793,  792,  797,  798,  804,  805,  800,
      808,  817,  821,  820,  826,  824,  827,  830,  836,  845,
      832,  854,  875,  884,  875,  894,  899,  900,  905,  948,
      936,  992,    0,  854,  858,  860,  878,  876,  935,  965,
      900,  938,  995,  998,  879, 1001, 1006, 1008, 1007, 1011,
      925, 1013, 1010, 1016, 1018, 1028, 1017, 1019, 1023, 1026,
     1029, 1035, 1038, 1039, 1041, 1045, 1060, 1064, 1066, 1069,

     1071, 1073, 1076, 1081, 1077, 1082, 1092, 1094, 1098, 1097,
     1101, 1099, 1107, 1104, 1103, 1109, 1110, 1114, 1130, 1120,
     1127, 1133, 1135, 1136, 1137, 1142, 1155, 1148, 1146, 1163,
     1159, 1165, 1166, 1168, 1170, 1171, 1174, 1178, 1181, 1194,
     1198, 1201, 1202, 1206, 1219, 1225,    0, 1215, 1257, 1247,
        0, 1255, 1297, 1241, 1301, 1205, 1258, 1245, 1277, 1213,
     1280, 1284, 1226, 1305, 1316, 1317, 1321, 1323, 1324, 1326,
     1334, 1339, 1341, 1351, 1342, 1354, 1357, 1360, 1361, 1363,
     1367, 1369, 1370, 1372, 1387, 1389, 1391, 1395, 1397, 1396,
     1400, 1402, 1408, 1412, 1413, 1415, 1417, 1421, 1418, 1430,

     1433, 1440, 1441, 1442, 1446, 1451, 1453, 1450, 1457, 1463,
     1466, 1468, 1469, 1472, 1473, 1474, 1475, 1476, 1479, 1478,
     1491, 1496, 1499, 1502, 1504, 1275, 1535,    0, 1508, 1559,
     1563, 1574, 1564, 1526, 1529, 1568, 1589, 1551, 1523, 1593,
     1594, 1597, 1613, 1614, 1617, 1621, 1624, 1623, 1630, 1626,
     1632, 1634, 1639, 1633, 1636, 1643, 1642, 1645, 1652, 1654,
     1655, 1661, 1538, 1658, 1670, 1676, 1686, 1689, 1691, 1694,
     1697, 1701, 1704, 1706, 1709, 1710, 1712, 1714, 1717, 1719,
     1722, 1725, 1729, 1730, 1734, 1735, 1737, 1738, 1740, 1745,
     1755, 1757, 1758, 1760, 1761, 1755, 1799, 1762, 1770, 1773,

     1779, 1780, 1786, 1781, 1788, 1790, 1801, 1805, 1803, 1814,
     1816, 1820, 1822, 1829, 1835, 1837, 1838, 1839, 1840, 1858,
     1860, 1850, 1861, 1863, 1865, 1869, 1870, 1876, 1878, 1886,
     1888, 1889, 1893, 1894, 1896, 1897, 1898, 1909, 1913, 1915,
     1916, 1917, 1919, 1920, 1921, 1922, 1924, 1926, 1937, 1943,
     1944, 1945, 1947, 1948, 1965, 1964, 1966, 1967, 1954, 1973,
     1975, 1977, 1982, 1983, 1984, 1992, 1994, 1999, 2004, 2005,
     2007, 2010, 2011, 2012, 2016, 2027, 2017, 2033, 2036, 2037,
     2038, 2040, 2044, 2045, 2048, 2060, 2061, 2064, 2067, 2068,
     2070, 2069, 2071, 2073, 2076, 2077, 2079, 2088, 2094, 2096,

     2099, 2100, 2101, 2111, 2116, 2122, 2123, 2124, 2132, 2134,
     2135, 2139, 2140, 2145, 2147, 2150, 2152, 2155, 2156, 2157,
     2160, 2162, 2168, 2175, 2177, 2178, 2183, 2185, 2187, 2188,
     2190, 2194, 2195, 2196, 2203, 2205, 2215, 2206, 2218, 2221,
     2223,   96, 2225, 2226, 2224, 2227, 2233, 2244, 2250, 2252,
     2254, 2255, 2270, 2259, 2267, 2271, 2272, 2276, 2274, 2565,
       68, 2279, 2275, 2277, 2280, 2282, 2283, 2287, 2295, 2303,
     2305, 2304, 2307, 2324, 2325, 2326, 2329, 2333, 2330, 2334,
     2336, 2337, 2354, 2341, 2353, 2356, 2357, 2358, 2359, 2361,
     2364, 2365, 2362, 2377, 2380, 2381, 2385, 2386, 2388, 2389,

     2390, 2398, 2407, 2408, 2410, 2411, 2414, 2416, 2420, 2429,
     2423, 2432, 2436, 2439, 2440, 2442, 2445, 2448, 2451, 2452,
     2455, 2565, 2516, 2524, 2531, 2535, 2536, 2544, 2547, 2549,
     2551, 2556
    } ;

static yyconst short int yy_def[733] =
    {   0,
      722,    1,  722,  722,  722,  722,  722,  722,  722,  723,
      722,  722,  722,  722,  724,  722,  722,  722,  722,  722,
      722,  722,  722,  722,   24,  722,  722,  722,  722,  722,
      722,  725,  725,  725,  722,  722,  722,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  722,  722,  722,  722,  722,
      723,  722,  723,  722,  722,  722,  722,  724,  724,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  726,   25,  727,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  725,  722,  725,  728,

      724,  722,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  729,  726,  730,  722,
      722,  731,  725,  728,  722,  728,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,

      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  722,   77,  722,  722,  722,   81,  722,  729,  722,
      722,  722,  730,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,

      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  722,  161,  259,  722,  722,  260,
      350,  722,  722,  722,  722,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,

      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  722,  722,  350,  722,  722,
      722,  722,  722,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  722,  722,  725,  725,  725,

      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,

      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  732,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  722,
      732,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,

      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  725,  725,  725,
      725,    0,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722
    } ;

static yyconst short int yy_nxt[2642] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   25,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   32,   32,   32,   32,   32,   32,   34,   32,
       32,   32,   35,    4,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   32,   46,   32,   32,   47,   32,
       48,   32,   49,   50,   51,   52,   53,   54,   55,   32,
       32,   32,   56,   57,   58,   59,   62,   64,   65,   66,
       71,  660,   76,   73,   77,   77,   77,   77,   94,   95,
       78,   96,   72,   74,   75,   79,   67,   96,   96,   86,

       86,   86,   86,   80,   87,   98,   89,   62,   88,  660,
      722,   98,   98,   63,   81,  155,   82,   82,   82,   82,
      722,   90,  100,   91,   92,   96,   96,  101,   69,   83,
      172,   96,   84,   84,   84,   98,   84,   85,  171,   98,
       98,   96,   96,  170,   63,   98,   96,   83,  722,   99,
      113,   84,   84,   96,   84,   98,   98,   96,   96,   96,
       98,  156,   84,  103,  104,   85,   96,   98,  105,  167,
       96,   98,   98,   98,   96,  110,  722,  158,  106,  111,
       98,  112,  135,  107,   98,   68,  722,  108,   98,  123,
      114,  124,  175,  157,  118,  119,  109,  115,  120,  138,

      125,  116,  139,  126,  117,  121,  127,  129,  122,  128,
      102,  136,  131,   96,   96,  137,   96,  130,   96,  132,
      133,   93,   96,   96,  134,   69,   70,   98,   98,  176,
       98,   96,   98,  165,   96,  165,   98,   98,  166,  166,
      166,  166,   96,   96,   69,   98,   60,   96,   98,  175,
       96,   96,   96,  722,  140,  141,   98,   98,  142,  143,
      147,   98,  722,  149,   98,   98,   98,  151,  150,  144,
      145,  153,  146,  152,  173,   96,  148,  722,  154,   77,
       77,   77,   77,   84,   84,   84,  176,   84,  722,   98,
      190,  179,  159,  160,  177,  160,  160,  160,  178,  722,

      191,  722,   84,   84,  722,   84,  192,  722,   96,  722,
      159,  160,  193,   84,  160,  160,   96,  160,  161,  161,
      161,  161,   98,   96,  194,   96,   96,  722,   96,   96,
       98,  162,  163,   96,  163,  163,  163,   98,   96,   98,
       98,   96,   98,   98,   96,  722,  722,   98,  722,  162,
      163,  722,   98,  163,  163,   98,  163,   81,   98,   82,
       82,   82,   82,  195,  196,  198,  199,  722,  202,  722,
      197,  203,   83,   96,   96,  164,  164,  164,  722,  164,
      201,  204,   96,  200,   96,   96,  205,   98,   98,  207,
       83,  722,  206,  211,  164,  164,   98,  164,   98,   98,

       96,   96,   96,   96,   96,  164,   96,  722,   96,   96,
       96,   96,  722,   96,   98,   98,   98,   98,   98,   96,
       98,   96,   98,   98,   98,   98,   96,   98,  209,  208,
      722,  722,  722,   98,   96,   98,  213,  212,  210,  722,
       98,   96,  722,  180,  181,  182,  183,  184,   98,  722,
      268,  185,  722,  214,  222,   98,  215,  216,  218,  186,
      187,  188,  217,  189,  232,  221,  224,  219,   96,   96,
      223,  225,  227,   96,  220,   96,   96,  226,   96,   96,
       96,  722,   98,   98,  228,   96,   96,   98,   96,   98,
       98,  229,   98,   98,   98,  230,  231,   96,  722,   98,

       98,   96,   98,  166,  166,  166,  166,   96,   96,  722,
      236,   98,  234,  237,  240,   98,  722,  722,   96,  233,
      241,   98,   98,  242,  238,  245,  239,   96,  722,  722,
      235,  243,   98,  248,  246,  244,  249,  722,  722,  247,
      722,   98,  252,   96,  252,  722,  251,  253,  253,  253,
      253,  160,  250,  160,  160,  160,  256,   98,  256,  266,
       96,  257,  257,  257,  257,  722,  164,  164,  164,  160,
      164,  281,  160,  160,   98,  160,  161,  161,  161,  161,
      163,   96,  163,  163,  163,  164,  164,  282,  164,  254,
      255,  265,  255,  255,  255,   98,  164,  722,  163,   96,

      722,  163,  163,  722,  163,  722,   96,  254,  255,  267,
       96,  255,  255,   98,  255,  166,  166,  166,  166,  260,
       98,   96,   96,  722,   98,  722,  296,  722,   96,  258,
       96,  258,  258,  258,   96,   98,   98,  261,  261,  261,
      262,  261,   98,  722,   98,  722,  722,  258,   98,  722,
      258,  258,   96,  258,  269,  272,  261,  261,   96,  261,
      270,  271,  273,  262,   96,  284,   98,  261,   96,  275,
      722,  278,   98,  274,   96,   96,   96,   96,   98,   96,
      276,   96,   98,  722,  277,   96,   96,   96,   98,   98,
       98,   98,   96,   98,  722,   98,  722,  279,  722,   98,

       98,   98,   96,   96,  722,   96,   98,  280,  286,  283,
      287,   96,  285,  289,   96,  722,   98,   98,  290,   98,
       96,  722,   96,  295,   96,   98,  288,   96,   98,  298,
      722,   96,  291,   96,   98,  292,   98,  297,   98,  293,
      294,   98,  299,  301,  302,   98,   96,   98,  303,  304,
      300,  722,   96,   96,   96,  305,  722,   96,   96,   96,
       98,  722,   96,  307,  309,  308,   98,   98,   98,  306,
      314,   98,   98,   98,   96,   96,   98,   96,   96,   96,
       96,  722,   96,  722,  310,  318,  722,  722,   98,   98,
       96,   98,   98,   98,   98,  315,   98,  311,  313,   96,

      317,  316,   96,   96,   98,  312,  722,   96,   96,  722,
       96,  722,  722,   98,   96,   96,   98,   98,   96,  319,
      323,   98,   98,  322,   98,  321,  320,   96,   98,   98,
       96,   96,   98,  722,   96,  324,   96,   96,  325,  722,
       96,   98,   96,  328,   98,   98,   96,  330,   98,  333,
       98,   98,  326,  327,   98,   96,   98,  722,  722,  722,
       98,  722,  329,  722,   96,  722,  331,  722,   96,   98,
       96,  332,  336,  334,  253,  253,  253,  253,   98,  339,
      341,  335,   98,  342,   98,  337,   96,  338,   96,   96,
      344,  722,  340,  722,  343,  253,  253,  253,  253,  345,

       98,  345,   98,   98,  346,  346,  346,  346,  722,  255,
       96,  255,  255,  255,  257,  257,  257,  257,  356,  257,
      257,  257,  257,  722,   98,  722,  722,  255,  365,  358,
      255,  255,  722,  255,  258,   96,  258,  258,  258,  347,
      357,  348,  348,  348,  349,   96,  722,  722,   96,   98,
      722,  722,  258,  722,  722,  258,  258,  347,  258,   98,
      348,  348,   98,  348,  722,  361,  722,  349,  350,  350,
      350,  350,  261,  261,  261,   96,  261,  722,  350,  350,
      350,  350,  351,  722,  352,  352,  352,  353,  372,   98,
      359,  261,  261,  362,  261,  350,  350,  350,  350,  350,

      351,  722,  261,  352,  352,   96,  352,  354,   96,  354,
      353,   96,  355,  355,  355,  355,   96,   96,   96,   98,
       96,   96,   98,   96,  360,   98,   96,   96,   96,   96,
       98,   98,   98,   96,   98,   98,   96,   98,   96,   96,
       98,   98,   98,   98,  722,   96,  363,   98,   96,   96,
       98,   96,   98,   98,  722,   96,  722,  722,  364,   98,
      370,  371,   98,   98,  367,   98,  366,  375,  374,   98,
       96,  368,  369,  376,   96,  373,   96,  377,  378,   96,
      379,   96,  722,   96,   98,  722,   96,   96,   98,  383,
       98,   96,   96,   98,  382,   98,  384,   98,  722,  380,

       98,   98,   96,  381,   96,   98,   98,   96,   96,   96,
      385,   96,  386,   96,   96,  722,   98,   96,   98,   96,
       96,   98,   98,   98,   96,   98,  399,   98,   98,  388,
       96,   98,  387,   98,   98,  391,  389,   96,   98,  392,
       96,  722,  390,   96,   98,   96,   96,   96,  722,  722,
      397,   98,   96,  722,   98,  393,   96,   98,   96,   98,
       98,   98,  394,  395,  396,   96,   98,  398,  400,   96,
       98,  403,   98,   96,  401,   96,   96,  402,   96,   98,
       96,   96,  404,   98,   96,  722,  722,   98,   96,   98,
       98,   96,   98,  722,   98,   98,  722,  405,   98,  407,

      408,  412,   98,  406,   96,   98,  410,  409,   96,  411,
      413,   96,   96,  722,  415,   96,   96,  417,   98,  418,
      722,  419,   98,   96,  416,   98,   98,  414,  722,   98,
       98,  722,  722,  722,  421,  722,   96,   98,  420,  346,
      346,  346,  346,  722,  722,  346,  346,  346,  346,  348,
       98,  348,  348,  348,  722,   96,  424,  425,  722,  437,
      422,  355,  355,  355,  355,  722,  423,  348,   96,   98,
      348,  348,  426,  348,  426,  440,  722,  427,  427,  427,
      427,  428,   98,  429,  429,  429,  430,   96,  722,  352,
       96,  352,  352,  352,   96,  427,  427,  427,  427,  428,

      435,   98,  429,  429,   98,  429,  722,  352,   98,  430,
      352,  352,  431,  352,  431,   96,  434,  432,  432,  432,
      432,  355,  355,  355,  355,  722,   96,   96,  722,   98,
      436,   96,  722,   96,   96,  433,   96,  433,  433,  433,
       98,   98,  439,  438,   96,   98,  445,   98,   98,   96,
       98,   96,   96,  433,  722,  722,  433,  433,   98,  433,
      722,   96,  722,   98,   96,   98,   98,   96,  443,  441,
       96,   96,  722,   96,  442,   98,  444,   96,   98,   96,
       96,   98,   96,  448,   98,   98,  447,   98,  722,  446,
      449,   98,  450,   98,   98,  722,   98,   96,  451,   96,

      722,   96,  452,  722,  454,   96,   96,   96,  455,  456,
       96,   98,   96,   98,  453,   98,  722,  458,   96,   98,
       98,   98,   96,   96,   98,   96,   98,   96,   96,  457,
      459,   96,   98,  722,  722,  722,   98,   98,  460,   98,
       96,   98,   98,   96,  722,   98,  463,  461,  464,  462,
       96,   96,   96,  467,   98,  722,   96,   98,  465,  469,
       96,   96,  466,   96,   98,   98,   98,   96,  468,  471,
       98,  478,  472,   96,   98,   98,   96,   98,   96,   96,
      470,   98,   96,   96,   96,   96,   96,   98,   96,   96,
       98,  476,   98,   98,  722,  473,   98,   98,   98,   98,

       98,   96,   98,   98,  475,  474,   96,  722,  479,   96,
      480,  477,   96,  481,   96,   98,  722,  483,  482,  485,
       98,  487,  722,   98,  722,  490,   98,  484,   98,  488,
      491,  722,  722,   96,  489,  722,   96,  722,  486,   96,
      722,  722,  429,  493,  429,  429,  429,   98,   96,  495,
       98,  492,  722,   98,  494,  427,  427,  427,  427,  722,
      429,   96,   98,  429,  429,  722,  429,  722,  722,  348,
      722,  348,  348,  348,  496,   98,  496,  498,   96,  497,
      497,  497,  497,  432,  432,  432,  432,  348,  503,  499,
      348,  348,   98,  348,  432,  432,  432,  432,  433,   96,

      433,  433,  433,   96,   96,  722,  502,   96,  352,  722,
      352,  352,  352,   98,  722,  722,  433,   98,   98,  433,
      433,   98,  433,   96,   96,  722,  352,   96,  500,  352,
      352,   96,  352,   96,   96,  501,   96,   98,   98,  509,
       96,   98,   96,   96,   96,   98,   96,   98,   98,   96,
       98,  504,   96,   96,   98,   96,   98,   98,   98,  505,
       98,  506,   96,   98,   96,   96,   98,   98,   96,   98,
      512,   96,  722,  507,  508,  511,   98,  513,   98,   98,
       96,  722,   98,  722,  510,   98,   96,  514,  722,  722,
      517,  518,  519,  520,   98,  521,   96,  515,  516,   96,

       98,   96,  526,  522,   96,  523,  528,   96,  524,  525,
       98,   96,  722,   98,   96,   98,   96,  722,   98,   96,
       96,   98,   96,  527,   96,   98,  529,   96,   98,   96,
       98,  530,   96,   98,   98,   96,   98,  531,   98,   96,
       96,   98,  722,   98,   96,   96,   98,   96,   96,   98,
       96,  533,  722,   98,   98,   96,  532,  534,   98,   98,
      722,   98,   98,  536,   98,   96,  537,   96,   96,   98,
       96,   96,   96,  722,  535,  497,  497,  497,  497,   98,
       96,   98,   98,   96,   98,   98,   98,  541,  538,   96,
       96,   96,  722,  722,   98,  722,   96,   98,   96,  539,

       96,  540,  722,   98,   98,   98,  542,  543,  544,  547,
       98,   96,   98,   96,   98,   96,  545,  549,  546,  497,
      497,  497,  497,  722,   96,   98,   96,   98,  551,   98,
       96,  548,   96,  429,  550,  429,  429,  429,   98,   96,
       98,  552,  722,  722,   98,   96,   98,   96,   96,   96,
       96,  429,  553,   98,  429,  429,  555,  429,  722,   98,
       96,   98,   98,   98,   98,  554,  557,  722,   96,  556,
       96,   96,  559,   96,   98,   96,  722,  722,  558,   96,
       96,  560,   98,  722,   98,   98,   96,   98,   96,   98,
      561,  564,  562,   98,   98,  722,   96,  563,   96,   96,

       98,  722,   98,   96,   96,  565,   96,   96,   96,  566,
       98,  568,   98,   98,  570,  567,  571,   98,   98,   96,
       98,   98,   98,   96,  569,   96,   96,   96,  722,   96,
       96,   96,   96,   98,   96,  722,   96,   98,  574,   98,
       98,   98,  575,   98,   98,   98,   98,   96,   98,  572,
       98,  573,  722,   96,   96,   96,  722,   96,   96,  722,
      577,   98,  579,  578,   96,  582,  576,   98,   98,   98,
      583,   98,   98,  584,   96,   96,   96,   96,   98,  580,
      581,  722,  585,   96,  722,   96,  722,   96,   98,   98,
       98,   98,   96,   96,   96,  587,  722,   98,  590,   98,

      586,   98,   96,  591,   96,  589,   98,   98,   98,   96,
      588,  592,  594,  593,   96,   96,   98,   96,   98,  722,
       96,   96,   96,   98,  722,  595,   96,   96,   98,   98,
      722,   98,  598,  596,   98,   98,   98,   96,  597,  722,
       98,   98,  722,   96,  600,  603,   96,   96,   96,  599,
       96,   98,  722,  605,   96,   96,  601,   98,   96,  722,
       98,   98,   98,  602,   98,  604,  608,  609,   98,   98,
       96,   96,   98,  610,   96,  606,  607,   96,   96,   96,
       96,   96,  722,   96,   98,   98,   96,   96,   98,   96,
      611,   98,   98,   98,   98,   98,  613,   98,   96,  614,

       98,   98,  612,   98,   96,  722,   96,  616,  722,   96,
       96,   96,   98,  618,  722,  621,  722,  619,   98,  623,
       98,   96,  624,   98,   98,   98,   96,  722,  625,  617,
      615,  620,   96,   96,   96,   98,  622,  722,  722,  626,
       98,  628,   96,  629,   96,   96,   98,   98,   98,   96,
       96,  631,  632,  627,  630,   96,   98,   96,   98,   98,
       96,  722,   96,   98,   98,   96,   96,   96,  642,   98,
       96,   98,   96,  633,   98,  635,   98,  634,   96,   98,
       98,   98,  722,  636,   98,   96,   98,   96,   96,  722,
      637,  638,   98,   96,  722,   96,  639,   96,   96,   98,

       96,   98,   98,  640,   96,   96,   96,   98,  644,   98,
      722,   98,   98,   96,   98,   96,   96,  643,   98,   98,
       98,  645,  641,  646,  647,   96,  722,   98,   96,   98,
       98,   96,  722,   96,   96,   96,   96,   96,  722,   98,
      650,  649,   98,   96,  722,   98,  652,   98,   98,   98,
       98,   98,  655,  648,   96,  657,  722,   98,  653,  722,
       96,  722,   96,  651,   96,   96,  654,  658,   98,   96,
      659,  662,  663,  664,   98,  656,   98,   96,   98,   98,
       96,   96,   96,   98,   96,   96,   96,   96,  722,   96,
       96,   98,   96,   96,   98,   98,   98,   96,   98,   98,

       98,   98,  665,   98,   98,   96,   98,   98,  722,  722,
      666,   98,  722,   96,   96,   96,  667,   96,  668,   98,
      676,  669,  674,  670,  672,  677,  675,   98,   98,   98,
      680,   98,  671,  679,   96,   96,   96,  673,  722,   96,
       96,  722,  722,   96,   96,  678,   96,   96,   98,   98,
       98,   96,  681,   98,   98,  682,  683,   98,   98,  722,
       98,   98,  722,   96,   96,   98,   96,   96,   96,   96,
      722,   96,   96,  685,   96,   96,  684,   98,   98,  687,
       98,   98,   98,   98,  686,   98,   98,   96,   98,   98,
       96,   96,  722,  688,  689,   96,   96,  722,   96,   96,

       96,   98,  722,  692,   98,   98,  690,  691,   96,   98,
       98,  694,   98,   98,   98,  699,  693,   96,   96,  695,
       96,   96,   98,  696,   96,  697,   96,  722,  698,  722,
       96,   98,   98,   96,   98,   98,  702,  704,   98,   96,
       98,  700,   96,  701,   98,  722,   96,   98,  703,   96,
       96,  706,   96,   98,  705,   96,   98,  709,   96,  707,
       98,   96,   96,   98,   98,   96,   98,  712,  722,   98,
      722,  722,   98,  710,  711,   98,   98,  708,  722,   98,
      713,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      716,  722,  718,  722,  720,  722,  722,  714,  721,  715,

      722,  722,  722,  722,  722,  717,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  719,   61,   61,   61,   61,
       61,   61,   61,   61,   68,   68,  722,   68,   68,   68,
       68,   68,   97,  722,  722,  722,   97,   97,   97,  168,
      168,  168,  169,  169,  174,  174,  174,  174,  174,  174,
      174,  174,  259,  259,  263,  263,  263,  264,  264,  661,
      722,  661,  661,  661,    3,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,

      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722
    } ;

static yyconst short int yy_chk[2642] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   10,   13,   13,   14,
       19,  661,   22,   21,   22,   22,   22,   22,   30,   30,
       23,   32,   19,   21,   21,   23,   14,   40,   33,   25,

       25,   25,   25,   23,   26,   32,   28,   61,   26,  642,
      176,   40,   33,   10,   24,   57,   24,   24,   24,   24,
       25,   28,   34,   28,   28,   39,   34,   34,  101,   24,
       98,   47,   24,   24,   24,   96,   24,   24,   95,   39,
       34,   43,   38,   91,   61,   47,   49,   24,   25,   33,
       40,   24,   24,   41,   24,   43,   38,   42,   44,   97,
       49,   57,   24,   38,   38,   24,   45,   41,   38,   85,
       46,   42,   44,   97,   48,   39,   69,   76,   38,   39,
       45,   39,   47,   38,   46,   69,   63,   38,   48,   43,
       41,   43,  100,   68,   42,   42,   38,   41,   42,   49,

       43,   41,   49,   44,   41,   42,   44,   45,   42,   44,
       37,   48,   46,   50,   51,   48,   52,   45,   53,   46,
       46,   29,   54,   99,   46,   68,   18,   50,   51,  100,
       52,  107,   53,   83,   55,   83,   54,   99,   83,   83,
       83,   83,  105,  103,   15,  107,    9,  104,   55,  174,
      108,  109,  110,    3,   50,   51,  105,  103,   51,   51,
       52,  104,    0,   53,  108,  109,  110,   54,   53,   51,
       51,   55,   51,   54,   99,  111,   52,    0,   55,   77,
       77,   77,   77,   84,   84,   84,  174,   84,    0,  111,
      107,  105,   77,   77,  103,   77,   77,   77,  104,    0,

      108,    0,   84,   84,    0,   84,  109,    0,  112,    0,
       77,   77,  110,   84,   77,   77,  114,   77,   81,   81,
       81,   81,  112,  113,  111,  118,  119,    0,  115,  116,
      114,   81,   81,  117,   81,   81,   81,  113,  125,  118,
      119,  121,  115,  116,  120,    0,    0,  117,    0,   81,
       81,    0,  125,   81,   81,  121,   81,   82,  120,   82,
       82,   82,   82,  112,  113,  115,  116,    0,  119,    0,
      114,  119,   82,  122,  123,   82,   82,   82,    0,   82,
      118,  119,  124,  117,  126,  127,  120,  122,  123,  121,
       82,    0,  120,  125,   82,   82,  124,   82,  126,  127,

      128,  129,  130,  131,  135,   82,  106,    0,  137,  141,
      132,  134,    0,  179,  128,  129,  130,  131,  135,  133,
      106,  136,  137,  141,  132,  134,  138,  179,  123,  122,
        0,    0,    0,  133,  139,  136,  127,  126,  124,    0,
      138,  140,    0,  106,  106,  106,  106,  106,  139,    0,
      179,  106,    0,  128,  135,  140,  129,  130,  133,  106,
      106,  106,  132,  106,  141,  134,  137,  133,  142,  143,
      136,  138,  139,  144,  133,  146,  145,  138,  147,  148,
      150,    0,  142,  143,  140,  149,  151,  144,  152,  146,
      145,  140,  147,  148,  150,  140,  140,  153,    0,  149,

      151,  154,  152,  165,  165,  165,  165,  194,  177,    0,
      144,  153,  143,  144,  145,  154,    0,    0,  214,  142,
      146,  194,  177,  147,  144,  150,  144,  188,    0,    0,
      143,  148,  214,  152,  150,  149,  152,    0,    0,  151,
        0,  188,  159,  173,  159,    0,  154,  159,  159,  159,
      159,  160,  153,  160,  160,  160,  162,  173,  162,  177,
      178,  162,  162,  162,  162,    0,  164,  164,  164,  160,
      164,  188,  160,  160,  178,  160,  161,  161,  161,  161,
      163,  202,  163,  163,  163,  164,  164,  188,  164,  161,
      161,  173,  161,  161,  161,  202,  164,    0,  163,  181,

        0,  163,  163,    0,  163,    0,  180,  161,  161,  178,
      190,  161,  161,  181,  161,  166,  166,  166,  166,  168,
      180,  184,  182,    0,  190,    0,  202,    0,  183,  166,
      186,  166,  166,  166,  185,  184,  182,  168,  168,  168,
      168,  168,  183,    0,  186,    0,    0,  166,  185,    0,
      166,  166,  187,  166,  180,  181,  168,  168,  189,  168,
      180,  180,  182,  168,  191,  190,  187,  168,  192,  183,
        0,  186,  189,  182,  193,  195,  196,  197,  191,  198,
      184,  199,  192,    0,  185,  200,  201,  203,  193,  195,
      196,  197,  204,  198,    0,  199,    0,  187,    0,  200,

      201,  203,  206,  207,    0,  205,  204,  187,  192,  189,
      193,  208,  191,  196,  209,    0,  206,  207,  197,  205,
      210,    0,  211,  201,  212,  208,  195,  213,  209,  204,
        0,  215,  198,  216,  210,  199,  211,  203,  212,  200,
      200,  213,  205,  206,  207,  215,  217,  216,  207,  208,
      205,    0,  218,  219,  221,  209,    0,  220,  222,  223,
      217,    0,  225,  211,  213,  212,  218,  219,  221,  210,
      220,  220,  222,  223,  226,  224,  225,  227,  228,  229,
      230,    0,  231,    0,  216,  224,    0,    0,  226,  224,
      232,  227,  228,  229,  230,  221,  231,  217,  219,  233,

      223,  222,  235,  234,  232,  218,    0,  236,  237,    0,
      240,    0,    0,  233,  238,  239,  235,  234,  241,  225,
      229,  236,  237,  228,  240,  227,  226,  242,  238,  239,
      244,  243,  241,    0,  246,  230,  245,  247,  231,    0,
      248,  242,  251,  235,  244,  243,  249,  237,  246,  240,
      245,  247,  233,  234,  248,  250,  251,    0,    0,    0,
      249,    0,  236,    0,  264,    0,  238,    0,  265,  250,
      266,  239,  243,  241,  252,  252,  252,  252,  264,  246,
      248,  242,  265,  249,  266,  244,  268,  245,  267,  275,
      251,    0,  247,    0,  250,  253,  253,  253,  253,  254,

      268,  254,  267,  275,  254,  254,  254,  254,  253,  255,
      271,  255,  255,  255,  256,  256,  256,  256,  266,  257,
      257,  257,  257,    0,  271,    0,  253,  255,  275,  268,
      255,  255,  257,  255,  258,  281,  258,  258,  258,  259,
      267,  259,  259,  259,  259,  269,    0,    0,  272,  281,
      257,    0,  258,    0,    0,  258,  258,  259,  258,  269,
      259,  259,  272,  259,    0,  271,    0,  259,  260,  260,
      260,  260,  261,  261,  261,  270,  261,    0,  260,  260,
      260,  260,  260,    0,  260,  260,  260,  260,  281,  270,
      269,  261,  261,  272,  261,  260,  260,  260,  260,  260,

      260,    0,  261,  260,  260,  273,  260,  262,  274,  262,
      260,  276,  262,  262,  262,  262,  277,  279,  278,  273,
      283,  280,  274,  282,  270,  276,  284,  287,  285,  288,
      277,  279,  278,  289,  283,  280,  290,  282,  286,  291,
      284,  287,  285,  288,    0,  292,  273,  289,  293,  294,
      290,  295,  286,  291,    0,  296,    0,    0,  274,  292,
      279,  280,  293,  294,  277,  295,  276,  284,  283,  296,
      297,  277,  278,  285,  298,  282,  299,  286,  287,  300,
      289,  301,    0,  302,  297,    0,  303,  305,  298,  295,
      299,  304,  306,  300,  294,  301,  296,  302,    0,  292,

      303,  305,  307,  293,  308,  304,  306,  310,  309,  312,
      297,  311,  298,  315,  314,    0,  307,  313,  308,  316,
      317,  310,  309,  312,  318,  311,  314,  315,  314,  300,
      320,  313,  299,  316,  317,  303,  301,  321,  318,  304,
      319,    0,  302,  322,  320,  323,  324,  325,    0,    0,
      312,  321,  326,    0,  319,  307,  329,  322,  328,  323,
      324,  325,  308,  309,  311,  327,  326,  313,  315,  331,
      329,  320,  328,  330,  317,  332,  333,  319,  334,  327,
      335,  336,  321,  331,  337,    0,    0,  330,  338,  332,
      333,  339,  334,    0,  335,  336,    0,  322,  337,  324,

      325,  329,  338,  323,  340,  339,  327,  326,  341,  328,
      330,  342,  343,    0,  332,  356,  344,  334,  340,  335,
        0,  336,  341,  360,  333,  342,  343,  331,    0,  356,
      344,    0,    0,    0,  339,    0,  363,  360,  338,  345,
      345,  345,  345,    0,    0,  346,  346,  346,  346,  348,
      363,  348,  348,  348,    0,  358,  343,  344,  346,  360,
      340,  354,  354,  354,  354,    0,  342,  348,  357,  358,
      348,  348,  349,  348,  349,  363,  346,  349,  349,  349,
      349,  350,  357,  350,  350,  350,  350,  359,    0,  352,
      361,  352,  352,  352,  362,  426,  426,  426,  426,  350,

      358,  359,  350,  350,  361,  350,    0,  352,  362,  350,
      352,  352,  353,  352,  353,  364,  357,  353,  353,  353,
      353,  355,  355,  355,  355,    0,  365,  366,    0,  364,
      359,  367,    0,  368,  369,  355,  370,  355,  355,  355,
      365,  366,  362,  361,  371,  367,  368,  368,  369,  372,
      370,  373,  375,  355,    0,    0,  355,  355,  371,  355,
        0,  374,    0,  372,  376,  373,  375,  377,  366,  364,
      378,  379,    0,  380,  365,  374,  367,  381,  376,  382,
      383,  377,  384,  371,  378,  379,  370,  380,    0,  369,
      372,  381,  373,  382,  383,    0,  384,  385,  374,  386,

        0,  387,  375,    0,  377,  388,  390,  389,  378,  380,
      391,  385,  392,  386,  376,  387,    0,  383,  393,  388,
      390,  389,  394,  395,  391,  396,  392,  397,  399,  382,
      384,  398,  393,    0,    0,    0,  394,  395,  385,  396,
      400,  397,  399,  401,    0,  398,  388,  386,  389,  387,
      402,  403,  404,  392,  400,    0,  405,  401,  390,  394,
      408,  406,  391,  407,  402,  403,  404,  409,  393,  397,
      405,  406,  398,  410,  408,  406,  411,  407,  412,  413,
      396,  409,  414,  415,  416,  417,  418,  410,  420,  419,
      411,  404,  412,  413,    0,  401,  414,  415,  416,  417,

      418,  421,  420,  419,  403,  402,  422,    0,  407,  423,
      408,  405,  424,  410,  425,  421,    0,  412,  411,  414,
      422,  416,    0,  423,    0,  419,  424,  413,  425,  417,
      419,    0,    0,  439,  418,    0,  434,    0,  415,  435,
        0,    0,  429,  422,  429,  429,  429,  439,  463,  424,
      434,  421,    0,  435,  423,  427,  427,  427,  427,    0,
      429,  438,  463,  429,  429,    0,  429,    0,    0,  427,
        0,  427,  427,  427,  430,  438,  430,  434,  436,  430,
      430,  430,  430,  431,  431,  431,  431,  427,  439,  435,
      427,  427,  436,  427,  432,  432,  432,  432,  433,  437,

      433,  433,  433,  440,  441,    0,  438,  442,  432,    0,
      432,  432,  432,  437,    0,    0,  433,  440,  441,  433,
      433,  442,  433,  443,  444,    0,  432,  445,  436,  432,
      432,  446,  432,  448,  447,  437,  450,  443,  444,  445,
      449,  445,  451,  454,  452,  446,  455,  448,  447,  453,
      450,  440,  457,  456,  449,  458,  451,  454,  452,  441,
      455,  442,  459,  453,  460,  461,  457,  456,  464,  458,
      448,  462,    0,  443,  444,  447,  459,  449,  460,  461,
      465,    0,  464,    0,  446,  462,  466,  450,    0,    0,
      453,  454,  455,  456,  465,  456,  467,  451,  452,  468,

      466,  469,  459,  456,  470,  456,  461,  471,  457,  458,
      467,  472,    0,  468,  473,  469,  474,    0,  470,  475,
      476,  471,  477,  460,  478,  472,  462,  479,  473,  480,
      474,  465,  481,  475,  476,  482,  477,  466,  478,  483,
      484,  479,    0,  480,  485,  486,  481,  487,  488,  482,
      489,  473,    0,  483,  484,  490,  469,  474,  485,  486,
        0,  487,  488,  477,  489,  491,  479,  492,  493,  490,
      494,  495,  498,    0,  475,  496,  496,  496,  496,  491,
      499,  492,  493,  500,  494,  495,  498,  489,  484,  501,
      502,  504,    0,    0,  499,    0,  503,  500,  505,  485,

      506,  487,    0,  501,  502,  504,  490,  491,  492,  495,
      503,  507,  505,  509,  506,  508,  493,  499,  494,  497,
      497,  497,  497,    0,  510,  507,  511,  509,  502,  508,
      512,  498,  513,  497,  500,  497,  497,  497,  510,  514,
      511,  503,    0,    0,  512,  515,  513,  516,  517,  518,
      519,  497,  506,  514,  497,  497,  508,  497,    0,  515,
      522,  516,  517,  518,  519,  507,  511,    0,  520,  510,
      521,  523,  513,  524,  522,  525,    0,    0,  512,  526,
      527,  514,  520,    0,  521,  523,  528,  524,  529,  525,
      515,  519,  516,  526,  527,    0,  530,  518,  531,  532,

      528,    0,  529,  533,  534,  520,  535,  536,  537,  520,
      530,  522,  531,  532,  524,  521,  525,  533,  534,  538,
      535,  536,  537,  539,  523,  540,  541,  542,    0,  543,
      544,  545,  546,  538,  547,    0,  548,  539,  532,  540,
      541,  542,  533,  543,  544,  545,  546,  549,  547,  530,
      548,  531,    0,  550,  551,  552,    0,  553,  554,    0,
      536,  549,  539,  537,  559,  542,  535,  550,  551,  552,
      544,  553,  554,  546,  556,  555,  557,  558,  559,  540,
      541,    0,  547,  560,    0,  561,    0,  562,  556,  555,
      557,  558,  563,  564,  565,  550,    0,  560,  553,  561,

      549,  562,  566,  554,  567,  552,  563,  564,  565,  568,
      551,  555,  557,  556,  569,  570,  566,  571,  567,    0,
      572,  573,  574,  568,    0,  558,  575,  577,  569,  570,
        0,  571,  564,  561,  572,  573,  574,  576,  562,    0,
      575,  577,    0,  578,  566,  568,  579,  580,  581,  565,
      582,  576,    0,  571,  583,  584,  566,  578,  585,    0,
      579,  580,  581,  567,  582,  569,  574,  575,  583,  584,
      586,  587,  585,  576,  588,  572,  573,  589,  590,  592,
      591,  593,    0,  594,  586,  587,  595,  596,  588,  597,
      579,  589,  590,  592,  591,  593,  582,  594,  598,  585,

      595,  596,  581,  597,  599,    0,  600,  587,    0,  601,
      602,  603,  598,  589,    0,  592,    0,  590,  599,  594,
      600,  604,  595,  601,  602,  603,  605,    0,  596,  588,
      586,  591,  606,  607,  608,  604,  593,    0,    0,  597,
      605,  599,  609,  600,  610,  611,  606,  607,  608,  612,
      613,  602,  603,  598,  601,  614,  609,  615,  610,  611,
      616,    0,  617,  612,  613,  618,  619,  620,  619,  614,
      621,  615,  622,  604,  616,  608,  617,  605,  623,  618,
      619,  620,    0,  610,  621,  624,  622,  625,  626,    0,
      611,  613,  623,  627,    0,  628,  616,  629,  630,  624,

      631,  625,  626,  617,  632,  633,  634,  627,  622,  628,
        0,  629,  630,  635,  631,  636,  638,  620,  632,  633,
      634,  624,  618,  625,  626,  637,    0,  635,  639,  636,
      638,  640,    0,  641,  645,  643,  644,  646,    0,  637,
      631,  630,  639,  647,    0,  640,  633,  641,  645,  643,
      644,  646,  636,  629,  648,  638,    0,  647,  634,    0,
      649,    0,  650,  632,  651,  652,  635,  640,  648,  654,
      641,  643,  644,  646,  649,  637,  650,  655,  651,  652,
      653,  656,  657,  654,  659,  663,  658,  664,    0,  662,
      665,  655,  666,  667,  653,  656,  657,  668,  659,  663,

      658,  664,  648,  662,  665,  669,  666,  667,    0,    0,
      649,  668,    0,  670,  672,  671,  651,  673,  652,  669,
      659,  653,  658,  654,  656,  662,  658,  670,  672,  671,
      667,  673,  655,  666,  674,  675,  676,  657,    0,  677,
      679,    0,    0,  678,  680,  665,  681,  682,  674,  675,
      676,  684,  668,  677,  679,  669,  671,  678,  680,    0,
      681,  682,    0,  685,  683,  684,  686,  687,  688,  689,
        0,  690,  693,  676,  691,  692,  675,  685,  683,  678,
      686,  687,  688,  689,  676,  690,  693,  694,  691,  692,
      695,  696,    0,  679,  680,  697,  698,    0,  699,  700,

      701,  694,    0,  684,  695,  696,  681,  683,  702,  697,
      698,  686,  699,  700,  701,  693,  685,  703,  704,  687,
      705,  706,  702,  689,  707,  691,  708,    0,  692,    0,
      709,  703,  704,  711,  705,  706,  696,  698,  707,  710,
      708,  694,  712,  695,  709,    0,  713,  711,  697,  714,
      715,  701,  716,  710,  700,  717,  712,  704,  718,  702,
      713,  719,  720,  714,  715,  721,  716,  709,    0,  717,
        0,    0,  718,  706,  707,  719,  720,  703,    0,  721,
      710,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      714,    0,  716,    0,  718,    0,    0,  712,  720,  713,

        0,    0,    0,    0,    0,  715,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  717,  723,  723,  723,  723,
      723,  723,  723,  723,  724,  724,    0,  724,  724,  724,
      724,  724,  725,    0,    0,    0,  725,  725,  725,  726,
      726,  726,  727,  727,  728,  728,  728,  728,  728,  728,
      728,  728,  729,  729,  730,  730,  730,  731,  731,  732,
        0,  732,  732,  732,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,

      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define INITIAL 0
#define YY_NO_UNPUT 1
#line 13 "lexer.l"
import "ecdefs"
#define YYLTYPE Location
#define YY_NEVER_INTERACTIVE 1    // Avoid calling isatty on eC File object

#include "grammar.h"

bool echoOn = true;
public void SetEchoOn(bool b) { echoOn = b; }

extern YYLTYPE type_yylloc;
extern YYLTYPE expression_yylloc;

extern File fileInput;
int preprocessor();
int comment();

void TESTTTT()
{
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   type_yylloc.end.charPos += yyleng;
   type_yylloc.end.pos += yyleng;
   expression_yylloc.end.charPos += yyleng;
   expression_yylloc.end.pos += yyleng;
}

#define YY_USER_ACTION  \
   TESTTTT();

   /*
   yylloc.end.charPos += yyleng;
   yylloc.end.pos += yyleng;
   */

#define YY_INPUT(buf,result,max_size) \
   result = fileInput.Read(buf, 1, max_size) \

YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
File fileStack[MAX_INCLUDE_DEPTH];
char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
public void SetSomeSourceFileStack(const char * fileName, int index) { strcpy(sourceFileStack[index], fileName); }
YYLTYPE locStack[MAX_INCLUDE_DEPTH];
AccessMode declModeStack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

#define uint _uint
default:

#line 1240 "lexer.ec"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 63 "lexer.l"



   yylloc.start = yylloc.end;
   type_yylloc.start = type_yylloc.end;
   expression_yylloc.start = expression_yylloc.end;


#line 1400 "lexer.ec"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 723 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2565 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 71 "lexer.l"
{ preprocessor(); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 72 "lexer.l"
{ comment(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 73 "lexer.l"
{ commentCPP(); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 75 "lexer.l"
{ return(AUTO); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 76 "lexer.l"
{ return(BREAK); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 77 "lexer.l"
{ return(CASE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 78 "lexer.l"
{ return(CHAR); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 79 "lexer.l"
{ return(CONST); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 80 "lexer.l"
{ return(CONTINUE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 81 "lexer.l"
{ return(DEFAULT); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 82 "lexer.l"
{ return(DO); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 83 "lexer.l"
{ return(DOUBLE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 84 "lexer.l"
{ return(ELSE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 85 "lexer.l"
{ return(ENUM); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 86 "lexer.l"
{ return(EXTERN); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 87 "lexer.l"
{ return(FLOAT); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 88 "lexer.l"
{ return(FOR); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 89 "lexer.l"
{ return(GOTO); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 90 "lexer.l"
{ return(IF); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 91 "lexer.l"
{ return(INT); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 92 "lexer.l"
{ return(UINT); }
	YY_BREAK
/* "uint16"            { return(UINT16); } */
/* "uint32"            { return(UINT32); } */
/* "bool"              { return(BOOL_TOKEN); } */
case 22:
YY_RULE_SETUP
#line 96 "lexer.l"
{ return(LONG); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 97 "lexer.l"
{ return(REGISTER); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 98 "lexer.l"
{ return(RETURN); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 99 "lexer.l"
{ return(SHORT); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 100 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 101 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 102 "lexer.l"
{ return(SIGNED); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 103 "lexer.l"
{ return(SIZEOF); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 104 "lexer.l"
{ return(ALIGNOF); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 105 "lexer.l"
{ return(STATIC); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 106 "lexer.l"
{ return(THREAD); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 107 "lexer.l"
{ return(STRUCT); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 108 "lexer.l"
{ return(SWITCH); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 109 "lexer.l"
{ return(TYPEDEF); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 110 "lexer.l"
{ return(UNION); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 111 "lexer.l"
{ return(UNSIGNED); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 112 "lexer.l"
{ return(VOID); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 113 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 114 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 115 "lexer.l"
{ return(VOLATILE); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 116 "lexer.l"
{ return(WHILE); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 118 "lexer.l"
{ return(PROPERTY); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 119 "lexer.l"
{ return(SETPROP); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "lexer.l"
{ return(GETPROP); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "lexer.l"
{ return(ISPROPSET); }    // TODO: Don't make this a keyword...
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "lexer.l"
{ return(CLASS); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "lexer.l"
{ return(THISCLASS); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 124 "lexer.l"
{ return(VIRTUAL); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 125 "lexer.l"
{ return(DELETE); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 126 "lexer.l"
{ return(NEWOP); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 127 "lexer.l"
{ return(NEW0OP); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 128 "lexer.l"
{ return(RENEW); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 129 "lexer.l"
{ return(RENEW0); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 130 "lexer.l"
{ return(IMPORT); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 131 "lexer.l"
{ return(DEFINE); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 132 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 133 "lexer.l"
{ return(INT64); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 134 "lexer.l"
{ return(VALIST); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 135 "lexer.l"
{ return(VAARG); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 136 "lexer.l"
{ return(BOOL); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 137 "lexer.l"
{ return(_BOOL); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 138 "lexer.l"
{ return(_COMPLEX); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 139 "lexer.l"
{ return(_IMAGINARY); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 140 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
/* "__attribute__".?"(("({D}|{L})*"))" { return(EXT_ATTRIB); } */
/* DID I MEAN? "__attribute__"" "*"(("" "*({D}|{L})*" "*("("({D}|{L})*(" "*","" "*({D}|{L})*)*" "*")")?" "*"))" { return(EXT_ATTRIB); } */
/*
 "__attribute_deprecated__"(" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute__"           (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 "__attribute"             (" "*)"(("(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*)(","(" "*)({D}|{L})*(" "*)("("({D}|{L}|\")*((" "*)","(" "*)({D}|{L}|\")*)*(" "*)")")?(" "*))*"))" { return(EXT_ATTRIB); }
 */
/*
 [__attribute__] [spaces]
   [((] [spaces]
      [digits | letters] [spaces]
         ( [(]  [digits or letters or "]  ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces]  [)] )?
      [spaces]
      ( [,] [spaces]  [digits or letters]  [spaces]
         ( [(]  [digits or letters or "]
            ( [spaces] [,] [spaces] [digits or letters or "] )*  [spaces] [)]
         )? [spaces]
      )*
   [))]
 */
/* "__attribute__".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); } */
/* "__attribute".?"((".?({D}|{L})*.?("("({D}|{L})*(.?",".?({D}|{L})*)*.?")")?.?"))" { return(EXT_ATTRIB); }*/
case 66:
YY_RULE_SETUP
#line 167 "lexer.l"
{ return ATTRIB_DEP; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 168 "lexer.l"
{ return ATTRIB; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 169 "lexer.l"
{ return __ATTRIB; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 171 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 172 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 173 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 174 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 175 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 176 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 177 "lexer.l"
{ return(EXT_STORAGE); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 178 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 179 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 180 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 181 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 182 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 183 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 184 "lexer.l"
{ return(CONST /*EXT_DECL*/); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 185 "lexer.l"
{ return(EXT_DECL); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 186 "lexer.l"
{ return(PUBLIC); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 187 "lexer.l"
{ return(PRIVATE); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 188 "lexer.l"
{ return(TYPED_OBJECT); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 189 "lexer.l"
{ return(ANY_OBJECT); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 190 "lexer.l"
{ return(_INCREF); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 191 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 192 "lexer.l"
{ return(EXTENSION); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 193 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 194 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 195 "lexer.l"
{ return(ASM); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 196 "lexer.l"
{ return(TYPEOF); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 197 "lexer.l"
{ return(WATCH); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 198 "lexer.l"
{ return(STOPWATCHING); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 199 "lexer.l"
{ return(FIREWATCHERS); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 200 "lexer.l"
{ return(WATCHABLE); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 201 "lexer.l"
{ return(CLASS_DESIGNER); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 202 "lexer.l"
{ return(CLASS_NO_EXPANSION); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 203 "lexer.l"
{ return(CLASS_FIXED); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 204 "lexer.l"
{ return(CLASS_DEFAULT_PROPERTY); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 205 "lexer.l"
{ return(PROPERTY_CATEGORY); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 206 "lexer.l"
{ return(CLASS_DATA); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 207 "lexer.l"
{ return(CLASS_PROPERTY); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 208 "lexer.l"
{ return(SUBCLASS); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 209 "lexer.l"
{ return(NAMESPACE); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 210 "lexer.l"
{ return(DBTABLE); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 211 "lexer.l"
{ return(DBFIELD); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 212 "lexer.l"
{ return(DBINDEX); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 213 "lexer.l"
{ return(DATABASE_OPEN); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 215 "lexer.l"
{ return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); }  // ("::"|(({IDENT}"::")*)){IDENT}  { return(check_type()); }     // {L}({L}|{D})*      { return(check_type()); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 217 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 219 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 220 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 221 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 223 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 224 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 225 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 227 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 228 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 229 "lexer.l"
{ return(CONSTANT); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 231 "lexer.l"
{ return(STRING_LITERAL); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 232 "lexer.l"
{ return(WIDE_STRING_LITERAL); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 234 "lexer.l"
{ return(ELLIPSIS); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 235 "lexer.l"
{ return(RIGHT_ASSIGN); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 236 "lexer.l"
{ return(LEFT_ASSIGN); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 237 "lexer.l"
{ return(ADD_ASSIGN); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 238 "lexer.l"
{ return(SUB_ASSIGN); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 239 "lexer.l"
{ return(MUL_ASSIGN); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 240 "lexer.l"
{ return(DIV_ASSIGN); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 241 "lexer.l"
{ return(MOD_ASSIGN); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 242 "lexer.l"
{ return(AND_ASSIGN); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 243 "lexer.l"
{ return(XOR_ASSIGN); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 244 "lexer.l"
{ return(OR_ASSIGN); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 245 "lexer.l"
{ return(RIGHT_OP); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 246 "lexer.l"
{ return(LEFT_OP); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 247 "lexer.l"
{ return(INC_OP); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 248 "lexer.l"
{ return(DEC_OP); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 249 "lexer.l"
{ return(PTR_OP); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 250 "lexer.l"
{ return(AND_OP); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 251 "lexer.l"
{ return(OR_OP); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 252 "lexer.l"
{ return(LE_OP); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 253 "lexer.l"
{ return(GE_OP); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 254 "lexer.l"
{ return(EQ_OP); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 255 "lexer.l"
{ return(NE_OP); }
	YY_BREAK
/* "::"        { return(CLASS_OP); } */
case 147:
YY_RULE_SETUP
#line 257 "lexer.l"
{ return(';'); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 258 "lexer.l"
{ return('{'); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 259 "lexer.l"
{ return('}'); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 260 "lexer.l"
{ return(','); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 261 "lexer.l"
{ return(':'); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 262 "lexer.l"
{ return('='); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 263 "lexer.l"
{ return('('); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 264 "lexer.l"
{ return(')'); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 265 "lexer.l"
{ return('['); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 266 "lexer.l"
{ return(']'); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 267 "lexer.l"
{ return('.'); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 268 "lexer.l"
{ return('&'); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 269 "lexer.l"
{ return('!'); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 270 "lexer.l"
{ return('~'); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 271 "lexer.l"
{ return('-'); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 272 "lexer.l"
{ return('+'); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 273 "lexer.l"
{ return('*'); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 274 "lexer.l"
{ return('/'); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 275 "lexer.l"
{ return('%'); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 276 "lexer.l"
{ return('<'); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 277 "lexer.l"
{ return('>'); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 278 "lexer.l"
{ return('^'); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 279 "lexer.l"
{ return('|'); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 280 "lexer.l"
{ return('?'); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 281 "lexer.l"
{ return('$'); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 283 "lexer.l"
{
      while(include_stack_ptr && !fileStack[include_stack_ptr-1])
      {
         --include_stack_ptr;
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }

      if ( --include_stack_ptr < 0 )
      {
         include_stack_ptr = 0;
         yyterminate();
      }
      else
      {
         delete fileInput;
         yy_delete_buffer( YY_CURRENT_BUFFER );
         fileInput = fileStack[include_stack_ptr];
         yylloc = locStack[include_stack_ptr];
         type_yylloc = locStack[include_stack_ptr];
         expression_yylloc = locStack[include_stack_ptr];
         yy_switch_to_buffer(include_stack[include_stack_ptr] );
         defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
      }
   }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 309 "lexer.l"
{ yylloc.start = yylloc.end; type_yylloc.start = type_yylloc.end; expression_yylloc.start = expression_yylloc.end;}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 310 "lexer.l"
{
   yylloc.end.charPos = 1; yylloc.end.line += yyleng; yylloc.start = yylloc.end;
   type_yylloc.end.charPos = 1; type_yylloc.end.line += yyleng; type_yylloc.start = type_yylloc.end;
   expression_yylloc.end.charPos = 1; expression_yylloc.end.line += yyleng; expression_yylloc.start = expression_yylloc.end;
   }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 315 "lexer.l"
{
   yylloc.start.charPos++ /*= 3 - (yylloc.start.col % 3)*/; yylloc.end.charPos = yylloc.start.charPos; yylloc.start.pos = yylloc.end.pos;
   expression_yylloc.start.charPos++ /*= 3 - (expression_yylloc.start.col % 3)*/; expression_yylloc.end.charPos = expression_yylloc.start.charPos; expression_yylloc.start.pos = expression_yylloc.end.pos;
   type_yylloc.start.charPos++ /*= 3 - (type_yylloc.start.col % 3)*/; type_yylloc.end.charPos = type_yylloc.start.charPos; type_yylloc.start.pos = type_yylloc.end.pos;
   }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 320 "lexer.l"
{ yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 321 "lexer.l"
{
   yylloc.start = yylloc.end; expression_yylloc.start = expression_yylloc.end;  type_yylloc.start = type_yylloc.end;
   if(inCompiler)
      printf("lexer error: invalid char 0x%X at line %d, col %d\n", (unsigned char)yytext[0], yylloc.start.line, yylloc.start.charPos);
   yyerror();
   }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 328 "lexer.l"
ECHO;
	YY_BREAK
#line 2434 "lexer.ec"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 723 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 723 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 722);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 328 "lexer.l"


private:

int yywrap()
{
   return(1);
}

int comment()
{
   int c, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      if(c == '/' && last == '*')
         break;
      last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int commentCPP()
{
   int c; //, last = 0;
   for(;;)
   {
      c = input();
      if(c == EOF) break;

      // fputc(c, output);
      // putchar(c);
      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         break;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
      }
      else
      {
         yylloc.end.charPos++;
         yylloc.end.pos++;
      }
      //last = c;
   }
   yylloc.start = yylloc.end;
   return 0;
}

int preprocessor()
{
   int c, last = 0;
   int count = 0;
   char line[1024];

   line[0] = '\0';

   for(;;)
   {
      c = input();
      if(c == EOF) break;

      if(c == '\n')
      {
         yylloc.end.charPos = 1;
         yylloc.end.pos++;
         yylloc.end.line++;
         if(last != '\\')
         {
            char * pointer = line + 1;
            int lineNumber;
            line[count] = 0;
            lineNumber = GetValue(&pointer);
            if(lineNumber)
            {
               char fileName[MAX_LOCATION];

               int inOut;

               fileName[0] = 0;
               GetString(&pointer, fileName, MAX_LOCATION);
               inOut = GetValue(&pointer);

               if(inOut == 1)
               {
                  char extension[MAX_EXTENSION];

                  defaultDeclMode = declModeStack[include_stack_ptr] = declMode;

                  GetExtension(fileName, extension);
                  if(!strcmp(extension, "c") || !strcmp(extension, "h"))
                     declMode = defaultDeclMode = structDeclMode = defaultAccess;

                  fileStack[include_stack_ptr] = null;
                  include_stack_ptr++;
               }
               else if(inOut == 2)
               {
                  include_stack_ptr--;
                  defaultDeclMode = declMode = structDeclMode = declModeStack[include_stack_ptr];
               }

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               //yylloc.end.pos -= count;

               if(include_stack_ptr > 0 || (lineNumber && fileName[0]))
                  yylloc.end.included = GetIncludeFileID(fileName);
               else
                  yylloc.end.included = 0;
            }
            /*
            int lineNumber = strtol(line+1, &endPtr, 0);
            if(lineNumber)
            {
               GetString(&
               endPtr

               yylloc.end.charPos = 1;
               yylloc.end.line = lineNumber;
               yylloc.end.pos -= count;
            }
            */
            break;
         }
         count = 0;
      }
      else if (c == '\t')
      {
         yylloc.end.charPos++ /* += 3 - (yylloc.end.col % 3)*/;
         yylloc.end.pos++;
         line[count++] = c;
      }
      else
      {
         yylloc.end.pos++;
         if(c != '\r')
         {
            yylloc.end.charPos++;
            line[count++] = c;
         }
      }
      last = c;
   }
   yylloc.start = yylloc.end;
   line[count] = 0;

   TrimLSpaces(line, line);
   for(c = 0; line[c] && line[c] != ' '; c++);
   if(!strncmp(line, "include", c))
   {
      char includeFile[MAX_LOCATION] = "";

      memmove(line, line+c, strlen(line+c)+1);
      TrimLSpaces(line, line);
      if(line[0] == '\"')
      {
         for(c = 1; line[c]; c++)
         {
            if(line[c] == '\"')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
         }
      }
      else if(line[0] == '<')
      {
         for(c = 1; line[c]; c++)
            if(line[c] == '>')
            {
               strncpy(includeFile, line+1, c-1);
               includeFile[c-1] = '\0';
               break;
            }
      }

      if ( include_stack_ptr >= MAX_INCLUDE_DEPTH )
      {
         fprintf( stderr, "%s", $"Includes nested too deeply" );
         exit( 1 );
      }

      if(inCompiler || !FindIncludeFileID(includeFile))
      {
         File file = OpenIncludeFile(includeFile);
         if(file)
         {
            char extension[MAX_EXTENSION];

            fileStack[include_stack_ptr] = fileInput;
            locStack[include_stack_ptr] = yylloc;
            defaultDeclMode = declModeStack[include_stack_ptr] = declMode;
            include_stack[include_stack_ptr++] = YY_CURRENT_BUFFER;

            yylloc.start.charPos = yylloc.end.charPos = 1;
            yylloc.start.line = yylloc.end.line = 1;
            yylloc.start.pos = yylloc.end.pos = 0;
            yylloc.start.included = yylloc.end.included = GetIncludeFileID(includeFile);

            GetExtension(includeFile, extension);
            if(!strcmp(extension, "c") || !strcmp(extension, "h"))
               declMode = defaultDeclMode = structDeclMode = defaultAccess;

            fileInput = file;
            yy_switch_to_buffer( yy_create_buffer( fileInput, YY_BUF_SIZE ) );
            BEGIN(INITIAL);
         }
      }
   }
   return 0;
}

public void resetScanner()
{
   YY_FLUSH_BUFFER;
   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;
}

void resetScannerPos(CodePosition pos)
{
   YY_FLUSH_BUFFER;
   yylloc.start = yylloc.end = pos;
   type_yylloc.start = type_yylloc.end = pos;
   expression_yylloc.start = expression_yylloc.end = pos;
}

class LexerBackup
{
   YYLTYPE yylloc;
   YYLTYPE type_yylloc;
   YYLTYPE expression_yylloc;

   AccessMode declMode;
   AccessMode defaultDeclMode;

   File fileInput;
   YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
   File fileStack[MAX_INCLUDE_DEPTH];
   char sourceFileStack[MAX_INCLUDE_DEPTH][MAX_LOCATION];
   YYLTYPE locStack[MAX_INCLUDE_DEPTH];
   AccessMode declModeStack[MAX_INCLUDE_DEPTH];
   int include_stack_ptr;
   YY_BUFFER_STATE buffer;

   int yy_n_chars;
   char * yytext_ptr;
   char * yy_c_buf_p;
   FILE * yyin;
   char yy_hold_char;
   int yychar;
   int yy_init;
   int yy_start;

};

LexerBackup pushLexer()
{
   LexerBackup backup { };

   backup.yylloc = yylloc;
   backup.type_yylloc = type_yylloc;
   backup.expression_yylloc = expression_yylloc;
   backup.fileInput = fileInput;
   memcpy(backup.include_stack, include_stack, sizeof(include_stack));
   memcpy(backup.fileStack, fileStack, sizeof(fileStack));
   memcpy(backup.sourceFileStack, sourceFileStack, sizeof(sourceFileStack));
   memcpy(backup.locStack, locStack, sizeof(locStack));
   memcpy(backup.declModeStack, declModeStack, sizeof(declModeStack));
   backup.include_stack_ptr = include_stack_ptr;
   backup.defaultDeclMode = defaultDeclMode;
   backup.declMode = declMode;
   backup.buffer = yy_current_buffer;

   backup.yy_n_chars = yy_n_chars;
   backup.yytext_ptr = yytext_ptr;
   backup.yy_c_buf_p = yy_c_buf_p;
   backup.yyin = yyin;
   backup.yy_hold_char = yy_hold_char;
   backup.yychar = yychar;
   backup.yy_init = yy_init;
   backup.yy_start = yy_start;

   yy_init = 1;

   yy_current_buffer = 0;

   yylloc.start.charPos = yylloc.end.charPos = 1;
   yylloc.start.line = yylloc.end.line = 1;
   yylloc.start.pos = yylloc.end.pos = 0;
   yylloc.start.included = yylloc.end.included = 0;

   expression_yylloc.start.charPos = expression_yylloc.end.charPos = 1;
   expression_yylloc.start.line = expression_yylloc.end.line = 1;
   expression_yylloc.start.pos = expression_yylloc.end.pos = 0;
   expression_yylloc.start.included = expression_yylloc.end.included = 0;

   type_yylloc.start.charPos = type_yylloc.end.charPos = 1;
   type_yylloc.start.line = type_yylloc.end.line = 1;
   type_yylloc.start.pos = type_yylloc.end.pos = 0;
   type_yylloc.start.included = type_yylloc.end.included = 0;

   include_stack_ptr = 0;

   return backup;
}

void popLexer(LexerBackup backup)
{
   yylloc = backup.yylloc;
   type_yylloc = backup.type_yylloc;
   expression_yylloc = backup.expression_yylloc;
   fileInput = backup.fileInput;
   memcpy(include_stack, backup.include_stack, sizeof(include_stack));
   memcpy(fileStack, backup.fileStack, sizeof(fileStack));
   memcpy(sourceFileStack, backup.sourceFileStack, sizeof(sourceFileStack));
   memcpy(locStack, backup.locStack, sizeof(locStack));
   memcpy(declModeStack, backup.declModeStack, sizeof(declModeStack));
   include_stack_ptr = backup.include_stack_ptr;
   defaultDeclMode = backup.defaultDeclMode;
   declMode = structDeclMode = backup.declMode;

   // yy_switch_to_buffer(backup.buffer);
   yy_current_buffer = backup.buffer;
   yy_n_chars = backup.yy_n_chars;
   yytext_ptr = backup.yytext_ptr;
   yy_c_buf_p = backup.yy_c_buf_p;
   yyin = backup.yyin;
   yy_hold_char = backup.yy_hold_char;
   yychar = backup.yychar;
   yy_init = backup.yy_init;
   yy_start = backup.yy_start;

   delete backup;
}
