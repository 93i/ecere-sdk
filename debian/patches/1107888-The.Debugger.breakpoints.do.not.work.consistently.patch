From a06f4bc62a2e417e4210f572d6a1bc58b5e83128 Mon Sep 17 00:00:00 2001
From: Jerome St-Louis <jerome@ecere.com>
Date: Mon, 28 Jan 2013 05:28:19 -0500
Subject: [PATCH 12/14] ide/debugger/breakpoints: Fixed breakpoint line number
 issues - Fix for debug line numbers in generated C
 code - Fixed GDB communication losing breakpoint line
 numbers (Added proper escaping to both StripQuotes2
 and TokenizeList)

---
 compiler/bootstrap/libec/bootstrap/output.c |    2 +-
 compiler/libec/src/output.ec                |    2 +-
 ide/src/debugger/Debugger.ec                |   22 ++++++++++++----------
 3 files changed, 14 insertions(+), 12 deletions(-)

diff --git a/compiler/bootstrap/libec/bootstrap/output.c b/compiler/bootstrap/libec/bootstrap/output.c
index 268fb8c..d7b532e 100644
--- a/compiler/bootstrap/libec/bootstrap/output.c
+++ b/compiler/bootstrap/libec/bootstrap/output.c
@@ -2578,7 +2578,7 @@ void OutputTree(struct __ecereNameSpace__ecere__sys__OldList * ast, struct __ece
 {
 struct External * external;
 
-outputLine = 11;
+outputLine = 25;
 for(external = ast->first; external; external = external->next)
 {
 switch(external->type)
diff --git a/compiler/libec/src/output.ec b/compiler/libec/src/output.ec
index 7d3a7b2..6a19c11 100644
--- a/compiler/libec/src/output.ec
+++ b/compiler/libec/src/output.ec
@@ -1445,7 +1445,7 @@ public void OutputTree(OldList ast, File f)
 {
    External external;
 
-   outputLine = 11;
+   outputLine = 25;
 
    for(external = ast.first; external; external = external.next)
    {
diff --git a/ide/src/debugger/Debugger.ec b/ide/src/debugger/Debugger.ec
index 6e65a96..3875dcb 100644
--- a/ide/src/debugger/Debugger.ec
+++ b/ide/src/debugger/Debugger.ec
@@ -60,8 +60,7 @@ public char * StripQuotes2(char * string, char * output)
          if(escaped || ch != '\"')
          {
             output[d++] = ch;
-            if(ch == '\\')
-               escaped ^= true;
+            escaped = !escaped && ch == '\\';
          }
          else
             quoted = false;
@@ -258,25 +257,28 @@ static int TokenizeList(char * string, const char seperator, Array<char *> token
 {
    uint level = 0;
    
-   bool quoted = false; //bool escaped = false;
-   char * start = string;
+   bool quoted = false, escaped = false;
+   char * start = string, ch;
    
-   for(; *string; string++)
+   for(; (ch = *string); string++)
    {
       if(!start)
          start = string;
+
       if(quoted)
       {
-         if(*string == '\"')
+         if(escaped || ch != '\"')
+            escaped = !escaped && ch == '\\';
+         else
             quoted = false;
       }
-      else if(*string == '\"')
+      else if(ch == '\"')
          quoted = true;
-      else if(*string == '{' || *string == '[' || *string == '(' || *string == '<')
+      else if(ch == '{' || ch == '[' || ch == '(' || ch == '<')
          level++;
-      else if(*string == '}' || *string == ']' || *string == ')' || *string == '>')
+      else if(ch == '}' || ch == ']' || ch == ')' || ch == '>')
          level--;
-      else if(*string == seperator && !level)
+      else if(ch == seperator && !level)
       {
          tokens.Add(start);
          *string = '\0';
-- 
1.7.9.5

